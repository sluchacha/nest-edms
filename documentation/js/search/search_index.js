var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AbstractService.html",[0,0.691,1,2.788]],["body/injectables/AbstractService.html",[0,0.778,1,3.14,2,1.106,3,0.09,4,0.08,5,0.061,6,2.728,7,0.234,8,0.979,9,4.735,10,4.354,11,1.111,12,2.765,13,1.481,14,2.202,15,1.957,16,3.656,17,1.957,18,1.818,19,1.273,20,3.122,21,3.89,22,0.688,23,4.623,24,1.693,25,0.012,26,1.226,27,0.57,28,1.589,29,4.04,30,4.354,31,3.122,32,2.992,33,1.64,34,2.472,35,2.516,36,2.9,37,3.122,38,2.516,39,2.202,40,1.034,41,3.122,42,3.369,43,2.114,44,4.95,45,2.661,46,3.242,47,3.656,48,3.122,49,2.114,50,3.122,51,2.297,52,3.122,53,1.321,54,1.228,55,0.177,56,1.784,57,4.413,58,0.508,59,1.144,60,0.09,61,2.728,62,0.159,63,2.728,64,0.727,65,1.881,66,2.12,67,2.673,68,3.122,69,3.312,70,2.181,71,2.469,72,4.813,73,2.12,74,1.991,75,3.122,76,1.444,77,3.122,78,1.664,79,1.881,80,1.881,81,3.122,82,1.373,83,2.275,84,4.623,85,2.401,86,3.317,87,3.512,88,3.122,89,2.12,90,2.275,91,1.111,92,3.122,93,1.185,94,0.007,95,0.007]],["title/guards/ApiKeyGuard.html",[96,2.788,97,2.992]],["body/guards/ApiKeyGuard.html",[0,0.982,3,0.125,4,0.111,5,0.084,7,0.325,8,0.918,11,1.402,19,2.378,22,0.555,24,1.402,25,0.012,26,1.015,27,0.46,28,1.316,33,1.009,34,1.869,46,2.065,55,0.244,58,0.705,60,0.125,62,0.297,64,1.641,70,1.389,76,1.351,78,1.687,91,1.402,94,0.008,95,0.008,97,4.25,98,2.765,99,5.759,100,3.788,101,2.983,102,3.275,103,5.817,104,3.428,105,6.121,106,5.759,107,4.029,108,4.335,109,3.428,110,4.029,111,4.335,112,3.333,113,3.173,114,3.767,115,2.944,116,3.514,117,2.359,118,2.359,119,4.25,120,3.428,121,4.25,122,3.159,123,2.944,124,2.065,125,4.335,126,4.335,127,5.832,128,2.944,129,5.096,130,3.159,131,2.612,132,4.612,133,4.335,134,3.428,135,3.788,136,4.335,137,3.788,138,4.335,139,3.788,140,4.335,141,3.159,142,2.612,143,3.428,144,5.832,145,4.335,146,3.788]],["title/controllers/AppController.html",[147,1.615,148,2.992]],["body/controllers/AppController.html",[3,0.141,4,0.125,5,0.148,7,0.365,11,1.515,13,2.02,22,0.6,24,1.172,25,0.012,26,0.849,27,0.384,28,1.1,33,1.468,40,0.641,55,0.246,58,0.794,60,0.141,62,0.248,76,1.292,94,0.009,95,0.009,117,2.653,120,3.856,142,4.208,147,2.478,148,4.593,149,1.918,150,4.261,151,5.837,152,4.877,153,6.451,154,7.644,155,5.57,156,1.422,157,4.877,158,4.877,159,4.877,160,4.877,161,3.429,162,4.877,163,3.603,164,4.261,165,2.938,166,4.261,167,3.553,168,6.303,169,2.787,170,1.1,171,2.938,172,4.877,173,4.877,174,4.261,175,4.877,176,4.877,177,4.261,178,4.261]],["title/modules/AppModule.html",[179,1.36,180,2.992]],["body/modules/AppModule.html",[3,0.112,4,0.1,5,0.075,25,0.013,55,0.264,58,0.632,60,0.112,62,0.198,76,0.797,94,0.008,95,0.008,117,2.115,122,3.944,123,2.64,148,4.537,149,2.128,167,2.832,179,1.792,180,6.183,181,1.709,182,2.811,183,3.397,184,3.397,185,3.397,186,4.978,187,4.978,188,4.978,189,4.978,190,4.978,191,4.978,192,4.978,193,4.978,194,4.978,195,4.675,196,4.978,197,3.094,198,2.222,199,2.115,200,3.887,201,2.811,202,2.811,203,3.887,204,3.887,205,3.887,206,3.887,207,3.887,208,3.887,209,3.887,210,3.887,211,3.397,212,3.887,213,3.397,214,3.887,215,4.228,216,3.887,217,3.887,218,3.887,219,2.832,220,3.887,221,3.073,222,2.832,223,3.397,224,3.887,225,3.397,226,3.887,227,3.397,228,3.887]],["title/injectables/AppService.html",[0,0.691,196,2.788]],["body/injectables/AppService.html",[0,1.209,2,2.132,3,0.174,4,0.155,5,0.117,7,0.451,11,1.727,22,0.573,25,0.012,33,1.402,40,0.945,55,0.194,58,0.979,60,0.174,62,0.306,76,1.234,94,0.01,95,0.01,151,6.289,177,5.26,178,5.26,196,4.879,229,5.26,230,6.019]],["title/classes/Applicant.html",[62,0.209,231,2.133]],["body/classes/Applicant.html",[3,0.098,4,0.087,5,0.095,7,0.367,8,1.036,22,0.704,25,0.012,27,0.633,40,1.019,54,1.328,55,0.216,59,1.237,60,0.167,62,0.321,78,0.864,85,2.992,91,2.033,93,1.281,94,0.007,95,0.007,156,1.668,170,0.762,231,2.992,232,0.762,233,2.46,234,4.556,235,3.471,236,4.198,237,4.556,238,4.198,239,5.265,240,4.556,241,4.556,242,3.471,243,3.376,244,4.605,245,2.95,246,2.905,247,3.376,248,2.95,249,3.568,250,4.307,251,4.226,252,3.376,253,3.568,254,3.376,255,3.376,256,2.67,257,3.135,258,3.568,259,3.376,260,2.293,261,2.67,262,3.376,263,3.376,264,4.896,265,4.896,266,4.896,267,4.896,268,4.896,269,2.332,270,3.376,271,3.376,272,4.226,273,2.533,274,1.837,275,1.082,276,2.618,277,1.429,278,2.799,279,3.568,280,3.376,281,1.93,282,2.95,283,2.67,284,2.67,285,2.95,286,2.293,287,2.293,288,2.293,289,2.67,290,2.46,291,2.153,292,2.95]],["title/classes/ApplicantSnippetDto.html",[62,0.209,293,2.992]],["body/classes/ApplicantSnippetDto.html",[3,0.145,4,0.129,5,0.097,7,0.376,8,1.499,17,2.125,22,0.611,25,0.012,27,0.506,40,0.981,45,2.508,55,0.228,60,0.145,62,0.36,64,1.837,94,0.009,95,0.009,131,3.025,156,1.449,170,1.133,232,1.133,235,4.266,242,3.869,269,3.059,276,2.508,277,2.125,293,4.68,294,6.188,295,3.971,296,1.84,297,6.422,298,6.422,299,6.422,300,6.422,301,5.078,302,6.422,303,4.388,304,5.021,305,4.388,306,5.021,307,5.599,308,5.438,309,4.361,310,2.824,311,1.975,312,1.975,313,5.021]],["title/controllers/ApplicantsController.html",[147,1.615,314,2.992]],["body/controllers/ApplicantsController.html",[3,0.082,4,0.073,5,0.055,7,0.211,11,1.03,12,2.724,13,1.994,14,2.757,15,2.193,17,2.193,18,2.447,22,0.624,24,1.496,25,0.012,26,1.186,27,0.587,28,1.404,32,1.885,33,1.526,34,2.419,35,1.536,36,2.757,38,2.332,39,1.344,40,0.945,43,2.997,45,2.321,49,1.291,51,1.402,55,0.236,58,0.459,60,0.082,62,0.144,64,0.998,67,2.487,70,0.904,76,1.343,78,0.723,79,2.583,80,2.583,82,1.241,91,0.678,93,1.967,94,0.006,95,0.006,101,1.194,102,2.13,147,1.11,149,1.11,156,1.478,161,2.82,163,2.45,165,1.7,169,1.613,170,0.637,171,1.7,231,4.045,246,2.196,293,3.123,312,2.447,314,3.123,315,2.466,316,1.7,317,4.921,318,5.058,319,2.466,320,4.18,321,1.917,322,2.822,323,2.822,324,1.917,325,3.487,326,2.042,327,2.822,328,2.13,329,2.232,330,2.232,331,2.822,332,1.917,333,4.529,334,2.822,335,1.917,336,3.123,337,2.822,338,2.822,339,2.822,340,2.734,341,2.822,342,4.765,343,2.057,344,2.822,345,1.917,346,2.734,347,2.911,348,3.306,349,2.466,350,2.911,351,4.45,352,3.948,353,4.098,354,1.194,355,3.692,356,2.232,357,1.8,358,2.057,359,1.7,360,1.917,361,2.822,362,2.822,363,2.057,364,1.917,365,1.917,366,1.917,367,1.8,368,2.822,369,1.613,370,1.917,371,1.917,372,1.8,373,1.917,374,2.822,375,1.291,376,2.822,377,2.822,378,2.822,379,2.822,380,2.822,381,2.822,382,1.917,383,2.822,384,2.822,385,2.822,386,1.917,387,3.306,388,2.822,389,1.917,390,2.822,391,1.8,392,2.822]],["title/modules/ApplicantsModule.html",[179,1.36,186,2.788]],["body/modules/ApplicantsModule.html",[3,0.147,4,0.131,5,0.099,25,0.012,26,1.129,55,0.255,58,0.829,60,0.147,62,0.259,94,0.009,95,0.009,149,2.55,179,2.147,181,2.241,182,3.368,186,5.465,197,3.706,198,2.913,199,2.773,201,3.368,202,2.647,231,2.647,273,2.851,275,1.633,291,4.136,314,5.196,348,5.348,349,4.454,354,2.157,393,4.454,394,4.454,395,4.454,396,5.097,397,3.706,398,3.071,399,5.097,400,2.533,401,4.136,402,3.461,403,3.251,404,4.454,405,4.03]],["title/injectables/ApplicantsService.html",[0,0.691,348,2.619]],["body/injectables/ApplicantsService.html",[0,0.639,2,0.854,3,0.07,4,0.062,5,0.047,7,0.181,11,0.912,12,2.585,13,1.854,14,1.807,15,2.252,17,1.606,18,2.417,19,1.547,21,3.676,22,0.585,24,1.601,25,0.013,26,1.07,27,0.485,28,1.386,32,1.06,33,1.694,34,2.5,35,2.064,36,2.535,38,2.553,39,1.807,40,0.993,43,1.102,44,2.827,45,2.796,46,2.928,49,1.735,51,1.198,55,0.214,56,3.042,57,4.367,58,0.392,59,0.883,60,0.07,62,0.123,64,0.883,65,2.286,66,2.576,67,2.441,69,3.149,70,2.135,71,1.906,73,1.637,74,2.42,76,1.186,78,1.574,79,1.452,80,1.452,82,2.702,83,4.217,86,2.827,87,3.394,89,1.637,90,1.756,91,0.912,94,0.005,95,0.005,101,1.606,171,1.452,231,4.277,238,1.756,269,2.235,275,0.772,290,1.756,296,2.121,312,2.092,317,3.71,319,3.315,320,4.102,326,1.148,336,1.452,342,4.765,346,2.42,348,2.993,354,1.02,400,2.644,402,1.637,406,2.106,407,2.41,408,3.71,409,2.41,410,3.315,411,2.41,412,4.692,413,2.576,414,3.419,415,3.315,416,3,417,3.315,418,2.41,419,3.794,420,3.794,421,3.315,422,3.315,423,2.41,424,2.41,425,3,426,3.93,427,3.877,428,3.794,429,2.576,430,2.41,431,4.208,432,4.692,433,1.637,434,1.637,435,2.42,436,2.106,437,1.906,438,2.106,439,3.794,440,2.41,441,2.41,442,2.41,443,2.42,444,2.41,445,2.41,446,1.756,447,1.756,448,1.756,449,1.637,450,2.576,451,2.41,452,4.692,453,2.106,454,1.906,455,2.106,456,1.537,457,1.311,458,2.41]],["title/classes/Application.html",[62,0.209,400,2.04]],["body/classes/Application.html",[3,0.094,4,0.084,5,0.11,7,0.244,8,1.01,22,0.697,25,0.012,27,0.649,40,0.87,53,2.799,54,1.281,55,0.235,59,1.194,60,0.163,62,0.243,78,0.834,85,2.931,91,1.919,93,2.709,94,0.007,95,0.007,113,2.595,156,1.651,170,0.735,231,3.879,232,0.735,241,4.463,242,3.4,246,3.03,249,3.476,250,3.226,251,2.726,257,1.772,260,4.219,261,3.772,272,4.184,273,2.481,274,1.772,275,1.044,276,2.592,277,1.378,278,2.726,281,1.862,282,2.846,283,2.575,284,2.575,285,2.846,286,2.212,287,2.212,288,2.212,289,2.575,291,3.6,328,3.087,400,2.805,401,2.077,434,2.212,459,2.373,460,3.6,461,3.833,462,3.833,463,3.557,464,3.833,465,3.833,466,3.257,467,4.77,468,3.042,469,3.257,470,4.112,471,3.257,472,3.257,473,4.218,474,3.743,475,3.257,476,3.257,477,3.257,478,3.4,479,3.257,480,2.846,481,3.257,482,4.491,483,3.257,484,3.476,485,3.257,486,3.476,487,3.257,488,2.575,489,2.212,490,2.846]],["title/controllers/ApplicationsController.html",[147,1.615,491,2.992]],["body/controllers/ApplicationsController.html",[3,0.075,4,0.067,5,0.05,7,0.194,11,0.966,12,2.733,13,1.92,14,2.343,15,2.082,17,2.082,18,2.356,22,0.629,24,1.589,25,0.012,26,1.221,27,0.598,28,1.491,32,1.141,33,1.539,34,2.296,35,1.412,36,2.638,38,2.187,39,1.236,40,1.008,43,3.277,45,2.245,49,1.187,51,1.29,55,0.226,58,0.422,60,0.075,62,0.132,64,0.604,67,2.509,76,1.355,79,2.422,80,2.422,82,1.141,91,1.44,93,1.867,94,0.006,95,0.006,147,1.02,149,1.02,156,1.491,161,2.676,163,2.297,165,1.563,169,1.483,170,0.585,171,1.563,231,1.348,246,2.102,312,2.599,316,1.563,321,1.762,324,1.762,325,4.115,326,3.019,328,3.15,329,2.052,330,2.052,332,1.762,333,2.268,335,1.762,336,2.964,343,1.891,345,1.762,346,2.564,347,2.729,350,2.729,351,4.489,352,4.115,353,3.89,355,4.043,356,2.052,357,1.655,358,1.891,359,1.563,360,1.762,363,1.891,364,1.762,365,1.762,366,1.762,367,1.655,369,1.483,370,1.762,371,1.762,372,1.655,373,1.762,375,1.187,386,1.762,387,3.138,389,1.762,391,1.655,400,3.924,402,1.762,429,4.304,463,1.236,491,2.929,492,2.268,493,4.298,494,4.298,495,2.268,496,4.043,497,2.595,498,2.595,499,2.595,500,2.595,501,2.268,502,2.595,503,2.595,504,3.34,505,2.729,506,2.268,507,2.595,508,3.178,509,2.268,510,2.595,511,2.729,512,4.919,513,2.595,514,2.595,515,4.357,516,2.595,517,3.138,518,2.268,519,2.595,520,2.595,521,2.595,522,2.595,523,2.595,524,2.595,525,2.595,526,2.595,527,2.595,528,2.595,529,2.595,530,2.595,531,2.595,532,2.595]],["title/modules/ApplicationsModule.html",[179,1.36,187,2.788]],["body/modules/ApplicationsModule.html",[3,0.143,4,0.127,5,0.096,25,0.012,26,1.224,55,0.257,58,0.805,60,0.143,62,0.252,94,0.009,95,0.009,149,2.502,179,2.107,181,2.176,182,3.304,187,5.429,197,3.636,198,2.828,199,2.692,201,3.304,202,2.57,231,2.57,273,3.092,275,1.585,291,4.058,354,2.094,397,3.636,398,2.981,400,2.459,401,4.058,403,3.156,404,4.324,405,3.913,463,2.357,478,3.833,488,3.913,489,3.36,491,5.124,517,5.326,518,4.324,533,4.324,534,4.324,535,4.324,536,4.948,537,4.948,538,3.605]],["title/injectables/ApplicationsService.html",[0,0.691,517,2.619]],["body/injectables/ApplicationsService.html",[0,0.504,2,0.637,3,0.052,4,0.046,5,0.035,7,0.135,8,0.634,11,0.72,12,2.619,13,1.232,14,1.426,15,1.627,17,1.267,18,2.112,19,1.221,21,3.65,22,0.624,24,1.535,25,0.013,26,1.112,27,0.503,28,1.44,32,2.503,33,1.683,34,2.147,35,1.629,36,2.135,38,2.092,39,1.426,40,1.026,42,2.181,43,1.369,44,1.804,45,2.765,46,1.426,49,1.369,51,0.894,53,0.761,54,0.708,55,0.199,56,2.197,57,2.611,58,0.293,59,0.659,60,0.052,62,0.092,64,1.251,66,3.379,67,2.487,69,2.707,70,1.983,73,1.222,76,1.222,78,1.805,79,1.084,80,1.084,82,2.946,83,1.311,86,3.236,87,2.452,89,1.222,90,1.311,91,0.72,94,0.004,95,0.004,101,2.62,102,2.227,131,1.084,171,1.084,231,3.754,246,0.683,269,2.712,275,0.577,290,1.311,296,2.269,312,2.239,317,2.367,325,1.084,326,2.558,354,0.761,400,4.01,408,2.367,410,3.359,414,1.311,422,2.616,425,1.423,426,2.033,429,4.639,431,3.544,433,1.222,434,1.222,435,1.91,436,1.572,437,1.423,443,3.174,446,1.311,447,1.311,448,1.311,449,1.222,450,2.611,453,1.572,454,4.502,455,1.572,456,1.91,460,2.452,461,3.043,462,2.033,463,3.479,464,2.033,465,2.033,488,1.423,489,1.222,493,2.616,494,2.616,495,1.572,496,3.948,501,2.616,504,4.204,505,2.033,506,2.616,508,1.423,511,4.049,515,3.948,517,1.91,539,1.572,540,3.845,541,2.994,542,1.799,543,3.04,544,2.994,545,1.799,546,1.799,547,1.799,548,1.799,549,1.799,550,2.994,551,2.994,552,1.799,553,1.799,554,1.799,555,1.799,556,3.916,557,2.994,558,1.799,559,2.181,560,2.994,561,1.148,562,2.994,563,1.222,564,1.423,565,1.799,566,2.994,567,1.799,568,2.616,569,1.799,570,1.572,571,1.799,572,2.994,573,2.616,574,1.799,575,2.994,576,1.799,577,1.799,578,3.626,579,1.799,580,1.799,581,1.799,582,1.799,583,1.799,584,1.572,585,2.367,586,1.799,587,1.799,588,1.799,589,1.799,590,2.616,591,1.572,592,1.423,593,1.572,594,1.799,595,1.799,596,1.799]],["title/controllers/AuthController.html",[147,1.615,597,2.992]],["body/controllers/AuthController.html",[3,0.081,4,0.072,5,0.054,7,0.21,9,2.042,11,1.025,12,2.456,22,0.647,24,1.571,25,0.013,26,1.138,27,0.515,28,1.474,32,1.232,33,1.582,34,1.848,40,0.859,55,0.225,58,0.456,60,0.081,62,0.143,64,0.993,67,1.959,70,1.366,76,1.182,78,1.321,91,1.025,94,0.006,95,0.006,98,1.788,101,2.441,102,2.119,116,3.109,117,1.525,142,3.738,147,1.102,149,1.102,151,4.56,156,1.533,161,2.808,163,1.602,169,1.602,170,0.632,199,1.525,258,2.042,312,2.44,316,1.689,325,2.569,352,3.738,375,1.282,382,1.903,416,2.216,505,1.903,561,1.788,591,2.449,597,3.107,598,2.449,599,2.803,600,4.264,601,4.264,602,4.264,603,5.04,604,6.205,605,4.081,606,4.264,607,6.667,608,6.392,609,2.803,610,5.418,611,2.803,612,2.803,613,2.803,614,7.314,615,2.803,616,4.264,617,4.51,618,3.726,619,4.264,620,2.803,621,4.95,622,2.803,623,4.264,624,2.803,625,2.803,626,4.95,627,2.803,628,2.803,629,2.803,630,2.803,631,2.803,632,2.803,633,4.56,634,4.264,635,5.161,636,5.161,637,3.292,638,2.449,639,3.735,640,2.803,641,2.803,642,2.803,643,2.803,644,4.081,645,2.803,646,2.95,647,2.042,648,2.449,649,2.042,650,2.803,651,2.803,652,2.803,653,2.803,654,2.803,655,2.449,656,2.449,657,2.803,658,2.803,659,2.803,660,4.264,661,2.803,662,3.505,663,4.264,664,2.803,665,2.803,666,2.803,667,4.264,668,4.264,669,4.264,670,2.803,671,2.803,672,2.803,673,2.803,674,4.264,675,2.803,676,2.803,677,2.803,678,2.803,679,2.803,680,2.803,681,2.803,682,2.803,683,2.803,684,2.803,685,1.232,686,2.803]],["title/classes/AuthDto.html",[62,0.209,626,2.992]],["body/classes/AuthDto.html",[3,0.158,4,0.14,5,0.106,7,0.408,8,1.432,22,0.644,25,0.012,27,0.533,40,1.011,55,0.218,60,0.158,62,0.344,94,0.01,95,0.01,156,1.526,170,1.23,232,1.23,257,2.967,276,2.605,310,2.974,311,2.144,626,4.929,687,4.765,688,4.691,689,6.427,690,4.315,691,5.453,692,5.453,693,5.453,694,5.453,695,4.929,696,3.503,697,4.765,698,3.362,699,3.973,700,5.349,701,4.312,702,4.765]],["title/modules/AuthModule.html",[179,1.36,188,2.788]],["body/modules/AuthModule.html",[3,0.132,4,0.118,5,0.089,12,1.568,25,0.012,55,0.256,58,0.745,60,0.132,62,0.233,76,0.939,94,0.009,95,0.009,107,3.872,122,3.337,123,3.11,149,2.379,179,2.003,181,2.014,182,3.142,188,5.639,195,4.908,197,3.458,198,2.618,199,2.492,201,3.142,202,3.142,211,4.002,219,3.337,221,3.621,222,3.337,397,3.458,597,4.936,646,4.72,647,3.337,703,4.002,704,4.58,705,4.002,706,4.002,707,5.226,708,5.226,709,4.58,710,6.049,711,2.921,712,4.58,713,3.621,714,4.58,715,4.58,716,4.58,717,4.58,718,4.58,719,4.002,720,4.58,721,4.58,722,4.58]],["title/injectables/AuthService.html",[0,0.691,646,2.347]],["body/injectables/AuthService.html",[0,0.755,2,1.062,3,0.087,4,0.077,5,0.058,7,0.225,8,0.949,11,1.078,12,2.696,15,1.898,18,1.764,19,1.829,22,0.661,24,1.611,25,0.013,26,1.21,27,0.529,28,1.512,33,1.561,34,2.42,39,2.137,40,0.961,45,1.589,53,1.268,54,1.179,55,0.224,58,0.488,60,0.087,62,0.152,64,1.488,65,1.806,67,2.712,70,1.912,76,1.498,78,1.636,82,1.318,94,0.006,95,0.006,101,2.704,102,2.965,128,2.035,235,1.806,244,3.916,312,1.179,372,1.912,438,2.619,474,3.849,585,3.547,603,3.919,605,3.547,608,2.619,617,3.919,618,2.619,638,3.919,639,3.651,646,3.072,648,2.619,662,3.046,685,3.271,688,4.075,713,2.37,723,2.619,724,5.375,725,4.485,726,2.997,727,4.039,728,6.95,729,4.485,730,2.997,731,4.485,732,2.997,733,2.997,734,2.997,735,5.858,736,2.997,737,3.547,738,4.485,739,2.861,740,5.582,741,4.485,742,2.997,743,3.072,744,4.485,745,2.035,746,3.046,747,2.619,748,2.997,749,2.035,750,2.619,751,2.997,752,2.997,753,2.997,754,2.619,755,2.997,756,3.547,757,1.912,758,2.997,759,4.485,760,4.485,761,4.485,762,3.547,763,2.997,764,2.702,765,2.184,766,2.37,767,2.184,768,2.619,769,2.37,770,2.37,771,2.997,772,2.997,773,2.997,774,2.619,775,2.997,776,2.997,777,2.619,778,3.547,779,2.997,780,2.997,781,2.619]],["title/interfaces/ClassType.html",[782,2.619,783,2.992]],["body/interfaces/ClassType.html",[0,1.148,3,0.16,4,0.142,5,0.107,25,0.012,55,0.248,58,0.899,60,0.16,62,0.347,64,1.287,70,1.771,76,1.133,94,0.01,95,0.01,110,3.899,114,3.899,118,3.007,124,2.633,277,2.339,301,4.371,340,3.526,375,2.528,457,3.007,782,3.526,783,5.63,784,4.371,785,4.371,786,4.633,787,4.633,788,4.371,789,4.028,790,5.394,791,3.754,792,4.11,793,4.83,794,4.83,795,4.83]],["title/modules/CommonModule.html",[179,1.36,189,2.788]],["body/modules/CommonModule.html",[3,0.158,4,0.141,5,0.106,11,1.314,22,0.52,24,1.314,25,0.012,26,0.952,27,0.431,28,1.233,33,1.273,55,0.248,58,0.89,60,0.158,62,0.278,94,0.01,95,0.01,97,4.938,98,3.488,115,3.713,124,2.604,179,2.244,181,2.404,189,4.602,201,2.84,561,3.488,796,5.468,797,5.468,798,6.776,799,7.697,800,5.468,801,5.468,802,6.776,803,6.776,804,3.984,805,5.921,806,5.468,807,5.468,808,5.468,809,5.468]],["title/classes/CreateApplicantDto.html",[62,0.209,320,2.619]],["body/classes/CreateApplicantDto.html",[3,0.103,4,0.092,5,0.069,7,0.268,8,1.079,22,0.699,25,0.012,27,0.618,40,1.058,55,0.221,60,0.103,62,0.303,64,1.936,91,1.559,94,0.007,95,0.007,156,1.656,170,0.806,232,0.806,234,4.702,235,3.583,236,5.349,237,5.805,238,4.333,239,4.039,240,4.702,260,3.463,276,2.658,277,1.512,281,2.915,310,2.852,311,1.405,320,3.253,328,3.223,637,4.137,690,3.793,696,3.497,698,3.796,810,6.559,811,2.825,812,5.099,813,4.456,814,3.572,815,3.572,816,3.716,817,3.572,818,3.572,819,4.456,820,3.572,821,5.099,822,3.572,823,3.572,824,3.572,825,3.572,826,3.572,827,4.998,828,3.572,829,3.572,830,3.572,831,2.426,832,3.572,833,3.572,834,3.122,835,5.099,836,3.716,837,2.426,838,2.534,839,2.279,840,3.572,841,2.603,842,3.572,843,3.572,844,3.072,845,3.572,846,3.572,847,3.463,848,3.572,849,3.572,850,3.572,851,3.572,852,2.426,853,2.825,854,3.572,855,3.572,856,3.122]],["title/classes/CreateApplicationDto.html",[62,0.209,496,2.619]],["body/classes/CreateApplicationDto.html",[3,0.116,4,0.103,5,0.078,7,0.3,8,1.171,18,1.577,22,0.722,25,0.012,27,0.637,40,0.973,55,0.23,60,0.116,62,0.322,91,1.64,93,1.522,94,0.008,95,0.008,113,2.182,156,1.711,170,0.905,232,0.905,246,2.099,276,2.417,277,1.697,281,2.292,296,1.47,309,4.299,311,1.577,326,3.25,328,3.678,460,4.352,461,4.861,462,3.755,464,3.755,465,4.299,468,3.527,496,3.527,504,4.299,511,4.299,515,4.837,578,2.922,696,3.015,698,2.748,831,2.723,838,2.748,844,2.416,857,5.963,858,2.723,859,2.431,860,4.832,861,4.01,862,5.026,863,3.504,864,4.832,865,3.504,866,4.01,867,4.01,868,5.005,869,3.171,870,3.171,871,3.171,872,3.171,873,3.171,874,4.972,875,4.01,876,3.171,877,3.171,878,4.01,879,3.171,880,2.922,881,3.171,882,3.171,883,2.922,884,3.171,885,4.01,886,3.332,887,3.171,888,4.01,889,4.03,890,3.504,891,4.01]],["title/classes/CreateFileDto.html",[62,0.209,892,2.788]],["body/classes/CreateFileDto.html",[3,0.148,4,0.131,5,0.099,7,0.383,8,1.375,22,0.776,25,0.012,27,0.643,40,1.112,60,0.148,62,0.26,94,0.009,95,0.009,232,1.153,892,4.41,893,7.19,894,4.041,895,5.645,896,5.645,897,5.645,898,4.848,899,5.645,900,5.645,901,5.202,902,5.645,903,5.11,904,5.11,905,5.11,906,5.11,907,5.11,908,5.11,909,5.11,910,3.712,911,5.11]],["title/classes/CreateJobDto.html",[62,0.209,912,2.619]],["body/classes/CreateJobDto.html",[3,0.128,4,0.114,5,0.086,7,0.332,8,1.252,22,0.725,25,0.012,26,1.16,27,0.601,40,1.064,55,0.19,60,0.128,62,0.301,64,1.964,93,2.246,94,0.009,95,0.009,156,1.72,170,0.999,232,0.999,246,2.246,276,2.757,296,2.442,309,4.018,310,3.126,311,1.742,470,4.311,696,3.529,836,4.311,838,3.533,910,3.382,912,3.774,913,6.802,914,3.503,915,4.25,916,5.822,917,5.822,918,5.822,919,5.17,920,4.43,921,4.43,922,4.43,923,4.43,924,4.43,925,4.43,926,4.43,927,4.43,928,4.43,929,4.43,930,5.17,931,4.679]],["title/classes/CreateOrganizationDto.html",[62,0.209,932,2.788]],["body/classes/CreateOrganizationDto.html",[3,0.151,4,0.134,5,0.101,7,0.392,8,1.395,22,0.687,25,0.012,26,1.256,27,0.569,40,1.048,55,0.212,60,0.151,62,0.335,64,1.924,94,0.009,95,0.009,156,1.628,170,1.179,232,1.179,276,2.555,296,2.644,310,3.331,311,2.056,696,3.437,838,3.274,915,4.602,932,4.475,933,6.619,934,4.134,935,6.589,936,5.228,937,5.228,938,5.228,939,5.228,940,4.801]],["title/classes/CreateUserDto.html",[62,0.209,639,2.347]],["body/classes/CreateUserDto.html",[3,0.118,4,0.105,5,0.08,7,0.307,8,1.188,22,0.709,25,0.012,27,0.587,40,1.048,54,1.612,55,0.232,60,0.118,62,0.326,94,0.008,95,0.008,156,1.681,170,0.925,232,0.925,242,3.383,257,2.23,276,2.702,277,1.735,310,3.172,311,1.612,637,3.581,639,3.209,688,4.084,690,4.602,695,4.091,696,3.7,697,3.582,698,3.791,699,2.987,700,5.705,701,4.439,702,4.906,743,3.66,745,2.783,764,4.748,816,2.987,819,3.582,837,2.783,839,2.614,841,2.987,844,2.47,847,2.783,941,6.666,942,3.241,943,4.666,944,4.666,945,5.595,946,4.099,947,4.099,948,4.099,949,4.099,950,4.099,951,4.099,952,5.614,953,4.099,954,4.099,955,4.099,956,4.099,957,4.099,958,3.241,959,3.582,960,3.582,961,4.099,962,4.099]],["title/modules/DatabaseModule.html",[179,1.36,190,2.788]],["body/modules/DatabaseModule.html",[3,0.167,4,0.149,5,0.112,25,0.012,55,0.243,58,0.94,60,0.167,62,0.294,76,1.185,94,0.01,95,0.01,123,3.925,179,2.321,181,2.541,190,4.761,202,3.002,219,4.211,221,4.57,222,4.211,275,1.852,398,3.482,963,5.779,964,5.124,965,3.925,966,5.779,967,5.779,968,4.211,969,5.779,970,5.05,971,5.779]],["title/classes/EntityRepository.html",[62,0.209,972,2.992]],["body/classes/EntityRepository.html",[3,0.091,4,0.081,5,0.061,7,0.235,11,1.116,12,2.862,13,1.488,15,2.339,19,1.281,21,3.49,22,0.716,24,1.809,25,0.012,26,1.31,27,0.583,28,1.698,33,1.723,34,2.603,40,0.973,44,3.329,45,2.162,55,0.101,59,1.151,60,0.091,61,4.058,62,0.236,63,2.745,64,0.731,67,1.192,70,1.488,76,1.543,78,0.804,85,1.631,86,1.893,89,2.133,91,1.116,94,0.007,95,0.007,232,0.709,278,1.795,312,1.235,443,2.962,505,2.133,592,3.673,762,2.484,972,3.384,973,2.745,974,3.673,975,3.673,976,3.673,977,4.37,978,3.673,979,4.37,980,3.141,981,3.141,982,4.644,983,4.058,984,3.141,985,2.745,986,4.058,987,7.025,988,3.141,989,6.331,990,4.829,991,4.058,992,3.141,993,4.058,994,3.141,995,3.141,996,6.331,997,6.167,998,3.141,999,4.829,1000,4.828,1001,3.141,1002,4.058,1003,3.141,1004,2.745,1005,3.141,1006,2.484,1007,3.141,1008,3.141,1009,3.141,1010,3.141,1011,4.058,1012,3.141,1013,3.141,1014,3.141,1015,3.141,1016,3.141,1017,3.141,1018,3.141,1019,3.141,1020,3.141,1021,2.484]],["title/modules/FeatureConfigModule.html",[179,1.36,191,2.788]],["body/modules/FeatureConfigModule.html",[3,0.168,4,0.149,5,0.112,25,0.012,55,0.243,58,0.943,60,0.168,62,0.295,91,1.688,94,0.01,95,0.01,107,4.014,179,2.325,181,2.548,191,4.769,201,3.01,202,3.01,213,5.064,215,4.769,397,3.313,964,4.769,965,3.936,1022,5.796,1023,5.796,1024,5.064,1025,5.796,1026,5.796,1027,5.796,1028,5.796,1029,5.796]],["title/classes/File.html",[5,0.08,62,0.209]],["body/classes/File.html",[3,0.143,4,0.127,5,0.144,7,0.371,8,1.347,22,0.771,25,0.012,27,0.645,40,1.108,55,0.205,59,1.813,60,0.203,62,0.252,78,1.267,94,0.009,95,0.009,232,1.116,274,2.692,275,1.585,278,3.636,473,3.156,895,5.56,896,5.56,897,5.56,898,4.775,899,5.56,900,5.56,901,5.124,902,5.56,910,3.636,1030,3.605,1031,4.948,1032,4.948,1033,4.948,1034,4.948,1035,4.948,1036,4.948,1037,4.948,1038,4.948,1039,3.605,1040,4.324]],["title/classes/FileDocument.html",[62,0.209,473,2.619]],["body/classes/FileDocument.html",[3,0.138,4,0.123,5,0.093,7,0.358,8,1.318,22,0.659,25,0.012,27,0.546,40,1.024,55,0.2,59,1.754,60,0.18,62,0.243,78,1.225,85,3.233,91,2.017,93,1.816,94,0.009,95,0.009,156,1.561,170,1.079,232,1.079,246,2.626,250,4.452,251,3.558,253,5.042,272,4.189,273,3.043,274,2.603,275,1.533,276,2.596,473,3.971,486,3.486,898,4.699,968,5.042,1041,5.795,1042,3.783,1043,5.042,1044,4.785,1045,4.785,1046,4.785,1047,3.783,1048,3.783,1049,3.783,1050,3.783,1051,3.783,1052,3.486,1053,3.249,1054,3.783,1055,4.181]],["title/classes/FileDto.html",[62,0.209,862,2.788]],["body/classes/FileDto.html",[3,0.153,4,0.136,5,0.103,7,0.397,8,1.406,22,0.691,25,0.012,27,0.572,40,1.052,55,0.214,60,0.153,62,0.338,64,1.928,94,0.01,95,0.01,156,1.637,170,1.195,232,1.195,276,2.695,310,3.346,311,2.083,696,3.625,838,2.632,862,4.511,898,4.929,919,6.342,968,5.289,1043,5.289,1056,4.628,1057,5.297,1058,5.297,1059,5.297]],["title/controllers/FilesController.html",[147,1.615,1060,2.992]],["body/controllers/FilesController.html",[3,0.106,4,0.094,5,0.158,7,0.275,11,1.251,17,2.202,22,0.575,24,1.452,25,0.012,26,1.052,27,0.568,28,1.363,33,1.407,40,0.947,43,3.293,45,1.843,46,2.479,49,1.681,55,0.238,58,0.598,60,0.106,62,0.187,64,0.856,76,1.067,82,1.616,94,0.007,95,0.007,117,3.287,120,2.907,142,3.135,147,1.445,149,1.445,153,5.279,156,1.363,161,3.917,163,2.975,164,3.212,165,2.215,166,3.212,167,2.678,169,2.101,170,0.829,174,3.212,296,2.639,312,2.376,316,2.215,335,2.496,336,3.64,352,3.958,375,1.681,391,2.345,456,3.319,457,2,559,5.052,561,2.345,607,5.741,610,2.678,644,5.483,852,4.103,1060,3.792,1061,3.212,1062,3.676,1063,5.741,1064,3.212,1065,3.676,1066,6.041,1067,5.741,1068,3.676,1069,4.547,1070,3.676,1071,3.212,1072,3.676,1073,3.676,1074,4.547,1075,3.676,1076,3.676,1077,3.853,1078,3.212,1079,5.204,1080,3.676,1081,5.204,1082,5.741,1083,3.676,1084,3.676,1085,3.676,1086,3.676,1087,3.676,1088,3.676,1089,3.676,1090,3.676,1091,3.676,1092,3.212,1093,3.676,1094,3.676,1095,4.547,1096,3.676,1097,3.676,1098,3.676,1099,3.676,1100,3.676,1101,3.676,1102,2.907,1103,3.676]],["title/modules/FilesModule.html",[179,1.36,192,2.788]],["body/modules/FilesModule.html",[3,0.152,4,0.135,5,0.128,25,0.012,26,0.915,55,0.252,58,0.855,60,0.152,62,0.267,94,0.01,95,0.01,149,2.6,179,2.189,181,2.311,182,3.434,192,5.503,197,3.779,198,3.004,199,2.86,201,3.434,202,2.73,273,2.311,275,1.684,354,2.224,397,3.779,398,3.166,403,3.352,1039,4.817,1060,5.27,1077,5.371,1078,4.592,1104,4.592,1105,4.592,1106,4.592,1107,5.255,1108,5.255,1109,5.255]],["title/injectables/FilesService.html",[0,0.691,1077,2.619]],["body/injectables/FilesService.html",[0,0.816,2,1.18,3,0.096,4,0.086,5,0.15,7,0.25,11,1.166,12,1.141,17,2.052,22,0.544,24,1.374,25,0.013,26,0.995,27,0.451,28,1.29,32,1.465,33,1.331,34,1.068,40,0.969,45,1.718,46,2.991,49,2.218,55,0.184,57,2.263,58,0.542,60,0.096,62,0.169,65,2.922,69,1.813,70,1.068,76,1.287,78,1.709,91,1.166,93,1.264,94,0.007,95,0.007,161,3.631,326,1.587,559,5.368,892,4.532,895,5.507,896,5.507,897,5.507,898,4.73,899,5.825,900,5.507,901,5.238,902,5.507,1063,4.238,1064,4.997,1069,4.238,1071,4.238,1077,3.093,1092,4.238,1110,2.912,1111,3.332,1112,3.332,1113,3.332,1114,5.718,1115,3.332,1116,3.332,1117,6.965,1118,4.85,1119,3.332,1120,3.332,1121,3.332,1122,4.238,1123,3.332,1124,3.332,1125,6.674,1126,3.332,1127,3.332,1128,3.332,1129,3.332,1130,3.332,1131,3.332,1132,3.332,1133,3.332,1134,3.332,1135,3.332,1136,3.332,1137,3.332,1138,3.332,1139,3.332,1140,3.332,1141,3.332,1142,3.332,1143,3.332,1144,3.332,1145,3.332,1146,3.332,1147,3.332,1148,3.332,1149,3.332,1150,3.332,1151,3.332,1152,3.332,1153,3.332,1154,3.332,1155,3.332,1156,3.332,1157,2.912,1158,3.332,1159,3.332,1160,4.997,1161,3.332,1162,3.332,1163,4.85,1164,3.332,1165,3.332,1166,3.332,1167,3.332,1168,3.332,1169,3.332,1170,3.332,1171,3.332,1172,3.332]],["title/classes/FutureCreateApplicationDto.html",[62,0.209,1173,3.247]],["body/classes/FutureCreateApplicationDto.html",[3,0.095,4,0.084,5,0.064,7,0.246,8,1.014,13,2.397,22,0.698,25,0.012,27,0.625,40,0.964,53,1.387,54,1.289,55,0.223,60,0.095,62,0.288,76,0.672,91,1.827,93,1.819,94,0.007,95,0.007,113,2.608,156,1.614,170,0.739,232,0.739,242,1.975,246,1.819,276,2.207,277,1.387,281,3.958,296,2.284,308,3.492,309,3.847,310,2.491,311,1.289,326,3.299,328,3.829,460,4.914,461,4.503,462,3.847,464,3.847,465,4.503,468,3.057,504,3.847,511,3.847,578,4.831,637,2.091,696,2.968,698,3.097,745,2.226,831,2.226,837,2.226,838,3.554,844,2.887,847,2.226,853,2.592,858,2.226,860,4.188,862,4.703,863,2.864,864,4.188,865,2.864,868,4.479,869,3.79,870,3.79,871,3.79,872,2.592,873,2.592,876,2.592,877,2.592,879,3.79,880,3.492,881,3.79,882,3.79,883,3.492,884,2.592,886,4.173,887,2.592,889,4.128,940,4.831,958,2.592,1173,3.79,1174,5.915,1175,3.79,1176,3.278,1177,3.278,1178,3.278,1179,3.278,1180,3.278,1181,3.278,1182,3.278,1183,2.864,1184,3.278,1185,3.79,1186,3.278,1187,2.592,1188,2.592,1189,2.864,1190,2.864,1191,2.864,1192,2.864]],["title/classes/FutureUpdateApplicationDto.html",[62,0.209,1193,3.247]],["body/classes/FutureUpdateApplicationDto.html",[3,0.176,4,0.156,5,0.118,18,2.388,25,0.012,55,0.232,60,0.176,62,0.309,78,1.555,94,0.01,95,0.01,232,1.37,461,4.124,496,3.874,504,4.124,511,4.124,749,4.124,858,4.124,859,2.67,1174,4.802,1187,4.802,1193,5.711,1194,6.073,1195,4.607,1196,4.425,1197,6.073]],["title/classes/HttpExceptionFilter.html",[62,0.209,1198,3.247]],["body/classes/HttpExceptionFilter.html",[3,0.124,4,0.11,5,0.083,7,0.322,11,1.394,22,0.409,24,1.033,25,0.013,26,0.748,27,0.457,28,0.97,33,1.001,40,0.762,55,0.186,58,0.699,60,0.124,62,0.219,70,1.858,78,2.093,94,0.008,95,0.008,102,2.136,112,2.457,116,3.494,117,2.339,124,2.762,232,0.97,269,3.126,505,2.919,561,3.699,610,5.344,637,3.699,766,5.554,852,3.938,901,3.132,1198,4.585,1199,5.067,1200,3.756,1201,6.562,1202,5.799,1203,5.734,1204,7.024,1205,4.298,1206,7.335,1207,6.562,1208,4.298,1209,5.799,1210,4.298,1211,4.298,1212,5.067,1213,5.799,1214,4.298,1215,7.557,1216,5.799,1217,5.554,1218,5.734,1219,4.298,1220,5.799,1221,4.298,1222,5.799,1223,4.298,1224,4.298,1225,4.298,1226,4.298,1227,4.298,1228,4.298,1229,4.298,1230,4.298,1231,4.298]],["title/classes/Job.html",[62,0.209,463,1.956]],["body/classes/Job.html",[3,0.101,4,0.09,5,0.068,7,0.375,8,1.061,22,0.694,25,0.012,26,1.021,27,0.632,40,0.93,53,2.121,55,0.228,59,1.278,60,0.17,62,0.255,78,0.893,91,2.039,93,2.434,94,0.007,95,0.007,156,1.644,170,0.786,232,0.786,244,4.674,246,2.993,249,3.652,250,4.263,251,4.044,253,4.674,256,2.757,257,3.849,260,2.368,261,2.757,272,4.263,273,2.203,274,1.897,275,1.117,276,2.641,277,1.475,278,2.864,286,2.368,287,2.368,288,2.368,296,2.15,367,3.196,413,3.403,463,2.795,468,2.224,470,2.54,474,2.101,478,2.101,563,2.368,839,2.224,844,3.019,852,4.356,910,2.864,915,3.742,916,5.127,917,5.127,1232,2.54,1233,4.133,1234,3.403,1235,3.486,1236,3.486,1237,3.486,1238,4.379,1239,3.486,1240,3.486,1241,5.011,1242,3.486,1243,3.742,1244,3.486,1245,5.937,1246,3.486,1247,2.54,1248,3.047,1249,3.486,1250,3.047]],["title/controllers/JobsController.html",[147,1.615,1251,2.992]],["body/controllers/JobsController.html",[3,0.096,4,0.085,5,0.064,7,0.248,11,1.161,12,2.742,13,2.008,14,2.302,15,2.045,17,2.045,18,2.242,22,0.634,24,1.601,25,0.012,26,1.25,27,0.58,28,1.503,32,1.458,33,1.551,34,2.442,35,1.804,36,2.985,38,2.629,39,1.579,40,0.986,43,2.21,45,2.462,49,1.516,51,1.648,55,0.231,58,0.54,60,0.096,62,0.169,64,0.772,67,2.528,76,1.365,79,2.912,80,2.912,82,1.458,91,0.797,93,2.164,94,0.007,95,0.007,147,1.304,149,1.304,156,1.503,161,2.629,163,2.762,165,1.998,169,1.895,170,0.748,171,1.998,246,2.378,312,2.242,316,1.998,321,2.252,324,2.252,325,3.775,326,2.302,328,2.401,329,2.622,330,2.622,332,2.252,336,1.998,345,2.252,346,2.115,347,3.282,350,3.282,351,3.872,352,3.775,353,4.509,354,1.403,359,1.998,360,2.252,369,1.895,370,2.252,371,2.252,372,2.115,373,2.252,375,1.516,386,2.252,387,2.115,389,3.282,391,3.082,463,3.573,509,2.897,912,4.435,1102,2.622,1251,3.521,1252,2.897,1253,3.821,1254,2.897,1255,3.316,1256,3.316,1257,3.316,1258,3.316,1259,3.316,1260,3.316,1261,4.996,1262,3.316,1263,3.637,1264,2.897,1265,3.316,1266,3.316,1267,3.316,1268,2.897,1269,3.316,1270,3.316,1271,3.316,1272,2.622,1273,3.316,1274,3.316,1275,3.316]],["title/modules/JobsModule.html",[179,1.36,193,2.788]],["body/modules/JobsModule.html",[3,0.143,4,0.127,5,0.096,25,0.012,26,1.224,55,0.257,58,0.805,60,0.143,62,0.252,94,0.009,95,0.009,149,2.502,179,2.107,181,2.176,182,3.304,193,5.429,197,3.636,198,2.828,199,2.692,201,3.304,202,2.57,273,3.092,275,1.585,354,2.094,397,3.636,398,2.981,400,2.459,401,4.058,402,3.36,403,3.156,405,3.913,463,2.357,478,3.833,538,3.605,1233,2.692,1243,4.058,1247,3.605,1251,5.124,1263,5.326,1264,4.324,1276,4.324,1277,4.324,1278,4.324,1279,4.948,1280,4.948,1281,3.913]],["title/injectables/JobsService.html",[0,0.691,1263,2.619]],["body/injectables/JobsService.html",[0,0.657,1,4.815,2,0.885,3,0.072,4,0.064,5,0.049,7,0.187,8,0.826,9,2.844,10,3.086,11,0.938,12,2.718,13,1.251,14,1.859,15,2.032,16,3.086,17,1.652,18,1.535,19,1.592,21,4.052,22,0.687,24,1.666,25,0.012,26,1.207,27,0.559,28,1.564,32,2.387,33,1.614,34,2.384,35,1.36,36,1.859,38,1.36,39,1.19,40,1.018,42,2.844,43,1.143,44,2.894,45,2.455,46,1.19,47,1.976,49,1.785,51,1.94,53,1.652,54,1.535,55,0.223,56,2.745,58,0.407,59,0.916,60,0.072,62,0.127,64,1.453,65,1.506,66,1.697,67,2.631,69,2.613,70,2,72,1.976,73,1.697,74,3.063,76,1.207,78,1.775,82,1.099,86,2.352,87,3.063,91,0.601,94,0.006,95,0.006,101,2.934,102,2.697,269,1.19,275,0.801,296,0.916,312,0.983,326,1.859,354,1.058,400,1.242,402,1.697,408,3.798,426,2.651,427,1.821,429,1.697,433,1.697,434,1.697,435,2.49,437,1.976,443,1.594,449,1.697,450,3.261,454,1.976,456,1.594,457,1.36,463,2.586,508,1.976,538,1.821,543,3.086,563,1.697,564,1.976,573,2.184,585,1.976,859,1.716,874,4.75,912,4.158,915,3.063,918,5.894,1233,4.096,1247,1.821,1253,4.656,1254,3.411,1261,4.581,1263,2.49,1282,2.184,1283,4.803,1284,3.903,1285,2.499,1286,4.197,1287,3.903,1288,2.499,1289,2.499,1290,2.499,1291,3.903,1292,2.499,1293,3.411,1294,2.499,1295,2.184,1296,2.184,1297,3.903,1298,2.184,1299,1.821,1300,2.499,1301,2.184,1302,2.499,1303,2.499,1304,3.903,1305,2.499,1306,2.499,1307,3.903,1308,3.411,1309,2.499,1310,2.499,1311,2.184,1312,2.184,1313,2.184,1314,2.184]],["title/guards/JwtAuthGuard.html",[96,2.788,1315,3.247]],["body/guards/JwtAuthGuard.html",[0,1.017,3,0.132,4,0.117,5,0.089,7,0.342,11,1.452,19,1.863,22,0.575,24,1.452,25,0.012,26,1.051,27,0.476,28,1.363,33,1.064,34,1.935,46,2.177,55,0.241,58,0.744,60,0.132,62,0.232,64,1.064,76,1.238,78,1.17,91,1.452,94,0.009,95,0.009,98,2.915,101,1.934,103,5.919,104,3.613,105,6.202,109,3.613,110,4.115,112,3.452,113,3.287,114,3.867,115,3.103,118,2.486,119,4.93,124,2.177,128,3.103,129,5.278,130,3.329,131,2.753,132,4.776,134,3.613,137,3.993,139,3.993,141,4.401,142,3.639,156,1.031,375,2.09,382,3.103,633,3.613,662,3.103,711,2.915,739,2.915,859,2.009,1315,4.776,1316,5.913,1317,3.613,1318,4.569,1319,4.569,1320,5.278,1321,4.569,1322,3.613,1323,4.569,1324,3.993,1325,3.993,1326,4.569,1327,4.569,1328,3.329,1329,4.569,1330,4.569]],["title/injectables/JwtStrategy.html",[0,0.691,707,2.788]],["body/injectables/JwtStrategy.html",[0,0.927,2,1.412,3,0.115,4,0.102,5,0.077,7,0.299,8,1.166,11,1.324,12,2.161,19,2.246,22,0.601,24,1.324,25,0.012,26,1.099,27,0.434,28,1.242,33,0.928,34,1.765,45,1.412,53,1.687,54,1.567,55,0.238,58,0.649,60,0.115,62,0.203,64,1.585,67,1.513,70,2.022,74,2.543,76,1.464,78,1.41,93,2.395,94,0.008,95,0.008,101,2.881,102,3.382,107,3.891,116,3.802,117,2.169,121,4.013,122,2.905,123,2.707,222,4.013,369,2.278,457,3.887,474,2.402,646,4.328,647,2.905,662,2.707,685,2.775,707,3.74,711,2.543,719,3.483,739,2.543,740,3.483,743,2.278,756,3.152,757,2.543,764,2.402,768,3.483,769,3.152,770,3.152,778,4.355,859,1.753,1322,3.152,1328,4.013,1331,3.483,1332,3.986,1333,5.508,1334,5.508,1335,6.807,1336,6.807,1337,3.986,1338,5.508,1339,4.813,1340,3.483,1341,3.986,1342,2.905,1343,3.483,1344,3.986,1345,3.986,1346,3.986,1347,3.986,1348,3.986,1349,3.986,1350,3.986,1351,3.986,1352,3.483,1353,3.483,1354,3.483,1355,3.483,1356,3.483,1357,3.483,1358,3.483,1359,3.986,1360,3.986,1361,3.986]],["title/injectables/LocalAuthGuard.html",[0,0.691,649,2.992]],["body/injectables/LocalAuthGuard.html",[0,1.233,2,2.204,3,0.18,4,0.16,5,0.121,25,0.012,55,0.236,58,1.012,60,0.18,62,0.316,94,0.011,95,0.011,649,5.338,711,3.969,859,2.736,1317,4.92,1320,5.437,1362,5.437,1363,6.222]],["title/injectables/LocalStrategy.html",[0,0.691,708,2.788]],["body/injectables/LocalStrategy.html",[0,1.02,2,1.626,3,0.133,4,0.118,5,0.089,7,0.344,8,1.282,11,1.456,12,2.322,19,1.872,22,0.645,24,1.456,25,0.012,26,1.055,27,0.478,28,1.367,33,1.069,34,1.941,40,1.012,53,1.943,54,1.805,55,0.232,58,0.747,60,0.133,62,0.233,64,1.579,67,1.742,69,3.296,70,2.311,76,0.941,78,1.175,94,0.009,95,0.009,101,2.87,102,3.584,369,2.624,375,2.099,646,4.401,647,3.345,685,2.982,688,4.6,689,4.011,708,4.114,711,2.928,756,3.629,757,2.928,778,4.79,859,2.018,1322,3.629,1328,4.414,1339,5.294,1340,4.011,1342,3.345,1343,4.011,1352,4.011,1353,4.011,1354,4.011,1355,4.011,1356,4.011,1357,4.011,1358,4.011,1364,4.011,1365,4.59,1366,6.058,1367,6.058,1368,4.59,1369,6.058,1370,4.011,1371,4.59]],["title/injectables/LoggingMiddleware.html",[0,0.691,804,2.992]],["body/injectables/LoggingMiddleware.html",[0,1.148,2,1.958,3,0.16,4,0.142,5,0.107,7,0.414,11,1.64,22,0.526,24,1.328,25,0.012,26,0.962,27,0.436,28,1.247,33,1.287,55,0.178,58,0.899,60,0.16,62,0.281,94,0.01,95,0.01,124,2.633,561,4.72,610,4.971,621,4.028,644,5.851,792,4.655,804,4.971,805,4.83,1053,4.633,1372,4.83,1373,6.822,1374,5.527,1375,4.028,1376,6.822,1377,5.527,1378,6.822,1379,5.527,1380,5.527,1381,5.527]],["title/classes/Organization.html",[62,0.209,1233,2.234]],["body/classes/Organization.html",[3,0.133,4,0.119,5,0.089,7,0.455,8,1.286,22,0.647,25,0.012,26,1.183,27,0.57,40,1.014,55,0.219,59,1.69,60,0.196,62,0.235,78,1.18,91,2.035,94,0.009,95,0.009,156,1.533,170,1.04,232,1.04,246,2.742,248,5.31,249,4.428,250,4.407,251,3.473,256,3.646,257,3.931,272,4.129,273,2.672,274,2.509,275,1.477,276,2.559,278,3.473,286,3.131,287,3.131,288,3.131,296,2.491,413,4.126,915,4.335,1233,3.698,1234,4.126,1238,5.31,1243,2.941,1299,3.36,1382,3.36,1383,4.611,1384,4.611,1385,4.611,1386,4.029]],["title/controllers/OrganizationsController.html",[147,1.615,1387,2.992]],["body/controllers/OrganizationsController.html",[3,0.091,4,0.081,5,0.061,7,0.235,11,1.115,12,2.644,13,2.086,14,2.63,15,1.963,17,2.337,18,2.56,22,0.62,24,1.565,25,0.012,26,1.133,27,0.593,28,1.469,30,3.668,32,1.379,33,1.516,34,2.32,35,1.706,36,2.906,38,2.524,39,1.494,40,0.972,43,3.118,45,2.414,49,1.434,51,1.558,55,0.238,58,0.51,60,0.091,62,0.16,64,0.73,67,2.315,76,1.335,78,0.803,82,1.379,91,1.115,94,0.007,95,0.007,147,1.233,149,1.233,156,1.469,161,3.004,163,2.652,165,1.89,169,1.793,170,0.708,171,1.89,312,2.56,316,1.89,321,2.13,324,2.13,325,3.676,326,2.21,328,2.305,332,2.13,335,2.13,336,3.326,343,2.285,345,2.13,346,2.959,347,3.15,350,3.15,351,4.422,352,4.107,355,3.891,356,2.48,357,2,358,2.285,359,1.89,360,2.13,363,2.285,364,2.13,365,2.13,366,2.13,367,2,369,1.793,370,2.13,371,2.13,372,2,373,2.13,375,1.434,386,2.13,387,2.959,389,2.13,391,2,915,2,932,4.629,1233,4.317,1247,2.285,1272,2.48,1387,3.38,1388,2.741,1389,4.639,1390,3.136,1391,3.136,1392,3.136,1393,3.136,1394,3.136,1395,5.521,1396,3.136,1397,3.136,1398,4.918,1399,3.136,1400,3.522,1401,2.741,1402,3.136,1403,3.136,1404,3.136,1405,3.136,1406,3.136,1407,3.136,1408,3.136,1409,3.136,1410,3.136]],["title/modules/OrganizationsModule.html",[179,1.36,194,2.788]],["body/modules/OrganizationsModule.html",[3,0.147,4,0.131,5,0.099,25,0.012,26,1.129,55,0.255,58,0.829,60,0.147,62,0.259,94,0.009,95,0.009,149,2.55,179,2.147,181,2.241,182,3.368,194,5.465,197,3.706,198,2.913,199,2.773,201,3.368,202,2.647,273,2.851,275,1.633,354,2.157,397,3.706,398,3.071,403,3.251,463,2.428,478,3.907,489,3.461,538,3.714,1233,2.773,1243,4.136,1281,4.03,1387,5.196,1400,5.348,1401,4.454,1411,4.454,1412,4.454,1413,4.454,1414,5.097,1415,5.097]],["title/injectables/OrganizationsService.html",[0,0.691,1400,2.619]],["body/injectables/OrganizationsService.html",[0,0.815,1,5.18,2,1.178,3,0.096,4,0.085,5,0.065,7,0.249,8,1.025,9,3.53,10,3.83,11,1.164,12,2.723,13,1.552,14,2.307,15,2.418,16,3.83,17,2.05,18,2.468,19,1.975,21,4.107,22,0.701,24,1.727,25,0.012,26,1.251,27,0.58,28,1.621,29,2.907,30,3.83,32,2.13,33,1.621,34,2.359,35,1.81,36,2.307,38,1.81,39,1.584,40,1.016,42,2.424,43,1.521,44,3.442,45,2.545,46,1.584,47,2.63,49,2.215,51,1.653,53,1.408,54,1.308,55,0.237,56,2.769,58,0.541,59,1.219,60,0.096,62,0.169,64,1.128,65,2.004,67,1.838,69,1.81,70,1.066,72,2.63,74,3.09,76,0.993,78,1.24,86,2.004,87,2.122,91,0.799,94,0.007,95,0.007,101,2.05,269,2.721,275,1.066,354,1.408,414,2.424,426,3.29,427,2.424,433,2.259,435,3.09,446,2.424,447,2.424,448,2.424,449,2.259,450,3.29,456,2.122,457,1.81,463,1.584,489,2.259,543,4.517,563,2.259,564,2.63,590,2.907,859,2.13,874,5.236,1233,2.636,1253,2.63,1281,2.63,1286,4.233,1293,2.907,1295,2.907,1296,2.907,1298,2.907,1299,2.424,1301,2.907,1308,2.907,1311,2.907,1312,2.907,1313,2.907,1314,2.907,1398,5,1400,3.09,1416,2.907,1417,3.326,1418,3.326,1419,3.326,1420,3.326,1421,3.326,1422,3.326,1423,3.326]],["title/classes/PaginationQueryDto.html",[36,1.956,62,0.209]],["body/classes/PaginationQueryDto.html",[3,0.163,4,0.145,5,0.109,7,0.422,8,1.461,22,0.657,25,0.012,27,0.544,36,3.288,55,0.181,60,0.163,62,0.351,64,1.891,79,4.496,80,4.496,94,0.01,95,0.01,156,1.557,232,1.271,311,2.216,838,3.708,910,4.446,931,5.901,1424,6.521,1425,4.924,1426,6.903,1427,5.635,1428,5.635]],["title/guards/PermissionsGuard.html",[96,2.788,1429,2.992]],["body/guards/PermissionsGuard.html",[0,0.925,3,0.115,4,0.102,5,0.077,7,0.297,11,1.32,19,1.619,22,0.523,24,1.32,25,0.013,26,0.956,27,0.433,28,1.239,33,1.279,34,1.76,55,0.219,58,0.646,60,0.115,62,0.202,64,0.925,76,1.291,78,1.74,82,1.746,90,5.617,91,1.633,94,0.008,95,0.008,96,3.73,98,2.533,103,5.641,104,3.14,105,5.834,109,3.14,110,3.884,112,3.6,113,2.989,114,3.6,115,2.696,118,2.16,124,1.891,128,4.277,134,3.14,143,3.14,156,0.896,269,1.891,281,3.6,296,1.455,369,2.269,375,1.816,382,5.011,662,4.277,685,2.415,739,4.334,847,4.277,1021,3.14,1324,6.448,1325,3.47,1342,2.893,1429,4.002,1430,3.47,1431,5.493,1432,3.971,1433,3.971,1434,6.297,1435,6.328,1436,6.297,1437,4.343,1438,3.14,1439,5.493,1440,3.47,1441,3.971,1442,3.971,1443,3.971,1444,3.971,1445,5.493,1446,3.971,1447,3.971]],["title/classes/PersonDto.html",[62,0.209,155,2.992]],["body/classes/PersonDto.html",[3,0.128,4,0.114,5,0.086,7,0.331,8,1.251,22,0.74,25,0.012,27,0.623,40,1.072,55,0.214,60,0.128,62,0.339,76,0.906,91,1.6,94,0.009,95,0.009,155,4.305,156,1.719,232,0.997,234,5.263,235,4.01,236,4.849,238,4.849,240,5.263,277,1.871,281,3.804,308,4.305,310,3.255,311,1.738,328,3.307,468,2.819,482,4.52,696,3.629,831,3.002,834,3.862,836,4.305,838,2.936,856,3.862,886,4.28,889,4.305,1175,4.672,1187,3.495,1448,3.862,1449,6.655,1450,4.42,1451,4.42,1452,6.655,1453,4.42,1454,4.42,1455,4.42,1456,4.42,1457,4.42,1458,4.42,1459,4.42,1460,4.42,1461,4.42,1462,4.42,1463,5.908,1464,4.42,1465,4.42]],["title/classes/Qualification.html",[62,0.209,482,2.788]],["body/classes/Qualification.html",[3,0.123,4,0.11,5,0.083,7,0.319,8,1.22,22,0.696,25,0.012,27,0.577,40,1.031,55,0.185,59,1.562,60,0.167,62,0.217,78,1.091,85,2.995,91,2.061,93,1.618,94,0.008,95,0.008,156,1.65,170,0.962,232,0.962,246,2.776,250,4.591,251,4.481,253,5.329,272,4.309,273,2.873,274,2.319,275,1.366,276,2.67,482,3.915,484,3.106,910,3.296,1043,4.761,1047,3.37,1048,3.37,1049,3.37,1050,3.37,1051,3.37,1052,3.106,1053,2.895,1054,3.37,1466,3.37,1467,5.71,1468,5.71,1469,5.71,1470,5.71,1471,4.262,1472,4.262,1473,4.262,1474,4.262,1475,4.262,1476,3.725]],["title/classes/QualificationDto.html",[62,0.209,886,2.474]],["body/classes/QualificationDto.html",[3,0.133,4,0.118,5,0.089,7,0.344,8,1.282,22,0.713,25,0.012,27,0.591,40,1.048,55,0.195,60,0.133,62,0.367,64,1.952,94,0.009,95,0.009,156,1.691,170,1.035,232,1.035,276,1.626,310,3.296,311,1.805,417,5.294,690,5.009,696,3.668,883,4.414,886,3.65,910,3.463,930,5.294,931,4.79,1043,4.941,1188,3.629,1467,5.926,1468,5.926,1469,5.926,1470,5.926,1477,4.011,1478,4.59,1479,4.59,1480,4.59,1481,4.59,1482,6.058,1483,4.59,1484,4.59,1485,4.59,1486,4.59,1487,4.59,1488,6.058,1489,6.058,1490,4.59,1491,4.59,1492,4.59,1493,4.59,1494,4.59,1495,4.59,1496,4.59]],["title/classes/Region.html",[62,0.209,239,2.788]],["body/classes/Region.html",[3,0.13,4,0.115,5,0.087,7,0.336,8,1.264,22,0.638,25,0.012,27,0.529,40,1.006,55,0.192,59,1.645,60,0.173,62,0.228,78,1.149,85,3.1,91,1.979,93,3.077,94,0.009,95,0.009,156,1.513,170,1.013,232,1.013,239,4.054,246,3.047,250,4.374,251,4.374,257,3.649,272,4.086,273,2.949,274,2.442,275,1.438,276,2.532,279,3.271,470,4.887,480,5.86,1047,3.549,1048,3.549,1049,3.549,1050,3.549,1051,3.549,1052,3.271,1053,3.048,1054,3.549,1234,5.196,1497,3.549,1498,5.86,1499,5.86,1500,5.86,1501,4.489,1502,4.489,1503,4.489,1504,3.922]],["title/classes/RegionDto.html",[62,0.209,827,2.992]],["body/classes/RegionDto.html",[3,0.144,4,0.128,5,0.097,7,0.372,8,1.351,22,0.671,25,0.012,27,0.556,40,1.035,55,0.205,60,0.144,62,0.325,64,1.907,93,2.675,94,0.009,95,0.009,156,1.59,170,1.122,232,1.122,246,2.987,276,2.634,310,3.27,311,1.955,690,4.496,698,3.502,827,4.65,838,3.695,1498,6.159,1499,6.159,1500,6.159,1505,4.345,1506,6.382,1507,7.048,1508,4.972,1509,7.436,1510,4.972,1511,6.382,1512,4.972]],["title/interfaces/RequestWithUser.html",[782,2.619,1513,3.247]],["body/interfaces/RequestWithUser.html",[3,0.171,4,0.152,5,0.115,7,0.444,8,1.507,25,0.012,27,0.468,53,2.51,55,0.229,60,0.171,94,0.01,95,0.01,116,4.598,117,3.227,685,3.685,747,5.183,782,3.783,784,4.69,859,3.131,1513,6.034,1514,5.183,1515,5.183]],["title/injectables/TimeoutInterceptor.html",[0,0.691,1516,3.247]],["body/injectables/TimeoutInterceptor.html",[0,1.106,2,1.842,3,0.15,4,0.134,5,0.101,7,0.39,11,1.579,22,0.495,24,1.25,25,0.012,26,0.906,27,0.41,28,1.173,33,1.211,55,0.231,58,0.846,60,0.15,62,0.265,70,1.667,76,1.476,94,0.009,95,0.009,110,4.322,112,2.973,114,4.114,118,2.83,124,2.478,767,4.786,786,5.135,787,4.46,789,3.79,791,4.46,792,4.337,1212,4.545,1516,5.193,1517,4.545,1518,4.786,1519,5.202,1520,6.568,1521,7.198,1522,6.568,1523,4.545,1524,5.202,1525,4.113,1526,5.202,1527,5.202]],["title/injectables/TransactionInterceptor.html",[0,0.691,1528,3.247]],["body/injectables/TransactionInterceptor.html",[0,0.945,2,1.452,3,0.118,4,0.105,5,0.08,7,0.307,11,1.349,12,2.192,13,2.207,19,1.671,22,0.534,24,1.349,25,0.012,26,0.977,27,0.443,28,1.267,33,0.954,34,1.799,55,0.222,58,0.667,59,2.644,60,0.118,62,0.208,64,0.954,67,2.43,70,1.313,76,1.151,78,1.437,94,0.008,95,0.008,101,1.735,110,4.259,112,3.209,114,2.343,116,3.383,118,2.23,124,1.952,131,3.383,141,4.091,143,3.241,219,4.091,275,1.313,296,1.502,312,1.612,621,2.987,698,2.037,737,4.439,767,2.987,786,4.677,787,3.813,791,2.783,792,3.858,1518,4.666,1523,3.582,1525,3.241,1528,4.439,1529,3.582,1530,7.215,1531,5.614,1532,5.614,1533,6.018,1534,4.439,1535,7.768,1536,5.614,1537,5.614,1538,5.063,1539,4.906,1540,4.099,1541,4.099,1542,4.099,1543,5.614,1544,4.099,1545,5.614,1546,4.099,1547,4.099,1548,6.403,1549,3.582,1550,4.099,1551,4.099,1552,4.099,1553,3.582,1554,4.099,1555,4.099,1556,4.099,1557,3.582,1558,4.099,1559,4.099,1560,4.099,1561,4.099,1562,4.099,1563,4.099]],["title/injectables/TransformInterceptor.html",[0,0.691,340,2.619]],["body/injectables/TransformInterceptor.html",[0,1.085,2,1.787,3,0.146,4,0.13,5,0.098,7,0.378,11,1.548,19,2.058,22,0.613,24,1.548,25,0.012,26,1.122,27,0.508,28,1.453,33,1.175,55,0.24,58,0.821,60,0.146,62,0.328,64,1.175,70,1.617,76,1.034,94,0.009,95,0.009,110,4.274,112,2.884,114,4.057,118,2.746,124,2.404,277,2.136,301,3.99,340,4.109,375,2.308,457,2.746,782,3.219,783,5.757,785,3.99,786,5.078,787,4.375,788,3.99,789,3.677,790,5.095,791,4.375,792,4.505,793,4.41,794,4.41,795,4.41,1518,4.695,1564,5.046,1565,5.046,1566,5.046]],["title/classes/UpdateApplicantDto.html",[62,0.209,342,2.788]],["body/classes/UpdateApplicantDto.html",[3,0.179,4,0.159,5,0.12,13,1.981,25,0.012,55,0.235,60,0.179,62,0.315,94,0.011,95,0.011,170,1.395,232,1.395,320,3.944,342,4.957,749,4.2,811,4.89,859,2.719,1195,3.944,1196,4.506,1567,5.404,1568,6.184,1569,6.184]],["title/classes/UpdateApplicationDto.html",[62,0.209,515,2.619]],["body/classes/UpdateApplicationDto.html",[3,0.105,4,0.093,5,0.07,7,0.272,8,1.092,13,1.653,18,2.028,22,0.657,25,0.012,27,0.594,28,1.164,32,2.872,40,0.859,53,1.536,54,1.427,55,0.231,60,0.105,62,0.305,76,1.057,91,1.773,93,1.378,94,0.007,95,0.007,113,2.806,131,2.187,156,1.474,170,1.164,232,0.819,246,1.957,277,1.536,281,3.944,296,2.394,310,2.638,311,1.427,312,1.427,326,3.112,328,3.746,460,5.018,462,4.074,464,4.074,465,4.686,468,2.315,474,2.187,515,3.29,578,5.028,637,2.315,696,2.457,698,3.246,745,2.465,831,2.465,837,2.465,838,3.563,839,2.315,844,3.108,847,2.465,853,2.87,858,2.465,868,4.744,869,4.078,870,4.078,871,4.078,872,2.87,873,2.87,876,2.87,877,2.87,879,4.078,880,3.758,881,4.078,882,4.078,883,3.758,884,2.87,886,4.32,887,2.87,889,3.758,940,5.028,958,2.87,1175,4.078,1183,3.172,1185,4.078,1188,2.87,1189,3.172,1190,3.172,1191,3.172,1192,3.172,1195,2.315,1570,6.265,1571,5.158,1572,5.158,1573,3.63,1574,3.63,1575,3.63,1576,3.63,1577,3.63,1578,3.63,1579,3.63,1580,3.63,1581,3.63]],["title/classes/UpdateFileDto.html",[62,0.209,1582,3.247]],["body/classes/UpdateFileDto.html",[3,0.18,4,0.16,5,0.121,13,1.994,25,0.012,55,0.236,60,0.18,62,0.316,94,0.011,95,0.011,170,1.404,232,1.404,859,2.736,890,5.437,892,4.225,894,4.92,1195,3.969,1582,5.793,1583,5.437,1584,6.222]],["title/classes/UpdateJobDto.html",[62,0.209,1261,2.788]],["body/classes/UpdateJobDto.html",[3,0.18,4,0.16,5,0.121,13,1.994,25,0.012,55,0.236,60,0.18,62,0.316,94,0.011,95,0.011,170,1.404,232,1.404,859,2.736,912,3.969,914,4.92,1195,3.969,1261,4.975,1585,5.437,1586,6.222,1587,6.222]],["title/classes/UpdateOrganizationDto.html",[62,0.209,1398,2.788]],["body/classes/UpdateOrganizationDto.html",[3,0.179,4,0.159,5,0.12,13,1.988,25,0.012,55,0.235,60,0.179,62,0.316,94,0.011,95,0.011,232,1.399,749,4.212,859,2.727,932,4.212,934,4.905,1195,3.956,1196,4.52,1398,4.966,1588,5.42,1589,6.203,1590,6.203]],["title/classes/UpdateUserDto.html",[62,0.209,1591,2.619]],["body/classes/UpdateUserDto.html",[3,0.147,4,0.131,5,0.099,7,0.382,8,1.372,22,0.679,25,0.012,27,0.562,40,1.041,55,0.209,60,0.147,62,0.33,94,0.009,95,0.009,156,1.609,170,1.15,232,1.15,257,2.773,310,3.135,311,2.004,695,4.725,696,3.575,698,3.543,699,3.714,700,5.638,743,4.076,816,3.714,838,3.729,841,3.714,940,5.469,942,4.03,943,5.196,944,5.196,1591,4.136,1592,6.558,1593,7.131,1594,5.097,1595,5.097,1596,5.097,1597,5.097,1598,5.097,1599,5.097]],["title/classes/User.html",[62,0.209,685,1.805]],["body/classes/User.html",[3,0.082,4,0.073,5,0.055,7,0.212,8,1.098,12,0.968,22,0.698,25,0.013,27,0.595,28,1.307,33,0.658,34,1.375,40,1.024,53,2.636,54,1.687,55,0.211,59,1.036,60,0.15,62,0.218,67,1.073,76,1.277,78,1.099,82,1.243,85,2.694,91,1.998,94,0.006,95,0.006,113,2.822,156,1.622,170,0.638,232,0.638,235,3.125,242,3.125,244,4.22,245,2.47,246,2.664,250,4.012,251,3.747,257,2.822,272,4.012,273,1.887,274,1.538,275,0.906,276,2.322,277,1.196,278,2.453,286,1.919,287,2.914,288,1.919,289,2.235,307,4.58,312,1.111,413,2.914,474,2.585,685,2.547,688,4.477,690,3.309,698,2.578,699,2.059,743,2.965,746,3.523,750,2.47,754,3.75,757,1.803,764,4.331,765,3.78,766,2.235,767,4.538,777,2.47,792,3.125,816,3.127,839,1.803,841,3.127,844,2.585,943,3.78,944,3.78,1217,3.393,1234,4.452,1248,2.47,1375,4.777,1600,2.059,1601,4.102,1602,5.187,1603,2.826,1604,2.826,1605,4.291,1606,2.826,1607,4.291,1608,5.187,1609,2.826,1610,2.826,1611,2.826,1612,2.826,1613,2.826,1614,2.826,1615,2.826,1616,2.826,1617,2.826,1618,2.826,1619,2.826,1620,3.75,1621,2.826,1622,2.47,1623,2.235,1624,2.826,1625,2.47,1626,2.826,1627,2.826,1628,3.127,1629,2.47,1630,2.826,1631,2.826,1632,2.826,1633,2.826,1634,2.826,1635,2.826,1636,4.291,1637,5.187,1638,2.826,1639,2.47,1640,2.826,1641,2.826,1642,2.826,1643,2.826,1644,2.826]],["title/classes/UserSnippetDto.html",[62,0.209,1645,2.992]],["body/classes/UserSnippetDto.html",[3,0.126,4,0.112,5,0.085,7,0.328,8,1.242,22,0.723,25,0.012,27,0.612,40,1.037,45,2.344,55,0.227,60,0.126,62,0.337,64,1.961,94,0.008,95,0.008,113,3.602,156,1.713,170,0.986,232,0.986,235,3.988,260,2.969,276,2.748,277,1.85,295,3.457,303,3.821,305,3.821,307,4.638,308,5.653,309,3.983,310,2.579,311,1.719,695,4.274,743,3.783,764,4.576,765,4.823,836,4.274,837,2.969,839,2.789,960,3.821,1185,4.638,1601,5.234,1645,4.274,1646,6.779,1647,4.372,1648,4.372,1649,4.372,1650,4.372,1651,4.372,1652,4.372,1653,4.372,1654,4.372,1655,4.372,1656,4.372]],["title/controllers/UsersController.html",[147,1.615,1657,2.992]],["body/controllers/UsersController.html",[3,0.093,4,0.083,5,0.063,7,0.241,11,1.137,12,2.729,13,1.516,14,2.944,15,2.002,17,2.002,18,2.589,22,0.626,24,1.485,25,0.012,26,1.076,27,0.587,28,1.394,32,1.416,33,1.533,34,2.426,39,1.534,40,0.979,43,3.147,45,2.437,49,1.473,51,1.601,55,0.229,58,0.524,60,0.093,62,0.164,64,1.102,67,2.498,70,1.98,76,1.349,82,1.416,91,1.137,94,0.007,95,0.007,101,1.363,102,2.351,147,1.267,149,1.267,156,1.485,161,2.574,163,2.704,165,2.85,169,1.841,170,0.727,312,2.589,316,1.941,321,2.187,324,2.187,325,3.723,328,2.351,332,2.187,335,2.187,336,3.378,340,2.054,343,2.347,345,2.187,347,3.213,350,3.213,351,4.471,352,4.147,354,1.363,357,2.054,358,2.347,359,1.941,360,2.187,363,2.347,364,2.187,365,2.187,366,2.187,367,2.054,369,1.841,370,2.187,371,2.187,372,2.054,373,2.187,375,1.473,386,2.187,387,2.054,389,2.187,391,2.054,400,2.351,605,3.741,639,3.934,685,2.894,727,3.378,757,3.018,774,2.814,781,2.814,1102,2.547,1268,2.814,1272,2.547,1591,4.654,1645,5.593,1657,3.447,1658,2.814,1659,2.814,1660,3.221,1661,3.221,1662,3.221,1663,3.221,1664,5.607,1665,3.221,1666,3.221,1667,3.221,1668,2.814,1669,3.221,1670,3.221,1671,3.221,1672,3.221,1673,3.221,1674,3.221,1675,3.221,1676,3.221]],["title/modules/UsersModule.html",[179,1.36,195,2.619]],["body/modules/UsersModule.html",[3,0.161,4,0.143,5,0.108,25,0.012,26,0.967,55,0.26,58,0.904,60,0.161,62,0.283,94,0.01,95,0.01,149,2.692,179,2.267,181,2.444,195,4.366,201,2.887,202,2.887,273,2.444,275,1.781,354,2.352,397,3.177,398,3.348,403,3.545,685,2.444,727,4.469,1628,4.987,1657,5.405,1668,4.856,1677,5.558,1678,5.558,1679,4.366,1680,4.856,1681,5.558]],["title/injectables/UsersRepository.html",[0,0.691,1679,2.619]],["body/injectables/UsersRepository.html",[0,0.866,2,1.281,3,0.105,4,0.093,5,0.07,7,0.271,11,1.236,12,2.821,13,1.648,15,2.177,19,2.098,21,3.728,22,0.74,24,1.868,25,0.012,26,1.353,27,0.604,28,1.753,33,1.784,34,2.455,40,0.942,44,3.1,45,2.121,55,0.222,58,0.589,59,1.326,60,0.105,62,0.184,64,0.842,89,2.456,94,0.007,95,0.007,101,1.531,275,1.159,354,1.531,433,2.456,443,3.281,592,2.86,685,1.59,746,2.456,859,2.262,874,5.583,972,5.785,974,4.068,975,4.068,976,4.068,977,4.068,978,4.068,979,4.068,983,3.161,985,3.161,986,3.161,987,6.79,989,6.022,990,5.232,991,3.161,993,3.161,996,5.699,997,5.699,999,3.161,1000,4.068,1002,3.161,1004,3.161,1679,3.281,1682,3.161,1683,3.617,1684,3.617,1685,4.068,1686,3.617,1687,3.617,1688,3.617,1689,3.617,1690,3.617,1691,3.617,1692,3.617,1693,3.617,1694,3.617,1695,3.617,1696,3.617,1697,3.617]],["title/injectables/UsersService.html",[0,0.691,727,2.474]],["body/injectables/UsersService.html",[0,0.471,2,0.587,3,0.048,4,0.043,5,0.07,7,0.124,8,1.091,11,0.672,12,2.524,13,1.161,14,2.027,15,1.183,17,1.183,18,1.425,19,0.676,21,1.598,22,0.571,24,1.318,25,0.013,26,0.954,27,0.432,28,1.237,32,1.229,33,1.581,34,2.537,39,1.332,40,0.961,43,2.357,45,2.829,46,2.264,49,1.279,51,1.389,53,0.702,54,0.652,55,0.153,56,2.433,57,1.126,58,0.27,60,0.048,62,0.142,64,0.991,65,1.684,66,3.911,67,2.924,69,2.316,70,1.986,71,1.311,73,1.899,74,2.312,76,1.229,78,1.99,82,2.532,83,2.641,85,0.861,87,2.715,91,0.399,94,0.004,95,0.004,101,1.534,102,2.115,128,1.899,131,0.999,246,1.615,269,2.264,278,2.433,296,2.01,326,2.454,354,0.702,375,0.758,413,3.911,414,1.208,415,3.719,425,2.211,426,1.126,427,1.208,431,3.365,435,1.783,446,1.208,447,1.208,448,1.208,449,1.126,450,1.899,456,1.783,457,1.521,474,3.105,556,3.719,570,3.719,584,2.443,593,1.449,639,3.732,685,3.727,698,3.829,727,2.564,737,2.211,743,3.732,746,1.126,757,3.824,762,2.866,1006,2.211,1052,1.208,1533,2.443,1534,5.532,1553,2.443,1591,4.462,1622,5.931,1659,2.443,1679,3.674,1680,1.449,1698,1.449,1699,2.796,1700,2.796,1701,1.658,1702,2.796,1703,1.658,1704,5.76,1705,4.256,1706,3.625,1707,1.658,1708,5.76,1709,3.625,1710,1.658,1711,3.625,1712,2.796,1713,1.658,1714,3.625,1715,2.796,1716,1.658,1717,3.625,1718,1.658,1719,3.625,1720,1.658,1721,3.625,1722,2.796,1723,2.796,1724,2.796,1725,1.658,1726,2.796,1727,2.796,1728,3.625,1729,2.796,1730,1.658,1731,1.658,1732,1.658,1733,1.658,1734,1.658,1735,1.658,1736,1.658,1737,1.658]],["title/injectables/ValidateObjectIdPipe.html",[0,0.691,355,2.619]],["body/injectables/ValidateObjectIdPipe.html",[0,1.085,2,1.787,3,0.146,4,0.13,5,0.098,7,0.378,11,1.548,22,0.48,24,1.213,25,0.012,26,0.878,27,0.398,28,1.138,33,1.175,40,1.039,45,2.514,46,2.404,54,2.791,55,0.207,56,2.884,58,0.821,59,2.361,60,0.146,62,0.257,69,2.746,70,2.064,76,1.034,94,0.009,95,0.009,124,2.404,130,5.172,241,5.095,242,3.882,269,3.069,296,1.85,312,1.984,346,3.219,355,4.769,387,3.219,421,4.41,568,4.41,1053,4.375,1328,3.677,1534,5.095,1738,5.63,1739,4.41,1740,6.443,1741,6.443,1742,7.477,1743,5.046,1744,6.443,1745,5.046,1746,5.046,1747,5.046,1748,5.046]],["title/injectables/WrapResponseInterceptor.html",[0,0.691,1749,3.247]],["body/injectables/WrapResponseInterceptor.html",[0,1.116,2,1.871,3,0.153,4,0.136,5,0.103,7,0.396,11,1.594,22,0.503,24,1.27,25,0.012,26,0.92,27,0.416,28,1.192,33,1.23,40,0.695,55,0.233,58,0.86,60,0.153,62,0.269,76,1.36,94,0.01,95,0.01,110,4.346,112,3.02,114,4.144,118,2.874,124,2.516,457,3.945,786,5.163,787,4.504,788,4.177,789,3.849,791,4.504,792,4.368,1218,4.616,1518,4.833,1525,4.177,1749,5.244,1750,5.795,1751,4.616,1752,5.283,1753,5.283]],["title/coverage.html",[1754,4.445]],["body/coverage.html",[0,1.29,1,1.48,5,0.068,6,1.905,13,0.698,18,0.857,25,0.012,27,0.172,36,1.038,62,0.415,70,0.698,94,0.005,95,0.005,96,2.982,97,1.588,99,1.905,100,1.905,107,1.246,119,1.588,121,1.588,142,1.313,147,2.528,148,1.588,150,1.905,155,1.588,196,1.48,215,1.48,229,1.905,231,1.132,233,2.552,239,1.48,258,1.588,269,1.038,279,1.588,291,1.39,293,1.588,294,1.905,295,2.77,314,1.588,315,1.905,320,1.39,340,1.39,342,1.48,348,1.39,355,1.39,357,1.39,359,1.313,400,1.083,401,1.39,406,1.905,459,2.552,463,1.038,473,1.39,478,1.313,482,1.48,484,1.588,486,1.588,491,1.588,492,1.905,496,1.39,515,1.39,517,1.39,539,1.905,597,1.588,598,1.905,626,1.588,639,1.246,646,1.246,649,1.588,685,1.93,687,1.905,707,1.48,708,1.48,723,1.905,727,2.11,782,2.234,783,1.588,785,2.77,804,1.588,810,1.905,811,2.77,827,1.588,857,1.905,858,3.415,862,1.48,886,1.313,892,1.48,893,1.905,894,2.77,912,1.39,913,1.905,914,2.77,932,1.48,933,1.905,934,2.77,941,1.905,942,2.77,964,1.48,965,3.994,972,1.588,973,1.905,1011,7.495,1030,2.552,1039,1.588,1041,2.77,1042,2.77,1056,1.905,1060,1.588,1061,1.905,1077,1.39,1110,1.905,1173,1.724,1174,2.77,1193,1.724,1198,1.724,1199,1.905,1200,1.905,1232,2.552,1233,1.186,1234,1.48,1243,1.39,1251,1.588,1252,1.905,1261,1.48,1263,1.39,1282,1.905,1315,1.724,1316,1.905,1317,2.77,1331,1.905,1362,1.905,1364,1.905,1372,1.905,1375,3.199,1382,2.552,1387,1.588,1388,1.905,1398,1.48,1400,1.39,1416,1.905,1424,1.905,1425,1.905,1429,1.588,1430,1.905,1435,1.724,1437,1.724,1448,1.905,1466,2.77,1477,1.905,1497,2.77,1505,1.905,1513,1.724,1514,1.905,1515,1.905,1516,1.724,1517,1.905,1528,1.724,1529,1.905,1538,1.724,1567,1.905,1570,1.905,1582,1.724,1583,1.905,1585,1.905,1588,1.905,1591,1.39,1592,1.905,1600,2.552,1628,1.588,1645,1.588,1646,1.905,1657,1.588,1658,1.905,1679,2.234,1682,1.905,1685,1.724,1698,1.905,1738,1.905,1739,1.905,1749,1.724,1750,1.905,1751,1.905,1754,1.724,1755,2.18,1756,2.18,1757,2.18,1758,5.508,1759,5.882,1760,5.508,1761,2.18,1762,2.18,1763,3.061,1764,2.18,1765,5.508,1766,7.085,1767,8.204,1768,3.837,1769,4.391,1770,8.023,1771,2.18,1772,5.508,1773,2.18,1774,2.18,1775,4.391,1776,3.503,1777,3.503,1778,3.061,1779,4.391,1780,3.503,1781,1.905,1782,1.905,1783,1.905,1784,3.061,1785,1.724,1786,1.724,1787,2.18,1788,2.18,1789,1.905,1790,1.905,1791,2.18,1792,2.18,1793,4.391,1794,1.724,1795,1.905,1796,2.77,1797,2.77,1798,1.905,1799,2.77,1800,1.905,1801,2.18,1802,3.061,1803,1.905,1804,1.905,1805,1.905,1806,1.905,1807,1.905,1808,3.061,1809,1.905,1810,1.905,1811,1.905,1812,1.905,1813,1.905,1814,1.724,1815,2.18,1816,2.18,1817,2.18,1818,2.18]],["title/dependencies.html",[182,2.567,1819,3.421]],["body/dependencies.html",[25,0.013,58,0.792,59,1.783,62,0.32,94,0.009,95,0.009,115,3.304,117,3.424,118,2.647,130,3.545,167,3.545,170,1.097,182,2.527,269,2.317,275,1.559,277,2.059,311,1.913,435,3.103,633,3.847,711,3.103,713,3.847,739,3.103,745,3.304,749,3.304,1024,4.251,1196,3.545,1342,5.083,1370,4.251,1620,4.251,1820,4.865,1821,4.865,1822,4.865,1823,4.865,1824,7.375,1825,4.865,1826,4.865,1827,4.865,1828,6.293,1829,4.865,1830,4.865,1831,4.865,1832,4.865,1833,4.865,1834,4.865,1835,4.865,1836,4.865,1837,4.865,1838,4.865,1839,4.865,1840,4.865,1841,4.865,1842,4.865,1843,4.865,1844,4.865,1845,4.865,1846,4.865,1847,4.865,1848,4.865,1849,4.865,1850,4.865,1851,4.865,1852,4.865,1853,4.865,1854,4.865,1855,4.865,1856,4.865,1857,4.865,1858,4.865,1859,4.865,1860,4.865,1861,4.865,1862,4.865,1863,4.865,1864,4.865,1865,4.865]],["title/miscellaneous/enumerations.html",[1866,1.955,1867,4.32]],["body/miscellaneous/enumerations.html",[7,0.373,25,0.012,43,2.923,54,3.363,94,0.009,95,0.009,236,4.658,237,5.054,284,5.054,460,4.077,764,3.851,1122,5.586,1245,5.586,1625,5.586,1866,2.849,1867,4.356,1868,4.984,1869,6.392,1870,4.984,1871,4.984,1872,7.443,1873,4.984,1874,4.984,1875,4.984,1876,6.392,1877,6.392,1878,6.392,1879,6.392,1880,4.984,1881,6.392,1882,6.392,1883,4.984,1884,6.392,1885,6.392,1886,6.392,1887,6.392,1888,6.392,1889,4.984,1890,6.392,1891,6.392,1892,4.984,1893,6.392,1894,6.392]],["title/miscellaneous/functions.html",[1623,3.909,1866,1.955]],["body/miscellaneous/functions.html",[7,0.434,24,1.688,25,0.011,26,1.222,27,0.634,28,1.584,40,0.923,62,0.384,94,0.01,95,0.01,106,5.064,107,4.014,296,2.124,359,4.231,1623,4.583,1789,5.064,1790,6.136,1802,5.064,1803,6.602,1804,6.136,1866,3.313,1895,7.022,1896,5.796,1897,5.796,1898,6.136,1899,7.022,1900,7.022,1901,5.796,1902,5.796]],["title/index.html",[7,0.256,1440,2.989,1903,3.421]],["body/index.html",[4,0.133,25,0.012,94,0.009,95,0.009,283,4.092,296,1.897,318,5.721,429,3.514,880,3.771,1006,4.092,1754,4.092,1898,4.522,1904,5.175,1905,6.547,1906,5.175,1907,5.175,1908,5.175,1909,4.522,1910,5.175,1911,6.275,1912,5.175,1913,5.175,1914,5.175,1915,8.075,1916,5.175,1917,4.522,1918,7.952,1919,5.175,1920,5.175,1921,6.547,1922,5.175,1923,5.175,1924,5.175,1925,5.175,1926,6.547,1927,5.175,1928,5.175,1929,5.175,1930,6.547,1931,6.547,1932,5.175,1933,5.175,1934,5.175,1935,5.175,1936,4.522,1937,5.175,1938,5.175,1939,5.175,1940,5.175,1941,5.175,1942,5.175,1943,5.175,1944,5.175,1945,5.175,1946,5.175,1947,5.175,1948,4.522,1949,4.522,1950,5.175,1951,5.175,1952,5.175]],["title/modules.html",[181,2.471]],["body/modules.html",[25,0.01,94,0.01,95,0.01,180,4.175,181,2.519,186,3.891,187,3.891,188,3.891,189,3.891,190,3.891,191,3.891,192,3.891,193,3.891,194,3.891,195,3.655,1936,7.212,1953,8.254,1954,8.254,1955,8.48,1956,7.823,1957,7.823]],["title/overview.html",[1958,4.912]],["body/overview.html",[2,1.443,25,0.012,94,0.008,95,0.008,98,2.599,149,1.602,180,6.185,181,1.791,182,2.904,183,3.56,184,3.56,185,3.56,186,5.05,187,5.05,188,5.505,189,4.335,190,4.335,191,4.335,192,5.05,193,5.05,194,5.05,195,4.382,196,4.335,197,3.196,198,2.329,199,2.217,232,0.919,258,2.969,348,4.858,393,3.56,394,3.56,395,3.56,517,4.858,533,3.56,534,3.56,535,3.56,646,4.354,703,3.56,705,3.56,706,3.56,707,4.335,708,4.335,784,3.222,1077,4.858,1104,3.56,1105,3.56,1106,3.56,1263,4.858,1276,3.56,1277,3.56,1278,3.56,1400,4.858,1411,3.56,1412,3.56,1413,3.56,1438,3.222,1763,3.56,1768,3.56,1958,3.56,1959,4.074,1960,4.074]],["title/miscellaneous/typealiases.html",[1866,1.955,1961,4.943]],["body/miscellaneous/typealiases.html",[7,0.406,25,0.01,27,0.532,94,0.01,95,0.01,107,3.854,215,4.579,233,3.952,290,4.913,434,4.579,459,3.952,473,4.301,563,4.579,735,5.892,746,4.579,964,4.579,965,4.982,1030,3.952,1232,3.952,1299,4.913,1382,3.952,1549,5.892,1600,3.952,1785,4.289,1786,5.331,1794,4.289,1796,4.289,1797,4.289,1799,4.289,1814,4.289,1866,3.1,1962,5.424,1963,4.74,1964,4.74,1965,4.74,1966,4.74,1967,4.74,1968,5.424,1969,6.742,1970,6.411,1971,4.74,1972,4.74,1973,4.74,1974,4.74,1975,4.74,1976,4.74,1977,6.742,1978,4.74,1979,7.337,1980,5.424,1981,5.424,1982,5.424,1983,5.424,1984,5.424]],["title/miscellaneous/variables.html",[1866,1.955,1985,4.32]],["body/miscellaneous/variables.html",[5,0.069,7,0.165,13,1.417,14,1.05,15,1.872,17,0.933,18,0.866,25,0.013,27,0.399,40,0.465,46,1.05,53,3.4,54,3.159,56,1.259,70,1.132,76,1.48,78,1.132,85,1.144,86,2.129,91,1.063,93,0.836,94,0.005,95,0.005,107,2.019,116,1.328,119,2.574,121,2.574,132,1.742,135,1.925,141,3.222,142,2.665,146,1.925,215,2.399,223,1.925,225,1.925,227,1.925,233,1.606,279,2.574,291,2.253,292,1.925,296,2.365,357,2.253,364,2.399,365,2.399,366,2.399,367,2.253,382,2.399,401,2.253,416,1.742,443,2.253,459,1.606,478,2.129,484,2.574,486,2.574,490,1.925,559,1.606,621,2.574,639,1.259,655,1.925,656,1.925,685,2.73,688,2.253,701,1.742,727,2.129,739,1.405,743,2.528,764,2.129,765,1.606,769,2.794,770,1.742,790,1.742,813,1.925,852,4.382,910,2.528,943,3.222,944,3.222,945,1.925,959,1.925,964,2.399,965,3.003,968,1.606,970,1.925,974,1.742,975,2.794,976,2.794,977,2.794,978,1.742,979,1.742,1000,1.742,1021,1.742,1030,1.606,1039,2.574,1040,1.925,1041,1.742,1042,2.794,1055,1.925,1067,3.087,1074,3.087,1082,5.639,1095,1.925,1157,3.087,1160,1.925,1203,1.925,1217,1.742,1232,1.606,1243,2.253,1250,1.925,1375,1.606,1382,1.606,1386,1.925,1429,1.606,1435,4.674,1437,2.794,1438,1.742,1466,1.742,1476,1.925,1497,1.742,1504,1.925,1538,2.794,1539,3.087,1557,1.925,1591,1.405,1600,1.606,1601,1.742,1628,2.574,1629,1.925,1639,3.087,1679,2.253,1685,2.794,1778,1.925,1781,1.925,1782,3.087,1783,3.087,1784,1.925,1785,1.742,1786,2.794,1794,1.742,1795,3.087,1796,1.742,1797,1.742,1798,3.087,1799,1.742,1800,3.087,1805,1.925,1806,1.925,1807,1.925,1808,4.421,1809,3.087,1810,1.925,1811,3.087,1812,1.925,1813,4.839,1814,1.742,1866,1.259,1909,1.925,1911,1.925,1917,1.925,1948,1.925,1949,1.925,1963,3.087,1964,1.925,1965,1.925,1966,1.925,1967,1.925,1970,1.925,1971,1.925,1972,3.087,1973,1.925,1974,3.087,1975,1.925,1976,1.925,1978,1.925,1985,1.925,1986,2.203,1987,2.203,1988,2.203,1989,3.533,1990,3.533,1991,2.203,1992,2.203,1993,2.203,1994,2.203,1995,2.203,1996,2.203,1997,2.203,1998,2.203,1999,2.203,2000,2.203,2001,3.533,2002,2.203,2003,2.203,2004,2.203,2005,2.203,2006,2.203,2007,2.203,2008,2.203,2009,2.203,2010,2.203,2011,2.203,2012,2.203,2013,2.203,2014,2.203,2015,2.203,2016,3.533,2017,3.533,2018,2.203,2019,3.533,2020,3.533,2021,2.203,2022,2.203,2023,2.203,2024,2.203,2025,2.203,2026,2.203,2027,2.203,2028,2.203,2029,2.203,2030,2.203,2031,2.203,2032,2.203,2033,2.203,2034,2.203,2035,2.203,2036,2.203,2037,2.203,2038,2.203,2039,2.203,2040,6.209,2041,2.203,2042,2.203,2043,3.533,2044,3.533,2045,2.203,2046,2.203,2047,2.203,2048,2.203,2049,2.203,2050,2.203,2051,2.203,2052,2.203,2053,2.203,2054,2.203,2055,2.203,2056,2.203,2057,2.203,2058,2.203,2059,2.203,2060,2.203,2061,2.203,2062,3.533,2063,2.203,2064,3.533,2065,3.533,2066,3.533,2067,2.203,2068,2.203,2069,2.203,2070,2.203,2071,2.203,2072,2.203,2073,3.533,2074,6.657,2075,3.533,2076,2.203,2077,2.203,2078,2.203,2079,2.203]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1011,"title":{},"body":{"classes/EntityRepository.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1859,"title":{},"body":{"dependencies.html":{}}}],["0.1.4",{"_index":1846,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1840,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1839,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1856,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1767,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1793,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1759,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1758,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1766,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1772,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1760,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1765,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1775,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":813,"title":{},"body":{"classes/CreateApplicantDto.html":{},"miscellaneous/variables.html":{}}}],["024144_chrome.jpg",{"_index":1135,"title":{},"body":{"injectables/FilesService.html":{}}}],["04",{"_index":843,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["04'})@isdatestring()@isnotempty",{"_index":814,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["0712659790",{"_index":854,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["075753_netflix.jpg",{"_index":1130,"title":{},"body":{"injectables/FilesService.html":{}}}],["0770511643",{"_index":855,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["0fd358b14332f3d6cf23799ecea3b516",{"_index":1126,"title":{},"body":{"injectables/FilesService.html":{}}}],["1",{"_index":1021,"title":{},"body":{"classes/EntityRepository.html":{},"guards/PermissionsGuard.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1828,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":1832,"title":{},"body":{"dependencies.html":{}}}],["1.1.18",{"_index":1823,"title":{},"body":{"dependencies.html":{}}}],["1.1.6",{"_index":1825,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1842,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1780,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":1801,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1792,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1764,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1774,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1777,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1769,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":1849,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1779,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{}}}],["1024",{"_index":1238,"title":{},"body":{"classes/Job.html":{},"classes/Organization.html":{}}}],["11",{"_index":1768,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["110405_whatsapp.jpg",{"_index":1124,"title":{},"body":{"injectables/FilesService.html":{}}}],["12",{"_index":1776,"title":{},"body":{"coverage.html":{}}}],["12345678",{"_index":701,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["12345678'})@isstring()@isnotempty()@maxlength(50)@minlength(8",{"_index":691,"title":{},"body":{"classes/AuthDto.html":{}}}],["12345678'})@isstring()@maxlength(50)@minlength(8)@isnotempty",{"_index":952,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["137640",{"_index":1121,"title":{},"body":{"injectables/FilesService.html":{}}}],["13bb3b1431c510a2947d5b235731b571",{"_index":1119,"title":{},"body":{"injectables/FilesService.html":{}}}],["17.4.2",{"_index":1853,"title":{},"body":{"dependencies.html":{}}}],["175311_whatsapp.jpg",{"_index":1140,"title":{},"body":{"injectables/FilesService.html":{}}}],["17717",{"_index":1148,"title":{},"body":{"injectables/FilesService.html":{}}}],["19",{"_index":1959,"title":{},"body":{"overview.html":{}}}],["192199",{"_index":1128,"title":{},"body":{"injectables/FilesService.html":{}}}],["1h",{"_index":2006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1438,"title":{},"body":{"guards/PermissionsGuard.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":1837,"title":{},"body":{"dependencies.html":{}}}],["2.1.4",{"_index":1847,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1788,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1773,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1067,"title":{},"body":{"controllers/FilesController.html":{},"miscellaneous/variables.html":{}}}],["201",{"_index":1074,"title":{},"body":{"controllers/FilesController.html":{},"miscellaneous/variables.html":{}}}],["2022",{"_index":812,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["2022})@ispositive()@isnumber()@isnotempty",{"_index":1478,"title":{},"body":{"classes/QualificationDto.html":{}}}],["204",{"_index":2019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2097152",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["220070",{"_index":1138,"title":{},"body":{"injectables/FilesService.html":{}}}],["24011150",{"_index":842,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["24011150'})@isstring()@isnotempty",{"_index":825,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["255",{"_index":249,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/Job.html":{},"classes/Organization.html":{}}}],["29t13:00:00.000z",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1960,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1861,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":1844,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1791,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":2013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1763,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["332a172648bf846eacd09e316ece24e0",{"_index":1131,"title":{},"body":{"injectables/FilesService.html":{}}}],["374718",{"_index":1143,"title":{},"body":{"injectables/FilesService.html":{}}}],["4.0.0",{"_index":1857,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1865,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1854,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1851,"title":{},"body":{"dependencies.html":{}}}],["4/12",{"_index":1771,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":1762,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":2020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":364,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["403",{"_index":365,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["404",{"_index":366,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["430178",{"_index":1133,"title":{},"body":{"injectables/FilesService.html":{}}}],["5.0.1",{"_index":1838,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":1833,"title":{},"body":{"dependencies.html":{}}}],["5.4.3",{"_index":1821,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1234,"title":{},"body":{"classes/Job.html":{},"classes/Organization.html":{},"classes/Region.html":{},"classes/User.html":{},"coverage.html":{}}}],["500",{"_index":367,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"classes/Job.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["57",{"_index":1761,"title":{},"body":{"coverage.html":{}}}],["6.1.5",{"_index":1855,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["61e2dd4b168ab2b132b39397",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["66",{"_index":1787,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":1862,"title":{},"body":{"dependencies.html":{}}}],["7bit",{"_index":1117,"title":{},"body":{"injectables/FilesService.html":{}}}],["8",{"_index":258,"title":{},"body":{"classes/Applicant.html":{},"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.0",{"_index":1824,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1830,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":1835,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1829,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":1816,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1815,"title":{},"body":{"coverage.html":{}}}],["9107b99107345166ad8523d444d0cb45",{"_index":1136,"title":{},"body":{"injectables/FilesService.html":{}}}],["_",{"_index":372,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"injectables/AuthService.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["_.pick(user",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{}}}],["__",{"_index":373,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["__v",{"_index":1012,"title":{},"body":{"classes/EntityRepository.html":{}}}],["_cookieresponse",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{}}}],["_cookieresponse(response",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["_id",{"_index":85,"title":{},"body":{"injectables/AbstractService.html":{},"classes/Applicant.html":{},"classes/Application.html":{},"classes/EntityRepository.html":{},"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["abstract",{"_index":61,"title":{},"body":{"injectables/AbstractService.html":{},"classes/EntityRepository.html":{}}}],["abstractservice",{"_index":1,"title":{"injectables/AbstractService.html":{}},"body":{"injectables/AbstractService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"coverage.html":{}}}],["abstractservice:11",{"_index":1298,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["abstractservice:14",{"_index":1421,"title":{},"body":{"injectables/OrganizationsService.html":{}}}],["abstractservice:22",{"_index":1419,"title":{},"body":{"injectables/OrganizationsService.html":{}}}],["abstractservice:26",{"_index":1295,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["abstractservice:36",{"_index":1420,"title":{},"body":{"injectables/OrganizationsService.html":{}}}],["abstractservice:37",{"_index":1296,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["abstractservice:40",{"_index":1290,"title":{},"body":{"injectables/JobsService.html":{}}}],["abstractservice:56",{"_index":1294,"title":{},"body":{"injectables/JobsService.html":{}}}],["abstractservice:72",{"_index":1293,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["abtract",{"_index":1550,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["accepting_applications",{"_index":1885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["access",{"_index":128,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"injectables/UsersService.html":{}}}],["access_token",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["accessible",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{}}}],["accessors",{"_index":1175,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/PersonDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["account",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["action",{"_index":1171,"title":{},"body":{"injectables/FilesService.html":{}}}],["active",{"_index":756,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["active/enabled",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{}}}],["actual",{"_index":1624,"title":{},"body":{"classes/User.html":{}}}],["add",{"_index":808,"title":{},"body":{"modules/CommonModule.html":{}}}],["admin",{"_index":1625,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["admin'})@prop({required",{"_index":1617,"title":{},"body":{"classes/User.html":{}}}],["administrator",{"_index":1358,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["against",{"_index":753,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":1962,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1162,"title":{},"body":{"injectables/FilesService.html":{}}}],["already",{"_index":73,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/UsersService.html":{}}}],["alternative",{"_index":1161,"title":{},"body":{"injectables/FilesService.html":{}}}],["amazing",{"_index":1937,"title":{},"body":{"index.html":{}}}],["api",{"_index":1782,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_key",{"_index":138,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["apibearerauth",{"_index":1079,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiconsumes",{"_index":1080,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiconsumes('multipart/form",{"_index":1086,"title":{},"body":{"controllers/FilesController.html":{}}}],["apicookieauth",{"_index":173,"title":{},"body":{"controllers/AppController.html":{}}}],["apicreatedresponse",{"_index":350,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["apiexcludecontroller",{"_index":168,"title":{},"body":{"controllers/AppController.html":{}}}],["apikey",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apikeyguard",{"_index":97,"title":{"guards/ApiKeyGuard.html":{}},"body":{"guards/ApiKeyGuard.html":{},"modules/CommonModule.html":{},"coverage.html":{}}}],["apiokresponse",{"_index":351,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":352,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":1081,"title":{},"body":{"controllers/FilesController.html":{}}}],["apiproperty",{"_index":276,"title":{},"body":{"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"classes/Application.html":{},"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{}}}],["apiproperty()@expose()@isdatestring",{"_index":1653,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["apiproperty()@expose()@isemail",{"_index":1647,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["apiproperty()@expose()@isenum(role",{"_index":1655,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["apiproperty()@expose()@ismongoid",{"_index":305,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/UserSnippetDto.html":{}}}],["apiproperty()@expose()@isstring",{"_index":303,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/UserSnippetDto.html":{}}}],["apiproperty()@isnotempty()@ismongoid",{"_index":860,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{}}}],["apiproperty()@isnotempty()@isstring",{"_index":935,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["apiproperty()@isoptional()@isstring",{"_index":923,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["apiproperty()@ispositive()@isnumber()@isnotempty",{"_index":926,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":919,"title":{},"body":{"classes/CreateJobDto.html":{},"classes/FileDto.html":{}}}],["apiproperty()@prop(['undefined",{"_index":270,"title":{},"body":{"classes/Applicant.html":{}}}],["apiproperty()@prop({default",{"_index":1611,"title":{},"body":{"classes/User.html":{}}}],["apiproperty()@prop({index",{"_index":256,"title":{},"body":{"classes/Applicant.html":{},"classes/Job.html":{},"classes/Organization.html":{}}}],["apiproperty()@prop({maxlength",{"_index":248,"title":{},"body":{"classes/Applicant.html":{},"classes/Organization.html":{}}}],["apiproperty()@prop({required",{"_index":253,"title":{},"body":{"classes/Applicant.html":{},"classes/FileDocument.html":{},"classes/Job.html":{},"classes/Qualification.html":{}}}],["apiproperty()@prop({type",{"_index":245,"title":{},"body":{"classes/Applicant.html":{},"classes/User.html":{}}}],["apiproperty({description",{"_index":863,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{}}}],["apiproperty({enum",{"_index":819,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty({example",{"_index":690,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{},"classes/QualificationDto.html":{},"classes/RegionDto.html":{},"classes/User.html":{}}}],["apiproperty({example:'bachelor",{"_index":1493,"title":{},"body":{"classes/QualificationDto.html":{}}}],["apiproperty({example:'degree",{"_index":1492,"title":{},"body":{"classes/QualificationDto.html":{}}}],["apiproperty({example:2022",{"_index":1496,"title":{},"body":{"classes/QualificationDto.html":{}}}],["apiproperty({required",{"_index":470,"title":{},"body":{"classes/Application.html":{},"classes/CreateJobDto.html":{},"classes/Job.html":{},"classes/Region.html":{}}}],["apiproperty({type",{"_index":260,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/CreateApplicantDto.html":{},"classes/Job.html":{},"classes/UserSnippetDto.html":{}}}],["apipropertyoptional",{"_index":940,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":937,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["apipropertyoptional({default",{"_index":876,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["apipropertyoptional({description",{"_index":868,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["apipropertyoptional({example",{"_index":1593,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["apiquery",{"_index":353,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{}}}],["apiresponse",{"_index":1082,"title":{},"body":{"controllers/FilesController.html":{},"miscellaneous/variables.html":{}}}],["apitags",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["apitags('app",{"_index":172,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('applicants",{"_index":362,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["apitags('applications",{"_index":520,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["apitags('attachments",{"_index":1084,"title":{},"body":{"controllers/FilesController.html":{}}}],["apitags('auth",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('jobs",{"_index":1266,"title":{},"body":{"controllers/JobsController.html":{}}}],["apitags('organizations",{"_index":1403,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["apitags('users",{"_index":1670,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1898,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":803,"title":{},"body":{"modules/CommonModule.html":{}}}],["appconfig",{"_index":106,"title":{},"body":{"guards/ApiKeyGuard.html":{},"miscellaneous/functions.html":{}}}],["appconfiguration",{"_index":107,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AuthModule.html":{},"modules/FeatureConfigModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["appconfiguration.key",{"_index":717,"title":{},"body":{"modules/AuthModule.html":{}}}],["appcontroller",{"_index":148,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicant",{"_index":231,"title":{"classes/Applicant.html":{}},"body":{"classes/Applicant.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"coverage.html":{}}}],["applicant's",{"_index":550,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["applicant'})@apicreatedresponse({type",{"_index":322,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["applicant'})@apiokresponse({type",{"_index":333,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{}}}],["applicant._id",{"_index":575,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["applicant.dto",{"_index":1568,"title":{},"body":{"classes/UpdateApplicantDto.html":{}}}],["applicant.dto.ts",{"_index":811,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/UpdateApplicantDto.html":{},"coverage.html":{}}}],["applicant.dto.ts:22",{"_index":818,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["applicant.dto.ts:29",{"_index":826,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["applicant.dto.ts:36",{"_index":815,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["applicant.dto.ts:43",{"_index":822,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["applicant.dto.ts:52",{"_index":824,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["applicant.dto.ts:64",{"_index":833,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["applicant.dto.ts:69",{"_index":829,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["applicant.id",{"_index":455,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{}}}],["applicant.name",{"_index":404,"title":{},"body":{"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{}}}],["applicantdocument",{"_index":290,"title":{},"body":{"classes/Applicant.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"miscellaneous/typealiases.html":{}}}],["applicantid",{"_index":504,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{}}}],["applicantmodel",{"_index":410,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{}}}],["applicants",{"_index":317,"title":{},"body":{"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{}}}],["applicants'})@apiokresponse({type",{"_index":327,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["applicants.controller",{"_index":399,"title":{},"body":{"modules/ApplicantsModule.html":{}}}],["applicants.length",{"_index":385,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["applicants.service",{"_index":349,"title":{},"body":{"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{}}}],["applicants/applicants.module",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["applicants/entities",{"_index":488,"title":{},"body":{"classes/Application.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{}}}],["applicantschema",{"_index":291,"title":{},"body":{"classes/Applicant.html":{},"modules/ApplicantsModule.html":{},"classes/Application.html":{},"modules/ApplicationsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["applicantscontroller",{"_index":314,"title":{"controllers/ApplicantsController.html":{}},"body":{"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"coverage.html":{}}}],["applicantsmodule",{"_index":186,"title":{"modules/ApplicantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules.html":{},"overview.html":{}}}],["applicantsnippetdto",{"_index":293,"title":{"classes/ApplicantSnippetDto.html":{}},"body":{"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"coverage.html":{}}}],["applicantsnippetdto})@useinterceptors(new",{"_index":339,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["applicantsservice",{"_index":348,"title":{"injectables/ApplicantsService.html":{}},"body":{"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":400,"title":{"classes/Application.html":{}},"body":{"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["application'})@apicreatedresponse({type",{"_index":497,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["application'})@apiokresponse({type",{"_index":512,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["application.dto",{"_index":891,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["application.dto.ts",{"_index":858,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:17",{"_index":867,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":1180,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.dto.ts:22",{"_index":861,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["application.dto.ts:25",{"_index":1574,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["application.dto.ts:26",{"_index":1176,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.dto.ts:31",{"_index":1179,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.dto.ts:34",{"_index":866,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["application.dto.ts:36",{"_index":1576,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":1182,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.dto.ts:44",{"_index":1575,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["application.dto.ts:50",{"_index":1181,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.dto.ts:57",{"_index":1573,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["application.dto.ts:63",{"_index":1177,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.dto.ts:67",{"_index":1577,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["application.dto.ts:74",{"_index":1184,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.dto.ts:88",{"_index":1178,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["application.name",{"_index":405,"title":{},"body":{"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/JobsModule.html":{}}}],["application/pdf",{"_index":1118,"title":{},"body":{"injectables/FilesService.html":{}}}],["applicationdocument",{"_index":434,"title":{},"body":{"injectables/ApplicantsService.html":{},"classes/Application.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"miscellaneous/typealiases.html":{}}}],["applicationexists",{"_index":572,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["applicationmodel",{"_index":408,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{}}}],["applications",{"_index":429,"title":{},"body":{"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"index.html":{}}}],["applications'})@apiokresponse({type",{"_index":499,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["applications.controller",{"_index":537,"title":{},"body":{"modules/ApplicationsModule.html":{}}}],["applications.service",{"_index":518,"title":{},"body":{"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{}}}],["applications/applications.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["applications/dto",{"_index":1187,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/PersonDto.html":{}}}],["applications/entities",{"_index":402,"title":{},"body":{"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{}}}],["applications/enums",{"_index":1186,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{}}}],["applicationschema",{"_index":401,"title":{},"body":{"modules/ApplicantsModule.html":{},"classes/Application.html":{},"modules/ApplicationsModule.html":{},"modules/JobsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["applicationscontroller",{"_index":491,"title":{"controllers/ApplicationsController.html":{}},"body":{"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"coverage.html":{}}}],["applicationsmodule",{"_index":187,"title":{"modules/ApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["applicationsservice",{"_index":517,"title":{"injectables/ApplicationsService.html":{}},"body":{"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"coverage.html":{},"overview.html":{}}}],["applyapistatus",{"_index":357,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["applyapistatus(400",{"_index":363,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["applydecorators(...decorators",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":180,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":196,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archived",{"_index":1888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["args",{"_index":2016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.length",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":1742,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["argumentshost",{"_index":1204,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["arrayminsize",{"_index":834,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/PersonDto.html":{}}}],["arrayminsize(1",{"_index":856,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/PersonDto.html":{}}}],["arraynotempty",{"_index":1463,"title":{},"body":{"classes/PersonDto.html":{}}}],["arrayunique",{"_index":835,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["async",{"_index":12,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"injectables/FilesService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"injectables/TransactionInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["attach",{"_index":1543,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["attachment",{"_index":1098,"title":{},"body":{"controllers/FilesController.html":{}}}],["attachment/files",{"_index":1062,"title":{},"body":{"controllers/FilesController.html":{}}}],["attainedyear",{"_index":1467,"title":{},"body":{"classes/Qualification.html":{},"classes/QualificationDto.html":{}}}],["auth",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":715,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":1317,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":1319,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:8",{"_index":1318,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.service",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators",{"_index":120,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"controllers/FilesController.html":{}}}],["authcontroller",{"_index":597,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":626,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"coverage.html":{}}}],["authentication",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authguard",{"_index":1320,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1321,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1363,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authheader",{"_index":144,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["authmodule",{"_index":188,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1947,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":135,"title":{},"body":{"guards/ApiKeyGuard.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":646,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1957,"title":{},"body":{"modules.html":{}}}],["await",{"_index":67,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"injectables/TransactionInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["award",{"_index":1468,"title":{},"body":{"classes/Qualification.html":{},"classes/QualificationDto.html":{}}}],["b61d99bca1dbc98456ea787cad506984",{"_index":1146,"title":{},"body":{"injectables/FilesService.html":{}}}],["bachelor",{"_index":1487,"title":{},"body":{"classes/QualificationDto.html":{}}}],["backers",{"_index":1938,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":56,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"miscellaneous/variables.html":{}}}],["badrequestexception('invalid",{"_index":568,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["badrequestexception('the",{"_index":1729,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`a",{"_index":1306,"title":{},"body":{"injectables/JobsService.html":{}}}],["badrequestexception(`the",{"_index":71,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/UsersService.html":{}}}],["bbit",{"_index":1494,"title":{},"body":{"classes/QualificationDto.html":{}}}],["bbit)'})@isstring()@isnotempty",{"_index":1490,"title":{},"body":{"classes/QualificationDto.html":{}}}],["bcrypt",{"_index":1620,"title":{},"body":{"classes/User.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":1643,"title":{},"body":{"classes/User.html":{}}}],["bcrypt.gensalt(10",{"_index":1635,"title":{},"body":{"classes/User.html":{}}}],["bcrypt.hash(user.password",{"_index":1638,"title":{},"body":{"classes/User.html":{}}}],["before",{"_index":1052,"title":{},"body":{"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":161,"title":{},"body":{"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":113,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/Application.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{}}}],["boolean})@expose()@isboolean",{"_index":1651,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["bootstrap",{"_index":1803,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["breaks",{"_index":1579,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["browse",{"_index":1955,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1953,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1906,"title":{},"body":{"index.html":{}}}],["busia",{"_index":1506,"title":{},"body":{"classes/RegionDto.html":{}}}],["business",{"_index":1488,"title":{},"body":{"classes/QualificationDto.html":{}}}],["bypass",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":300,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["called",{"_index":677,"title":{},"body":{"controllers/AuthController.html":{}}}],["callhandler",{"_index":786,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["canactivate",{"_index":103,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["canactivate(context",{"_index":109,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["careers.pdf",{"_index":1116,"title":{},"body":{"injectables/FilesService.html":{}}}],["case",{"_index":587,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["casl/ability",{"_index":1820,"title":{},"body":{"dependencies.html":{}}}],["catch",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"classes/User.html":{}}}],["catch(exception",{"_index":1202,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":1523,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["catcherror((err",{"_index":1527,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["catcherror(async",{"_index":1560,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["cb",{"_index":1157,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["cb('error",{"_index":1169,"title":{},"body":{"injectables/FilesService.html":{}}}],["cb(null",{"_index":1160,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["certain",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chapter",{"_index":869,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["chaptersix",{"_index":460,"title":{},"body":{"classes/Application.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["chaptersix.kra",{"_index":1189,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["chaptersix[toupper(a",{"_index":1192,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["check",{"_index":65,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["checkapplicationdependencies",{"_index":540,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["checkapplicationdependencies(jobid",{"_index":545,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["checkorganizationexists",{"_index":1283,"title":{},"body":{"injectables/JobsService.html":{}}}],["checkorganizationexists(organizationid",{"_index":1288,"title":{},"body":{"injectables/JobsService.html":{}}}],["checks",{"_index":565,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["class",{"_index":62,"title":{"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"classes/Application.html":{},"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/PaginationQueryDto.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{}},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["class.return",{"_index":1323,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["classes",{"_index":232,"title":{},"body":{"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"classes/Application.html":{},"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/PaginationQueryDto.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":162,"title":{},"body":{"controllers/AppController.html":{}}}],["classtointercept",{"_index":1902,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classtype",{"_index":783,"title":{"interfaces/ClassType.html":{}},"body":{"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["closed",{"_index":284,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"miscellaneous/enumerations.html":{}}}],["cluster_applicantsmodule",{"_index":393,"title":{},"body":{"modules/ApplicantsModule.html":{},"overview.html":{}}}],["cluster_applicantsmodule_exports",{"_index":394,"title":{},"body":{"modules/ApplicantsModule.html":{},"overview.html":{}}}],["cluster_applicantsmodule_providers",{"_index":395,"title":{},"body":{"modules/ApplicantsModule.html":{},"overview.html":{}}}],["cluster_applicationsmodule",{"_index":533,"title":{},"body":{"modules/ApplicationsModule.html":{},"overview.html":{}}}],["cluster_applicationsmodule_exports",{"_index":534,"title":{},"body":{"modules/ApplicationsModule.html":{},"overview.html":{}}}],["cluster_applicationsmodule_providers",{"_index":535,"title":{},"body":{"modules/ApplicationsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":703,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":705,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":704,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":706,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1104,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1106,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1105,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_jobsmodule",{"_index":1276,"title":{},"body":{"modules/JobsModule.html":{},"overview.html":{}}}],["cluster_jobsmodule_exports",{"_index":1278,"title":{},"body":{"modules/JobsModule.html":{},"overview.html":{}}}],["cluster_jobsmodule_providers",{"_index":1277,"title":{},"body":{"modules/JobsModule.html":{},"overview.html":{}}}],["cluster_organizationsmodule",{"_index":1411,"title":{},"body":{"modules/OrganizationsModule.html":{},"overview.html":{}}}],["cluster_organizationsmodule_exports",{"_index":1413,"title":{},"body":{"modules/OrganizationsModule.html":{},"overview.html":{}}}],["cluster_organizationsmodule_providers",{"_index":1412,"title":{},"body":{"modules/OrganizationsModule.html":{},"overview.html":{}}}],["code",{"_index":915,"title":{},"body":{"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/Job.html":{},"injectables/JobsService.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{}}}],["common/common.module",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["common/decorators",{"_index":358,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["common/dto",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{}}}],["common/interceptors",{"_index":360,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["common/pipes",{"_index":356,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{}}}],["common/services",{"_index":1300,"title":{},"body":{"injectables/JobsService.html":{}}}],["common/services/abstract.service",{"_index":1422,"title":{},"body":{"injectables/OrganizationsService.html":{}}}],["commonmodule",{"_index":189,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":137,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{}}}],["compliance.pdf",{"_index":1145,"title":{},"body":{"injectables/FilesService.html":{}}}],["compodoc/compodoc",{"_index":1822,"title":{},"body":{"dependencies.html":{}}}],["conducting_interviews",{"_index":1887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["config",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.dbname",{"_index":971,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.dest",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["config.filefilter",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["config.jwtexpiresin",{"_index":722,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.jwtprivatekey",{"_index":719,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.limits",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["config.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["config.module.ts",{"_index":1022,"title":{},"body":{"modules/FeatureConfigModule.html":{}}}],["config.uri",{"_index":969,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config/configuration",{"_index":123,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["config/configuration/app.configuration.ts",{"_index":1796,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config/configuration/mongo.configuration.ts",{"_index":1797,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config/configuration/multer.configuration.ts",{"_index":1799,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config/feature",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/FeatureConfigModule.html":{}}}],["configmodule",{"_index":1023,"title":{},"body":{"modules/FeatureConfigModule.html":{}}}],["configmodule.forroot",{"_index":1026,"title":{},"body":{"modules/FeatureConfigModule.html":{}}}],["configtype",{"_index":1979,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configuration",{"_index":1025,"title":{},"body":{"modules/FeatureConfigModule.html":{}}}],["configure",{"_index":797,"title":{},"body":{"modules/CommonModule.html":{}}}],["configure(consumer",{"_index":798,"title":{},"body":{"modules/CommonModule.html":{}}}],["configureswagger",{"_index":1804,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configureswagger(appconfig",{"_index":1897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["confirm",{"_index":1640,"title":{},"body":{"classes/User.html":{}}}],["connection",{"_index":1535,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["console.log('hi",{"_index":1379,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["console.log(found.newfilename",{"_index":1154,"title":{},"body":{"injectables/FilesService.html":{}}}],["console.time('request",{"_index":1377,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["console.timeend('request",{"_index":1381,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["const",{"_index":78,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"classes/Applicant.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"injectables/FilesService.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"injectables/TransactionInterceptor.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectconnection",{"_index":1554,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["constructor(applicantmodel",{"_index":407,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["constructor(applicationmodel",{"_index":542,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["constructor(authservice",{"_index":1365,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(classtype",{"_index":1564,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["constructor(config",{"_index":1332,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(connection",{"_index":1540,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["constructor(entitymodel",{"_index":980,"title":{},"body":{"classes/EntityRepository.html":{}}}],["constructor(jobmodel",{"_index":1285,"title":{},"body":{"injectables/JobsService.html":{}}}],["constructor(model",{"_index":20,"title":{},"body":{"injectables/AbstractService.html":{}}}],["constructor(organizationmodel",{"_index":1417,"title":{},"body":{"injectables/OrganizationsService.html":{}}}],["constructor(private",{"_index":375,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"interfaces/ClassType.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"guards/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/OrganizationsController.html":{},"guards/PermissionsGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(protected",{"_index":63,"title":{},"body":{"injectables/AbstractService.html":{},"classes/EntityRepository.html":{}}}],["constructor(reflector",{"_index":104,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["constructor(usermodel",{"_index":1683,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["constructor(usersrepository",{"_index":1701,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":726,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":801,"title":{},"body":{"modules/CommonModule.html":{}}}],["consumer.apply(loggingmiddleware).forroutes",{"_index":809,"title":{},"body":{"modules/CommonModule.html":{}}}],["contact",{"_index":1357,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["content",{"_index":1095,"title":{},"body":{"controllers/FilesController.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":112,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/HttpExceptionFilter.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["context.gethandler",{"_index":134,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["context.getrequest",{"_index":1211,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.getresponse",{"_index":1210,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.switchtohttp().getrequest",{"_index":143,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/PermissionsGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["controller",{"_index":147,"title":{"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('applicants",{"_index":361,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["controller('applications",{"_index":519,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["controller('attachment/files",{"_index":1085,"title":{},"body":{"controllers/FilesController.html":{}}}],["controller('auth",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('jobs",{"_index":1265,"title":{},"body":{"controllers/JobsController.html":{}}}],["controller('organizations",{"_index":1402,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["controller('users",{"_index":1669,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":302,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["cookie",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"dependencies.html":{}}}],["cookie('jwt",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{}}}],["county",{"_index":1498,"title":{},"body":{"classes/Region.html":{},"classes/RegionDto.html":{}}}],["coverage",{"_index":1754,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crb",{"_index":1876,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["create",{"_index":13,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"classes/FutureCreateApplicationDto.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1268,"title":{},"body":{"controllers/JobsController.html":{},"controllers/UsersController.html":{}}}],["create(@uploadedfile",{"_index":176,"title":{},"body":{"controllers/AppController.html":{}}}],["create(createapplicantdto",{"_index":319,"title":{},"body":{"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{}}}],["create(createapplicationdto",{"_index":495,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{}}}],["create(createentitydata",{"_index":983,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["create(createjobdto",{"_index":1254,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{}}}],["create(createorganizationdto",{"_index":1390,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["create(createuserdto",{"_index":1659,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(dto",{"_index":29,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/OrganizationsService.html":{}}}],["create(file",{"_index":152,"title":{},"body":{"controllers/AppController.html":{}}}],["createapplicantdto",{"_index":320,"title":{"classes/CreateApplicantDto.html":{}},"body":{"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/CreateApplicantDto.html":{},"classes/UpdateApplicantDto.html":{},"coverage.html":{}}}],["createapplicantdto.nationalid",{"_index":440,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["createapplicationdto",{"_index":496,"title":{"classes/CreateApplicationDto.html":{}},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"coverage.html":{}}}],["created",{"_index":416,"title":{},"body":{"injectables/ApplicantsService.html":{},"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["created/uploaded",{"_index":1087,"title":{},"body":{"controllers/FilesController.html":{}}}],["created/uploaded'})@apipayloadtoolargeresponse()@useinterceptors(undefined",{"_index":1075,"title":{},"body":{"controllers/FilesController.html":{}}}],["createentitydata",{"_index":985,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["createfiledto",{"_index":892,"title":{"classes/CreateFileDto.html":{}},"body":{"classes/CreateFileDto.html":{},"injectables/FilesService.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["createjobdto",{"_index":912,"title":{"classes/CreateJobDto.html":{}},"body":{"classes/CreateJobDto.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"classes/UpdateJobDto.html":{},"coverage.html":{}}}],["createmockmodel",{"_index":1795,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createmockmodel(userstub",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createorganizationdto",{"_index":932,"title":{"classes/CreateOrganizationDto.html":{}},"body":{"classes/CreateOrganizationDto.html":{},"controllers/OrganizationsController.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["createorganizationdto.code",{"_index":1405,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["createparamdecorator((_data",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":570,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":639,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createuserdtostub",{"_index":1809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":1552,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["credentials",{"_index":1353,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["csrf",{"_index":1843,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":1228,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1229,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["curl",{"_index":1845,"title":{},"body":{"dependencies.html":{}}}],["currently",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{}}}],["custom",{"_index":1539,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["d",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":457,"title":{},"body":{"injectables/ApplicantsService.html":{},"interfaces/ClassType.html":{},"controllers/FilesController.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrganizationsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["data')@apioperation({summary",{"_index":1073,"title":{},"body":{"controllers/FilesController.html":{}}}],["database",{"_index":1534,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["database/database.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["database/entity.repository",{"_index":1695,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["databasemodule",{"_index":190,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":244,"title":{},"body":{"classes/Applicant.html":{},"injectables/AuthService.html":{},"classes/Job.html":{},"classes/User.html":{}}}],["date('2022",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":1221,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date().tostring",{"_index":1231,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(date.now",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{}}}],["date.now",{"_index":1627,"title":{},"body":{"classes/User.html":{}}}],["datepublished",{"_index":916,"title":{},"body":{"classes/CreateJobDto.html":{},"classes/Job.html":{}}}],["dbname",{"_index":970,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["dci",{"_index":1877,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decorator",{"_index":141,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":156,"title":{},"body":{"controllers/AppController.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"guards/JwtAuthGuard.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":53,"title":{},"body":{"injectables/AbstractService.html":{},"classes/Application.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationsService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":22,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["definition",{"_index":1705,"title":{},"body":{"injectables/UsersService.html":{}}}],["degree'})@isstring()@isnotempty",{"_index":1480,"title":{},"body":{"classes/QualificationDto.html":{}}}],["delete",{"_index":336,"title":{},"body":{"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":391,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":335,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/FilesController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["deleted",{"_index":456,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"controllers/FilesController.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["deletedcount",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletemany",{"_index":974,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["deletemany(entityfilterquery",{"_index":986,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["deletes",{"_index":425,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/UsersService.html":{}}}],["deleting",{"_index":1736,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":182,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":420,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["description",{"_index":296,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"controllers/FilesController.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"injectables/JobsService.html":{},"classes/Organization.html":{},"guards/PermissionsGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dest",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["destination",{"_index":895,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"injectables/FilesService.html":{}}}],["details",{"_index":415,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/UsersService.html":{}}}],["development",{"_index":1917,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":1047,"title":{},"body":{"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{}}}],["disabled",{"_index":1356,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["disabled/is",{"_index":1354,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["discriminatorkey",{"_index":1248,"title":{},"body":{"classes/Job.html":{},"classes/User.html":{}}}],["disposition",{"_index":1097,"title":{},"body":{"controllers/FilesController.html":{}}}],["divorced",{"_index":1891,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dob",{"_index":234,"title":{},"body":{"classes/Applicant.html":{},"classes/CreateApplicantDto.html":{},"classes/PersonDto.html":{}}}],["document",{"_index":278,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["document.entity",{"_index":487,"title":{},"body":{"classes/Application.html":{}}}],["document.entity.ts",{"_index":1042,"title":{},"body":{"classes/FileDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["document.entity.ts:13",{"_index":1044,"title":{},"body":{"classes/FileDocument.html":{}}}],["document.entity.ts:17",{"_index":1046,"title":{},"body":{"classes/FileDocument.html":{}}}],["document.entity.ts:9",{"_index":1045,"title":{},"body":{"classes/FileDocument.html":{}}}],["documentation",{"_index":1755,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":578,"title":{},"body":{"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["doe",{"_index":841,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["doe'})@isoptional()@isstring()@maxlength(50)@isnotempty",{"_index":1598,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":817,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["doe'})@isstring()@maxlength(50)@isnotempty",{"_index":950,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["doesn't",{"_index":1434,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["domain",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":1335,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["done(new",{"_index":1351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["done(null",{"_index":1360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dot",{"_index":435,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["dot.dot",{"_index":590,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/OrganizationsService.html":{}}}],["dot.dot(rest",{"_index":1310,"title":{},"body":{"injectables/JobsService.html":{}}}],["dot.dot(updateapplicantdto",{"_index":451,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["dot.dot(updateuserdto",{"_index":1734,"title":{},"body":{"injectables/UsersService.html":{}}}],["dot.keeparray",{"_index":449,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["dotenv",{"_index":1848,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1063,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["download(@param('fileid",{"_index":1091,"title":{},"body":{"controllers/FilesController.html":{}}}],["download(fileid",{"_index":1064,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["dto",{"_index":32,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/FilesService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/UpdateApplicationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.stub.ts",{"_index":1808,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["e.g",{"_index":428,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["e2e",{"_index":1927,"title":{},"body":{"index.html":{}}}],["eacc",{"_index":1879,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["each",{"_index":281,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["edms",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efd65519a93ad6aecec497f216222e82",{"_index":1141,"title":{},"body":{"injectables/FilesService.html":{}}}],["efficient",{"_index":1907,"title":{},"body":{"index.html":{}}}],["email",{"_index":743,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["embeded",{"_index":1049,"title":{},"body":{"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{}}}],["emitter",{"_index":1827,"title":{},"body":{"dependencies.html":{}}}],["encoding",{"_index":896,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"injectables/FilesService.html":{}}}],["end",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":1745,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["entered",{"_index":1641,"title":{},"body":{"classes/User.html":{}}}],["entities",{"_index":354,"title":{},"body":{"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"modules/FilesModule.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["entities/file.entity",{"_index":1083,"title":{},"body":{"controllers/FilesController.html":{}}}],["entityfilterquery",{"_index":989,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["entitymodel",{"_index":982,"title":{},"body":{"classes/EntityRepository.html":{}}}],["entityrepository",{"_index":972,"title":{"classes/EntityRepository.html":{}},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"coverage.html":{}}}],["entityrepository:17",{"_index":1692,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:26",{"_index":1693,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:30",{"_index":1694,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:43",{"_index":1689,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:47",{"_index":1690,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:51",{"_index":1691,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:60",{"_index":1686,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:64",{"_index":1687,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entityrepository:9",{"_index":1688,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["entitystub",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum",{"_index":844,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1867,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":871,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["enums",{"_index":839,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{},"classes/Job.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{}}}],["environment",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":767,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"classes/User.html":{}}}],["error",{"_index":1217,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["error(err",{"_index":1562,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["errorresponse",{"_index":1219,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["established",{"_index":1532,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["example",{"_index":698,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/RegionDto.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["exception",{"_index":1206,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":1200,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":1205,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1216,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1213,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1201,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":1215,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":307,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{}}}],["excludeprefixes",{"_index":371,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["exec",{"_index":86,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":110,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/ClassType.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["exist",{"_index":66,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/UsersService.html":{}}}],["existingapplicant",{"_index":452,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["exists",{"_index":74,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["expandvariables",{"_index":1029,"title":{},"body":{"modules/FeatureConfigModule.html":{}}}],["expires",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":721,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":60,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["exports",{"_index":397,"title":{},"body":{"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/FeatureConfigModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{}}}],["expose",{"_index":308,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PersonDto.html":{},"classes/UserSnippetDto.html":{}}}],["exposeall",{"_index":370,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["exposed",{"_index":313,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["express",{"_index":117,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":153,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesController.html":{}}}],["expressrequest",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["expressresponse",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{}}}],["ext",{"_index":1163,"title":{},"body":{"injectables/FilesService.html":{}}}],["extended",{"_index":1572,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["extends",{"_index":859,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationsService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"injectables/UsersRepository.html":{}}}],["extname",{"_index":1114,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(file.originalname",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extname(file.originalname).match(/\\.(pdf|jpg|jpeg|png|gif",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":1341,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":1347,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f.filename",{"_index":1150,"title":{},"body":{"injectables/FilesService.html":{}}}],["false",{"_index":93,"title":{},"body":{"injectables/AbstractService.html":{},"classes/Applicant.html":{},"controllers/ApplicantsController.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/FileDocument.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"injectables/JwtStrategy.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicationDto.html":{},"miscellaneous/variables.html":{}}}],["false})@apiquery({name",{"_index":330,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{}}}],["false})@isoptional()@isarray()@validatenested({each",{"_index":865,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{}}}],["false})@isoptional()@isboolean",{"_index":877,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["false})@isoptional()@isdatestring",{"_index":921,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["false})@isoptional()@ismongoid()@isnotempty",{"_index":928,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1507,"title":{},"body":{"classes/RegionDto.html":{}}}],["false})@prop(['undefined",{"_index":471,"title":{},"body":{"classes/Application.html":{}}}],["false})@prop({default",{"_index":476,"title":{},"body":{"classes/Application.html":{}}}],["false})@prop({maxlength",{"_index":480,"title":{},"body":{"classes/Application.html":{},"classes/Region.html":{}}}],["false})@prop({required",{"_index":1236,"title":{},"body":{"classes/Job.html":{}}}],["false})@prop({type",{"_index":261,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/Job.html":{}}}],["feature",{"_index":122,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["featureconfigmodule",{"_index":191,"title":{"modules/FeatureConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FeatureConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["female",{"_index":1882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fetch",{"_index":325,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":1708,"title":{},"body":{"injectables/UsersService.html":{}}}],["fieldname",{"_index":897,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"injectables/FilesService.html":{}}}],["fields",{"_index":414,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{"classes/File.html":{}},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file'})@apiresponse({status",{"_index":1066,"title":{},"body":{"controllers/FilesController.html":{}}}],["file.dto",{"_index":890,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/UpdateFileDto.html":{}}}],["file.dto.ts",{"_index":894,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["file.dto.ts:2",{"_index":905,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:3",{"_index":908,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:4",{"_index":904,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:5",{"_index":907,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:6",{"_index":903,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:7",{"_index":906,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:8",{"_index":909,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.dto.ts:9",{"_index":911,"title":{},"body":{"classes/CreateFileDto.html":{}}}],["file.name",{"_index":1109,"title":{},"body":{"modules/FilesModule.html":{}}}],["file]{@link",{"_index":1726,"title":{},"body":{"injectables/UsersService.html":{}}}],["filedocument",{"_index":473,"title":{"classes/FileDocument.html":{}},"body":{"classes/Application.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["filedocumentschema",{"_index":486,"title":{},"body":{"classes/Application.html":{},"classes/FileDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filedto",{"_index":862,"title":{"classes/FileDto.html":{}},"body":{"classes/CreateApplicationDto.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"coverage.html":{}}}],["filefilter",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["filefilter(req",{"_index":1156,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileid",{"_index":1069,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":166,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesController.html":{}}}],["filename",{"_index":898,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"injectables/FilesService.html":{}}}],["filename=\"${item.newfilename",{"_index":1099,"title":{},"body":{"controllers/FilesController.html":{}}}],["files",{"_index":461,"title":{},"body":{"classes/Application.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{}}}],["files.controller",{"_index":1108,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.service",{"_index":1078,"title":{},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{}}}],["files/files.module",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["fileschema",{"_index":1039,"title":{},"body":{"classes/File.html":{},"modules/FilesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filescontroller",{"_index":1060,"title":{"controllers/FilesController.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filesize",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filesmodule",{"_index":192,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1077,"title":{"injectables/FilesService.html":{}},"body":{"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filetypes",{"_index":1164,"title":{},"body":{"injectables/FilesService.html":{}}}],["filetypes.test(extname(file.originalname",{"_index":1166,"title":{},"body":{"injectables/FilesService.html":{}}}],["filetypes.test(file.mimetype",{"_index":1168,"title":{},"body":{"injectables/FilesService.html":{}}}],["filterquery",{"_index":987,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["finalize",{"_index":1545,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["find",{"_index":443,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"injectables/JobsService.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["find(entityfilterquery",{"_index":991,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["findall",{"_index":14,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["findall(@query",{"_index":1270,"title":{},"body":{"controllers/JobsController.html":{}}}],["findall(paginationquery",{"_index":35,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{}}}],["findallapplicantapplications",{"_index":493,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{}}}],["findallapplicantapplications(applicantid",{"_index":501,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{}}}],["findalljobapplications",{"_index":494,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{}}}],["findalljobapplications(jobid",{"_index":506,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{}}}],["findallorganizationjobs",{"_index":1284,"title":{},"body":{"injectables/JobsService.html":{}}}],["findallorganizationjobs(organizationid",{"_index":1291,"title":{},"body":{"injectables/JobsService.html":{}}}],["findbyid",{"_index":975,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["findbyid(id",{"_index":993,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["findbyidandremove",{"_index":976,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["findbyidandremove(id",{"_index":592,"title":{},"body":{"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["findbyidandupdate",{"_index":977,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["findbyidandupdate(id",{"_index":89,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["findone",{"_index":15,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["findone(@param('id",{"_index":1272,"title":{},"body":{"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["findone(entityfilterquery",{"_index":999,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["findone(id",{"_index":39,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findoneandremove",{"_index":978,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["findoneandremove(entityfilterquery",{"_index":1002,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["findoneandupdate",{"_index":979,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["findoneandupdate(entityfilterquery",{"_index":1004,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["findonebyemail",{"_index":1699,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":1712,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":1700,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1715,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":42,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["first",{"_index":1482,"title":{},"body":{"classes/QualificationDto.html":{}}}],["firstname",{"_index":943,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["fn",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":560,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["follows",{"_index":1740,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["forbiden",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":46,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":1905,"title":{},"body":{"index.html":{}}}],["front",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{}}}],["fullname",{"_index":235,"title":{},"body":{"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"injectables/AuthService.html":{},"classes/CreateApplicantDto.html":{},"classes/PersonDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{}}}],["function",{"_index":1375,"title":{},"body":{"injectables/LoggingMiddleware.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1623,"title":{"miscellaneous/functions.html":{}},"body":{"classes/User.html":{},"miscellaneous/functions.html":{}}}],["future",{"_index":588,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["futurecreateapplicationdto",{"_index":1173,"title":{"classes/FutureCreateApplicationDto.html":{}},"body":{"classes/FutureCreateApplicationDto.html":{},"coverage.html":{}}}],["futureupdateapplicationdto",{"_index":1193,"title":{"classes/FutureUpdateApplicationDto.html":{}},"body":{"classes/FutureUpdateApplicationDto.html":{},"coverage.html":{}}}],["gender",{"_index":236,"title":{},"body":{"classes/Applicant.html":{},"classes/CreateApplicantDto.html":{},"classes/PersonDto.html":{},"miscellaneous/enumerations.html":{}}}],["gender.male",{"_index":845,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["generate",{"_index":1051,"title":{},"body":{"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{}}}],["generic",{"_index":298,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["get(':fileid",{"_index":1090,"title":{},"body":{"controllers/FilesController.html":{}}}],["get(':id",{"_index":386,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":332,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["get('applicant/:applicantid",{"_index":527,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["get('applicant/:applicantid')@apioperation({summary",{"_index":502,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["get('job/:jobid",{"_index":530,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["get('job/:jobid')@apioperation({summary",{"_index":507,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["get('profile",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile')@apioperation({summary",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('protected",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('public",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('test",{"_index":376,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["get('test')@apiokresponse({type",{"_index":338,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["get()@apioperation({summary",{"_index":324,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["getdocuments",{"_index":1183,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["gethello",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["getnameanddob",{"_index":1461,"title":{},"body":{"classes/PersonDto.html":{}}}],["getprofile",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@req",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{}}}],["getters",{"_index":1621,"title":{},"body":{"classes/User.html":{}}}],["getting",{"_index":1440,"title":{"index.html":{}},"body":{"guards/PermissionsGuard.html":{}}}],["getuser",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuser(@request",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuser(req",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{}}}],["given",{"_index":87,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["globalprefix",{"_index":1900,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grade",{"_index":1469,"title":{},"body":{"classes/Qualification.html":{},"classes/QualificationDto.html":{}}}],["graph",{"_index":1956,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1933,"title":{},"body":{"index.html":{}}}],["guard",{"_index":96,"title":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{}}}],["guards",{"_index":98,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"modules/CommonModule.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"overview.html":{}}}],["guest",{"_index":1894,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["handle",{"_index":793,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{}}}],["handler",{"_index":1324,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["hash",{"_index":754,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["hashmap",{"_index":2017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashmap[d",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["haspermissions",{"_index":1445,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["header",{"_index":136,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["helb",{"_index":1878,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":177,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["helmet",{"_index":1850,"title":{},"body":{"dependencies.html":{}}}],["hence",{"_index":676,"title":{},"body":{"controllers/AuthController.html":{}}}],["here",{"_index":1944,"title":{},"body":{"index.html":{}}}],["honors",{"_index":1495,"title":{},"body":{"classes/QualificationDto.html":{}}}],["honors'})@isstring()@isnotempty",{"_index":1483,"title":{},"body":{"classes/QualificationDto.html":{}}}],["host",{"_index":1203,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1209,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":2009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@post('login')@apioperation({summary",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@post('logout')@apioperation({summary",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1207,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1198,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpexeptionfilter",{"_index":1226,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httponly",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus",{"_index":1208,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":1214,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["id",{"_index":45,"title":{},"body":{"injectables/AbstractService.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["id's",{"_index":566,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["id.pipe.ts",{"_index":1739,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{},"coverage.html":{}}}],["id.pipe.ts:17",{"_index":1743,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["identifier",{"_index":1756,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1344,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image/jpeg",{"_index":1125,"title":{},"body":{"injectables/FilesService.html":{}}}],["image/jpg",{"_index":1158,"title":{},"body":{"injectables/FilesService.html":{}}}],["image/png'].includes(file.mimetype",{"_index":1159,"title":{},"body":{"injectables/FilesService.html":{}}}],["images",{"_index":1170,"title":{},"body":{"injectables/FilesService.html":{}}}],["implementation",{"_index":595,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["implements",{"_index":124,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/HttpExceptionFilter.html":{},"guards/JwtAuthGuard.html":{},"injectables/LoggingMiddleware.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["import",{"_index":55,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["imports",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/FeatureConfigModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1899,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["information",{"_index":417,"title":{},"body":{"injectables/ApplicantsService.html":{},"classes/QualificationDto.html":{}}}],["inherited",{"_index":874,"title":{},"body":{"classes/CreateApplicationDto.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersRepository.html":{}}}],["inject",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/TransactionInterceptor.html":{}}}],["inject(appconfiguration.key",{"_index":2015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject(mongoconfiguration.key",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject(multerconfiguration.key",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AbstractService.html":{},"injectables/AppService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"injectables/OrganizationsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"injectables/AppService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"injectables/FilesService.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/AppService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"injectables/OrganizationsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"overview.html":{}}}],["injectappconfig",{"_index":121,"title":{},"body":{"guards/ApiKeyGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["injectconnection",{"_index":1544,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["injectmodel",{"_index":433,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersRepository.html":{}}}],["injectmodel(applicant.name",{"_index":436,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{}}}],["injectmodel(application.name",{"_index":437,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{}}}],["injectmodel(job.name",{"_index":564,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["injectmodel(organization.name",{"_index":1301,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["injectmodel(user.name",{"_index":1696,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["injectmongoconfig",{"_index":1798,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["injectmulterconfig",{"_index":1800,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["installation",{"_index":1914,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1916,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1533,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"injectables/UsersService.html":{}}}],["instanceof",{"_index":1212,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TimeoutInterceptor.html":{}}}],["institution",{"_index":1470,"title":{},"body":{"classes/Qualification.html":{},"classes/QualificationDto.html":{}}}],["intercept",{"_index":1518,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["intercept(context",{"_index":791,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["interceptor",{"_index":299,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["interface",{"_index":782,"title":{"interfaces/ClassType.html":{},"interfaces/RequestWithUser.html":{}},"body":{"interfaces/ClassType.html":{},"interfaces/RequestWithUser.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":784,"title":{},"body":{"interfaces/ClassType.html":{},"interfaces/RequestWithUser.html":{},"overview.html":{}}}],["intern",{"_index":882,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["internal",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":119,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isactive",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":328,"title":{},"body":{"controllers/ApplicantsController.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"classes/PersonDto.html":{},"classes/UpdateApplicationDto.html":{},"controllers/UsersController.html":{}}}],["isboolean",{"_index":1185,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UserSnippetDto.html":{}}}],["isdatestring",{"_index":836,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateJobDto.html":{},"classes/PersonDto.html":{},"classes/UserSnippetDto.html":{}}}],["isdatestring()@isnotempty",{"_index":1450,"title":{},"body":{"classes/PersonDto.html":{}}}],["isdisabled",{"_index":462,"title":{},"body":{"classes/Application.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["isemail",{"_index":695,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSnippetDto.html":{}}}],["isenum",{"_index":837,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UserSnippetDto.html":{}}}],["isenum(chaptersix",{"_index":1190,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["isenum(gender",{"_index":846,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["isenum(maritalstatus",{"_index":850,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["isenum(role",{"_index":960,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserSnippetDto.html":{}}}],["isglobal",{"_index":1027,"title":{},"body":{"modules/FeatureConfigModule.html":{}}}],["ismongoid",{"_index":309,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UserSnippetDto.html":{}}}],["isnotempty",{"_index":696,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PersonDto.html":{},"classes/QualificationDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnumber",{"_index":930,"title":{},"body":{"classes/CreateJobDto.html":{},"classes/QualificationDto.html":{}}}],["isoptional",{"_index":838,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PersonDto.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isarray()@arraynotempty()@validatenested({each",{"_index":1456,"title":{},"body":{"classes/PersonDto.html":{}}}],["isoptional()@ispositive",{"_index":1426,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":931,"title":{},"body":{"classes/CreateJobDto.html":{},"classes/PaginationQueryDto.html":{},"classes/QualificationDto.html":{}}}],["ispublic",{"_index":132,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":310,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PersonDto.html":{},"classes/QualificationDto.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSnippetDto.html":{}}}],["isstring()@isnotempty",{"_index":1452,"title":{},"body":{"classes/PersonDto.html":{}}}],["isstring({each",{"_index":1458,"title":{},"body":{"classes/PersonDto.html":{}}}],["it's",{"_index":282,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{}}}],["item",{"_index":1092,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["item.fieldname.touppercase()}${extname",{"_index":1152,"title":{},"body":{"injectables/FilesService.html":{}}}],["item.mimetype",{"_index":1096,"title":{},"body":{"controllers/FilesController.html":{}}}],["item.originalname",{"_index":1153,"title":{},"body":{"injectables/FilesService.html":{}}}],["jest",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue([entitystub",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue([userstub",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(entitystub",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockresolvedvalue(userstub",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn().mockreturnvalue",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.mock",{"_index":1983,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["job",{"_index":463,"title":{"classes/Job.html":{}},"body":{"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"coverage.html":{}}}],["job'})@apicreatedresponse({type",{"_index":1255,"title":{},"body":{"controllers/JobsController.html":{}}}],["job'})@apiokresponse({type",{"_index":509,"title":{},"body":{"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{}}}],["job._id",{"_index":573,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{}}}],["job.dto",{"_index":1586,"title":{},"body":{"classes/UpdateJobDto.html":{}}}],["job.dto.ts",{"_index":914,"title":{},"body":{"classes/CreateJobDto.html":{},"classes/UpdateJobDto.html":{},"coverage.html":{}}}],["job.dto.ts:16",{"_index":920,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["job.dto.ts:21",{"_index":925,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["job.dto.ts:26",{"_index":924,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["job.dto.ts:32",{"_index":927,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["job.dto.ts:38",{"_index":929,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["job.dto.ts:43",{"_index":922,"title":{},"body":{"classes/CreateJobDto.html":{}}}],["job.id",{"_index":574,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["job.name",{"_index":538,"title":{},"body":{"modules/ApplicationsModule.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"modules/OrganizationsModule.html":{}}}],["jobdocument",{"_index":563,"title":{},"body":{"injectables/ApplicationsService.html":{},"classes/Job.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"miscellaneous/typealiases.html":{}}}],["jobexists",{"_index":1304,"title":{},"body":{"injectables/JobsService.html":{}}}],["jobid",{"_index":511,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{}}}],["jobmodel",{"_index":543,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["jobs",{"_index":1253,"title":{},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["jobs'})@apiokresponse({type",{"_index":1257,"title":{},"body":{"controllers/JobsController.html":{}}}],["jobs.controller",{"_index":1280,"title":{},"body":{"modules/JobsModule.html":{}}}],["jobs.service",{"_index":1264,"title":{},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{}}}],["jobs/entities",{"_index":489,"title":{},"body":{"classes/Application.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{}}}],["jobs/jobs.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["jobschema",{"_index":478,"title":{},"body":{"classes/Application.html":{},"modules/ApplicationsModule.html":{},"classes/Job.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jobscontroller",{"_index":1251,"title":{"controllers/JobsController.html":{}},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{},"coverage.html":{}}}],["jobsmodule",{"_index":193,"title":{"modules/JobsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JobsModule.html":{},"modules.html":{},"overview.html":{}}}],["jobsservice",{"_index":1263,"title":{"injectables/JobsService.html":{}},"body":{"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"coverage.html":{},"overview.html":{}}}],["jobstatus",{"_index":1245,"title":{},"body":{"classes/Job.html":{},"miscellaneous/enumerations.html":{}}}],["jobstatus.not_published",{"_index":1249,"title":{},"body":{"classes/Job.html":{}}}],["john",{"_index":816,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["john'})@isoptional()@isstring()@maxlength(50)@isnotempty",{"_index":1596,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["john'})@isstring()@maxlength(50)@isnotempty",{"_index":948,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@gmail.com",{"_index":699,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["johndoe@gmail.com'})@isemail()@isnotempty()@maxlength(50",{"_index":693,"title":{},"body":{"classes/AuthDto.html":{}}}],["johndoe@gmail.com'})@isemail()@maxlength(50)@isnotempty",{"_index":946,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["johndoe@gmail.com'})@isoptional()@isemail()@maxlength(50)@isnotempty",{"_index":1594,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["johndoe@gmail.com'})@prop({maxlength",{"_index":1604,"title":{},"body":{"classes/User.html":{}}}],["joi",{"_index":1852,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1940,"title":{},"body":{"index.html":{}}}],["jpeg|jpg|png|gif",{"_index":1165,"title":{},"body":{"injectables/FilesService.html":{}}}],["json.stringify(errorresponse",{"_index":1225,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jwt",{"_index":739,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":1315,"title":{"guards/JwtAuthGuard.html":{}},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtexpiresin",{"_index":2004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":1346,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":712,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":716,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":735,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["jwtprivatekey",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":728,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":707,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1327,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["key.guard.ts",{"_index":100,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["key.guard.ts:18",{"_index":108,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["key.guard.ts:25",{"_index":111,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["keys",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kra",{"_index":1122,"title":{},"body":{"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{}}}],["last",{"_index":758,"title":{},"body":{"injectables/AuthService.html":{}}}],["lastaccessedon",{"_index":1601,"title":{},"body":{"classes/User.html":{},"classes/UserSnippetDto.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":944,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1952,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1931,"title":{},"body":{"index.html":{}}}],["limit",{"_index":79,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"classes/PaginationQueryDto.html":{}}}],["limit(limit",{"_index":582,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["limits",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":326,"title":{},"body":{"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"classes/UpdateApplicationDto.html":{},"injectables/UsersService.html":{}}}],["list.find((f",{"_index":1149,"title":{},"body":{"injectables/FilesService.html":{}}}],["literal",{"_index":1981,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":1028,"title":{},"body":{"modules/FeatureConfigModule.html":{}}}],["local",{"_index":1370,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":649,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localhost",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":708,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lodash",{"_index":745,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"dependencies.html":{}}}],["log",{"_index":1723,"title":{},"body":{"injectables/UsersService.html":{}}}],["logged",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logger",{"_index":102,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger(apikeyguard.name",{"_index":125,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["logger(applicantscontroller.name",{"_index":374,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["logger(applicationsservice.name",{"_index":562,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["logger(authcontroller.name",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{}}}],["logger(authservice.name",{"_index":744,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger(jobsservice.name",{"_index":1297,"title":{},"body":{"injectables/JobsService.html":{}}}],["logger(jwtstrategy.name",{"_index":1338,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger(localstrategy.name",{"_index":1369,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["logger(userscontroller.name",{"_index":1673,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(usersservice.name",{"_index":1722,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger.error",{"_index":1223,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["loggingmiddleware",{"_index":804,"title":{"injectables/LoggingMiddleware.html":{}},"body":{"modules/CommonModule.html":{},"injectables/LoggingMiddleware.html":{},"coverage.html":{}}}],["logic",{"_index":1551,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["login",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login'})@public()@useguards(localauthguard",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":731,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(response",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{}}}],["lowercase",{"_index":1605,"title":{},"body":{"classes/User.html":{}}}],["luchacha",{"_index":1949,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["luchacha.s@gmail.com",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":551,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["makes",{"_index":265,"title":{},"body":{"classes/Applicant.html":{}}}],["male",{"_index":1881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["managing",{"_index":1553,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"injectables/UsersService.html":{}}}],["map",{"_index":788,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["map((d",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map((data",{"_index":1753,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["mapkeys",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapkeys.includes(d",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marital",{"_index":851,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["maritalstatus",{"_index":237,"title":{},"body":{"classes/Applicant.html":{},"classes/CreateApplicantDto.html":{},"miscellaneous/enumerations.html":{}}}],["maritalstatus.single",{"_index":849,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["mark",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":1329,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["married",{"_index":1890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["matching",{"_index":95,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1241,"title":{},"body":{"classes/Job.html":{}}}],["maxlength",{"_index":257,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/Region.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["maxlength(50",{"_index":700,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["mb",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meets",{"_index":1444,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["memberof",{"_index":438,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/AuthService.html":{}}}],["message",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/UpdateApplicationDto.html":{}}}],["messages",{"_index":1724,"title":{},"body":{"injectables/UsersService.html":{}}}],["metadata",{"_index":130,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"injectables/ValidateObjectIdPipe.html":{},"dependencies.html":{}}}],["method",{"_index":1622,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":11,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["middleware",{"_index":805,"title":{},"body":{"modules/CommonModule.html":{},"injectables/LoggingMiddleware.html":{}}}],["middlewareconsumer",{"_index":799,"title":{},"body":{"modules/CommonModule.html":{}}}],["mime",{"_index":1167,"title":{},"body":{"injectables/FilesService.html":{}}}],["mimetype",{"_index":899,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"injectables/FilesService.html":{}}}],["minlength",{"_index":697,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":702,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1866,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1930,"title":{},"body":{"index.html":{}}}],["mockimplementation((entityfilterquery",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mockmodel",{"_index":1970,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1921,"title":{},"body":{"index.html":{}}}],["model",{"_index":21,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["moderator",{"_index":1893,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":179,"title":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/FeatureConfigModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/FeatureConfigModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":181,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/FeatureConfigModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo's",{"_index":1048,"title":{},"body":{"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{}}}],["mongoconfiguration",{"_index":964,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/FeatureConfigModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mongoconfiguration.key",{"_index":967,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongodb",{"_index":1007,"title":{},"body":{"classes/EntityRepository.html":{}}}],["mongodb://localhost:27017",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose",{"_index":59,"title":{},"body":{"injectables/AbstractService.html":{},"classes/Applicant.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/Job.html":{},"injectables/JobsService.html":{},"classes/Organization.html":{},"injectables/OrganizationsService.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"injectables/TransactionInterceptor.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/ValidateObjectIdPipe.html":{},"dependencies.html":{}}}],["mongoose.clientsession",{"_index":1984,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mongoose.types.objectid.isvalid(value",{"_index":1748,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["mongooseclassserializerinterceptor",{"_index":359,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["mongooseclassserializerinterceptor(classtointercept",{"_index":1901,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongooseclassserializerinterceptor(user",{"_index":1671,"title":{},"body":{"controllers/UsersController.html":{}}}],["mongooseclientsession",{"_index":1549,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["mongoosemodule",{"_index":398,"title":{},"body":{"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":403,"title":{},"body":{"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":966,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["more",{"_index":1943,"title":{},"body":{"index.html":{}}}],["multer",{"_index":596,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["multerconfiguration",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"modules/FeatureConfigModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["multerconfiguration.key",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.registerasync",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["nairobi",{"_index":1188,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/QualificationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["nairobi'})@isoptional()@isstring",{"_index":884,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["nairobi'})@isstring()@isnotempty",{"_index":1485,"title":{},"body":{"classes/QualificationDto.html":{}}}],["nambale",{"_index":1509,"title":{},"body":{"classes/RegionDto.html":{}}}],["name",{"_index":26,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{}}}],["nameanddob",{"_index":1449,"title":{},"body":{"classes/PersonDto.html":{}}}],["national",{"_index":412,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["nationalid",{"_index":238,"title":{},"body":{"classes/Applicant.html":{},"injectables/ApplicantsService.html":{},"classes/CreateApplicantDto.html":{},"classes/PersonDto.html":{}}}],["need",{"_index":1531,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["needs",{"_index":594,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["nest",{"_index":1911,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["nested",{"_index":447,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["nestinterceptor",{"_index":787,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/FeatureConfigModule.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":1024,"title":{},"body":{"modules/FeatureConfigModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":115,"title":{},"body":{"guards/ApiKeyGuard.html":{},"modules/CommonModule.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":1826,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":713,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1196,"title":{},"body":{"classes/FutureUpdateApplicationDto.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateOrganizationDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":275,"title":{},"body":{"classes/Applicant.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"modules/DatabaseModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"modules/FilesModule.html":{},"classes/Job.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/Organization.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"injectables/TransactionInterceptor.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":711,"title":{},"body":{"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/FilesController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":1831,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1834,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":1836,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":1376,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["nestmodule",{"_index":802,"title":{},"body":{"modules/CommonModule.html":{}}}],["new",{"_index":70,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"classes/EntityRepository.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationsService.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newfilename",{"_index":1151,"title":{},"body":{"injectables/FilesService.html":{}}}],["next",{"_index":792,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/LoggingMiddleware.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["next(err",{"_index":1637,"title":{},"body":{"classes/User.html":{}}}],["next.handle().pipe",{"_index":1525,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["node.js",{"_index":1904,"title":{},"body":{"index.html":{}}}],["noofvacancies",{"_index":917,"title":{},"body":{"classes/CreateJobDto.html":{},"classes/Job.html":{}}}],["not_published",{"_index":1884,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["note",{"_index":1536,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["notfoundexception",{"_index":57,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('file",{"_index":1155,"title":{},"body":{"injectables/FilesService.html":{}}}],["notfoundexception(`user",{"_index":1733,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1915,"title":{},"body":{"index.html":{}}}],["number",{"_index":910,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/File.html":{},"classes/Job.html":{},"classes/PaginationQueryDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.app_port",{"_index":2012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(process.env.multer_file_size",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":269,"title":{},"body":{"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["object.keys",{"_index":853,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["object.keys(gender",{"_index":848,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["object.keys(hashmap).map((d",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(role",{"_index":961,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["objectid",{"_index":241,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["observable",{"_index":114,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/ClassType.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["offset",{"_index":80,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"classes/PaginationQueryDto.html":{}}}],["omittype",{"_index":1194,"title":{},"body":{"classes/FutureUpdateApplicationDto.html":{}}}],["omittype(createapplicationdto",{"_index":1197,"title":{},"body":{"classes/FutureUpdateApplicationDto.html":{}}}],["once",{"_index":738,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":847,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"guards/PermissionsGuard.html":{},"classes/UpdateApplicationDto.html":{}}}],["open",{"_index":283,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"index.html":{}}}],["optimistically",{"_index":432,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["optional",{"_index":28,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{}}}],["organization",{"_index":1233,"title":{"classes/Organization.html":{}},"body":{"classes/Job.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"coverage.html":{}}}],["organization'})@apicreatedresponse({type",{"_index":1391,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["organization'})@apiokresponse({type",{"_index":1395,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["organization._id",{"_index":1314,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["organization.dto",{"_index":1589,"title":{},"body":{"classes/UpdateOrganizationDto.html":{}}}],["organization.dto.ts",{"_index":934,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["organization.dto.ts:13",{"_index":939,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:18",{"_index":938,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:8",{"_index":936,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.name",{"_index":1281,"title":{},"body":{"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{}}}],["organizationdocument",{"_index":1299,"title":{},"body":{"injectables/JobsService.html":{},"classes/Organization.html":{},"injectables/OrganizationsService.html":{},"miscellaneous/typealiases.html":{}}}],["organizationid",{"_index":918,"title":{},"body":{"classes/CreateJobDto.html":{},"injectables/JobsService.html":{}}}],["organizationmodel",{"_index":1286,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["organizations",{"_index":1389,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["organizations'})@apiokresponse({type",{"_index":1393,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["organizations.controller",{"_index":1415,"title":{},"body":{"modules/OrganizationsModule.html":{}}}],["organizations.service",{"_index":1401,"title":{},"body":{"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{}}}],["organizations/entities",{"_index":1247,"title":{},"body":{"classes/Job.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{}}}],["organizations/organizations.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["organizationschema",{"_index":1243,"title":{},"body":{"classes/Job.html":{},"modules/JobsModule.html":{},"classes/Organization.html":{},"modules/OrganizationsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["organizationscontroller",{"_index":1387,"title":{"controllers/OrganizationsController.html":{}},"body":{"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"coverage.html":{}}}],["organizationsmodule",{"_index":194,"title":{"modules/OrganizationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrganizationsModule.html":{},"modules.html":{},"overview.html":{}}}],["organizationsservice",{"_index":1400,"title":{"injectables/OrganizationsService.html":{}},"body":{"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"coverage.html":{},"overview.html":{}}}],["originalname",{"_index":900,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"injectables/FilesService.html":{}}}],["out",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"overview.html":{}}}],["overview",{"_index":1958,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1819,"title":{"dependencies.html":{}},"body":{}}],["paginated",{"_index":419,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["paginationquery",{"_index":38,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{}}}],["paginationquerydto",{"_index":36,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paginationquerydto(optional",{"_index":422,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{}}}],["param",{"_index":82,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"guards/PermissionsGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('applicantid",{"_index":528,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["param('id",{"_index":387,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["param('jobid",{"_index":531,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["param.decorator.ts",{"_index":1786,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":1746,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["parameterdecorator",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":24,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":1841,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":1982,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["partialtype",{"_index":1195,"title":{},"body":{"classes/FutureUpdateApplicationDto.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{}}}],["partialtype(createapplicantdto",{"_index":1569,"title":{},"body":{"classes/UpdateApplicantDto.html":{}}}],["partialtype(createfiledto",{"_index":1584,"title":{},"body":{"classes/UpdateFileDto.html":{}}}],["partialtype(createjobdto",{"_index":1587,"title":{},"body":{"classes/UpdateJobDto.html":{}}}],["partialtype(createorganizationdto",{"_index":1590,"title":{},"body":{"classes/UpdateOrganizationDto.html":{}}}],["passed",{"_index":421,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["passport",{"_index":1342,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"dependencies.html":{}}}],["passport's",{"_index":1326,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["passportmodule",{"_index":710,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1340,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1343,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":688,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["password_confirm",{"_index":945,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":345,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":389,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":343,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":901,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{}}}],["payload",{"_index":740,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.iat",{"_index":1361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1359,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.type.ts",{"_index":1969,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["permission",{"_index":1431,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["permissions",{"_index":1435,"title":{},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionsguard",{"_index":1429,"title":{"guards/PermissionsGuard.html":{}},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["person",{"_index":154,"title":{},"body":{"controllers/AppController.html":{}}}],["persondto",{"_index":155,"title":{"classes/PersonDto.html":{}},"body":{"controllers/AppController.html":{},"classes/PersonDto.html":{},"coverage.html":{}}}],["pipe(map((data",{"_index":794,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{}}}],["pipetransform",{"_index":1744,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["plaintoclass",{"_index":301,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{}}}],["plaintoclass(this.classtype",{"_index":795,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{}}}],["please",{"_index":1941,"title":{},"body":{"index.html":{}}}],["port",{"_index":2011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["position",{"_index":879,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["post",{"_index":163,"title":{},"body":{"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@apioperation({summary",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apiconsumes('multipart/form",{"_index":1072,"title":{},"body":{"controllers/FilesController.html":{}}}],["post()@apioperation({summary",{"_index":321,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["ppr",{"_index":464,"title":{},"body":{"classes/Application.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["precaution",{"_index":589,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["prefix",{"_index":316,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["prepare",{"_index":446,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["prepared",{"_index":1441,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["present",{"_index":1436,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["principle",{"_index":285,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{}}}],["private",{"_index":101,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationsService.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["process.env.api_key",{"_index":146,"title":{},"body":{"guards/ApiKeyGuard.html":{},"miscellaneous/variables.html":{}}}],["process.env.app_host",{"_index":2010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.app_protocol",{"_index":2008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_expires_in",{"_index":2005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_private_key",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongo_db_name",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongo_uri",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.multer_file_upload_path",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1923,"title":{},"body":{"index.html":{}}}],["profile",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{}}}],["progressive",{"_index":880,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"index.html":{}}}],["project",{"_index":1932,"title":{},"body":{"index.html":{}}}],["projection",{"_index":1000,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":34,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"injectables/FilesService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":272,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/FileDocument.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/User.html":{}}}],["prop({maxlength",{"_index":1607,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":1615,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":8,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"classes/Application.html":{},"injectables/ApplicationsService.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Organization.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"injectables/UsersService.html":{}}}],["protect",{"_index":139,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{}}}],["protected",{"_index":9,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/AuthController.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["protocol",{"_index":2007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":806,"title":{},"body":{"modules/CommonModule.html":{}}}],["providers",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/FeatureConfigModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":142,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FilesController.html":{},"guards/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get",{"_index":159,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@get(':fileid')@apioperation({summary",{"_index":1065,"title":{},"body":{"controllers/FilesController.html":{}}}],["public()@get('public",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post()@useinterceptors(undefined)@useinterceptors(classserializerinterceptor",{"_index":157,"title":{},"body":{"controllers/AppController.html":{}}}],["qualification",{"_index":482,"title":{"classes/Qualification.html":{}},"body":{"classes/Application.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"coverage.html":{}}}],["qualification.dto",{"_index":1578,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["qualification.entity",{"_index":485,"title":{},"body":{"classes/Application.html":{}}}],["qualificationdto",{"_index":886,"title":{"classes/QualificationDto.html":{}},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PersonDto.html":{},"classes/QualificationDto.html":{},"classes/UpdateApplicationDto.html":{},"coverage.html":{}}}],["qualifications",{"_index":465,"title":{},"body":{"classes/Application.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["qualificationschema",{"_index":484,"title":{},"body":{"classes/Application.html":{},"classes/Qualification.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":346,"title":{},"body":{"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["query('id",{"_index":1747,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["query.dto.ts",{"_index":1425,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":1428,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:6",{"_index":1427,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["read",{"_index":1942,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":64,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/EntityRepository.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/QualificationDto.html":{},"classes/RegionDto.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["really",{"_index":586,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["record",{"_index":44,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"classes/EntityRepository.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersRepository.html":{}}}],["recorded",{"_index":577,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["recordexists",{"_index":16,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["recordexists(id",{"_index":47,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["recordname",{"_index":10,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["records",{"_index":427,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["ref",{"_index":30,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{}}}],["reflect",{"_index":1858,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":105,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["region",{"_index":239,"title":{"classes/Region.html":{}},"body":{"classes/Applicant.html":{},"classes/CreateApplicantDto.html":{},"classes/Region.html":{},"coverage.html":{}}}],["region.dto",{"_index":840,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["region.entity",{"_index":280,"title":{},"body":{"classes/Applicant.html":{}}}],["regiondto",{"_index":827,"title":{"classes/RegionDto.html":{}},"body":{"classes/CreateApplicantDto.html":{},"classes/RegionDto.html":{},"coverage.html":{}}}],["regiondto})@isoptional()@type(undefined",{"_index":828,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["regionschema",{"_index":279,"title":{},"body":{"classes/Applicant.html":{},"classes/Region.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["regionschema})@type(undefined",{"_index":262,"title":{},"body":{"classes/Applicant.html":{}}}],["register",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["register(createuserdto",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registeras('app",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('mongo",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras('multer",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":1727,"title":{},"body":{"injectables/UsersService.html":{}}}],["registration",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration'})@public",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{}}}],["related",{"_index":426,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":17,"title":{},"body":{"injectables/AbstractService.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["remove(@param('id",{"_index":1102,"title":{},"body":{"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":49,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removes",{"_index":1172,"title":{},"body":{"injectables/FilesService.html":{}}}],["repository",{"_index":1006,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoggingMiddleware.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.transaction",{"_index":1557,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":116,"title":{},"body":{"guards/ApiKeyGuard.html":{},"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["request.header('authorization",{"_index":145,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["request.method",{"_index":1224,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.url",{"_index":1222,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request?.cookies['jwt",{"_index":1348,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["requesttimeoutexception",{"_index":1520,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["requestwithuser",{"_index":1513,"title":{"interfaces/RequestWithUser.html":{}},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":246,"title":{},"body":{"classes/Applicant.html":{},"controllers/ApplicantsController.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/FileDocument.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"classes/Organization.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["requires",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"injectables/LoggingMiddleware.html":{}}}],["res.on('finish",{"_index":1380,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["res.sendfile(fileid",{"_index":1100,"title":{},"body":{"controllers/FilesController.html":{}}}],["res.set",{"_index":1094,"title":{},"body":{"controllers/FilesController.html":{}}}],["reset",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"overview.html":{}}}],["response",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FilesController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{}}}],["response.clearcookie('jwt",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.interceptor.ts",{"_index":1751,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:12",{"_index":1752,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{}}}],["response.status(status).json",{"_index":1230,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).json(errorresponse",{"_index":1227,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsibility",{"_index":881,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["rest",{"_index":585,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"injectables/JobsService.html":{}}}],["result",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"injectables/UsersService.html":{}}}],["result.deletedcount",{"_index":1020,"title":{},"body":{"classes/EntityRepository.html":{}}}],["results",{"_index":94,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":76,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":33,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["rimraf",{"_index":1860,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":959,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["role.guest",{"_index":1626,"title":{},"body":{"classes/User.html":{}}}],["root",{"_index":1101,"title":{},"body":{"controllers/FilesController.html":{}}}],["route",{"_index":382,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"miscellaneous/variables.html":{}}}],["routepermissions",{"_index":1439,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["routepermissions.every((routepermission",{"_index":1446,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["routes",{"_index":129,"title":{},"body":{"guards/ApiKeyGuard.html":{},"guards/JwtAuthGuard.html":{}}}],["run",{"_index":1918,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":118,"title":{},"body":{"guards/ApiKeyGuard.html":{},"interfaces/ClassType.html":{},"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":789,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["salt",{"_index":1636,"title":{},"body":{"classes/User.html":{}}}],["scalable",{"_index":1908,"title":{},"body":{"index.html":{}}}],["schema",{"_index":273,"title":{},"body":{"classes/Applicant.html":{},"modules/ApplicantsModule.html":{},"classes/Application.html":{},"modules/ApplicationsModule.html":{},"classes/FileDocument.html":{},"modules/FilesModule.html":{},"classes/Job.html":{},"modules/JobsModule.html":{},"classes/Organization.html":{},"modules/OrganizationsModule.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":274,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(applicant",{"_index":292,"title":{},"body":{"classes/Applicant.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(application",{"_index":490,"title":{},"body":{"classes/Application.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(file",{"_index":1040,"title":{},"body":{"classes/File.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(filedocument",{"_index":1055,"title":{},"body":{"classes/FileDocument.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(job",{"_index":1250,"title":{},"body":{"classes/Job.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(organization",{"_index":1386,"title":{},"body":{"classes/Organization.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(qualification",{"_index":1476,"title":{},"body":{"classes/Qualification.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(region",{"_index":1504,"title":{},"body":{"classes/Region.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1629,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["screenshot_20210429",{"_index":1134,"title":{},"body":{"injectables/FilesService.html":{}}}],["screenshot_20210524",{"_index":1139,"title":{},"body":{"injectables/FilesService.html":{}}}],["screenshot_20210630",{"_index":1129,"title":{},"body":{"injectables/FilesService.html":{}}}],["screenshot_20210901",{"_index":1123,"title":{},"body":{"injectables/FilesService.html":{}}}],["secret",{"_index":718,"title":{},"body":{"modules/AuthModule.html":{}}}],["secret_key",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1345,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1704,"title":{},"body":{"injectables/UsersService.html":{}}}],["send",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{}}}],["sending",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{}}}],["separately",{"_index":448,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["serializeoptions",{"_index":347,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["serializer.interceptor.ts",{"_index":1790,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["server",{"_index":1909,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":1548,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["session.aborttransaction",{"_index":1561,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["session.committransaction",{"_index":1559,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["session.endsession",{"_index":1563,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["session.starttransaction",{"_index":1556,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["set",{"_index":90,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"guards/PermissionsGuard.html":{}}}],["setmetadata(is_public_key",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(user_permissions_key",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short_listing",{"_index":1886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["side",{"_index":1910,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":720,"title":{},"body":{"modules/AuthModule.html":{}}}],["similar",{"_index":576,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["single",{"_index":43,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["six",{"_index":870,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["six.enum.ts",{"_index":1869,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["size",{"_index":902,"title":{},"body":{"classes/CreateFileDto.html":{},"classes/File.html":{},"injectables/FilesService.html":{}}}],["skip(offset",{"_index":581,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["snippet.dto.ts",{"_index":295,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/UserSnippetDto.html":{},"coverage.html":{}}}],["snippet.dto.ts:15",{"_index":306,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["snippet.dto.ts:18",{"_index":1650,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["snippet.dto.ts:20",{"_index":304,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["snippet.dto.ts:23",{"_index":1649,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["snippet.dto.ts:28",{"_index":1648,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["snippet.dto.ts:33",{"_index":1656,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["snippet.dto.ts:38",{"_index":1652,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["snippet.dto.ts:43",{"_index":1654,"title":{},"body":{"classes/UserSnippetDto.html":{}}}],["sort('createdat",{"_index":580,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"modules/ApplicantsModule.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"modules/ApplicationsModule.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ClassType.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"modules/JobsModule.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"modules/OrganizationsModule.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateFileDto.html":{},"classes/UpdateJobDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"index.html":{}}}],["specific",{"_index":508,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{}}}],["specified",{"_index":431,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/UsersService.html":{}}}],["split",{"_index":1571,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["sponsors",{"_index":1935,"title":{},"body":{"index.html":{}}}],["src/.../app.configuration.ts",{"_index":1963,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../applicant.entity.ts",{"_index":1964,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../application.entity.ts",{"_index":1965,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../apply",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../chapter",{"_index":1868,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../create",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.entity.ts",{"_index":1966,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../gender.enum.ts",{"_index":1870,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../job",{"_index":1871,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../job.entity.ts",{"_index":1967,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt",{"_index":1968,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../marital",{"_index":1873,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../mock.model.ts",{"_index":1971,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../mongo.configuration.ts",{"_index":1972,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../mongoose",{"_index":1896,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer.configuration.ts",{"_index":1974,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../organization.entity.ts",{"_index":1975,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../permissions.decorator.ts",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../qualification.entity.ts",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../region.entity.ts",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1874,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../transaction",{"_index":1973,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../update",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1976,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1978,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.stub.ts",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.repository.ts",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.service.ts",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:24",{"_index":158,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:30",{"_index":160,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":229,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":230,"title":{},"body":{"injectables/AppService.html":{}}}],["src/applicants/applicants.controller.ts",{"_index":315,"title":{},"body":{"controllers/ApplicantsController.html":{},"coverage.html":{}}}],["src/applicants/applicants.controller.ts:49",{"_index":341,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["src/applicants/applicants.controller.ts:56",{"_index":323,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["src/applicants/applicants.controller.ts:67",{"_index":331,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["src/applicants/applicants.controller.ts:79",{"_index":334,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["src/applicants/applicants.controller.ts:88",{"_index":344,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["src/applicants/applicants.controller.ts:98",{"_index":337,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["src/applicants/applicants.module.ts",{"_index":396,"title":{},"body":{"modules/ApplicantsModule.html":{}}}],["src/applicants/applicants.service.ts",{"_index":406,"title":{},"body":{"injectables/ApplicantsService.html":{},"coverage.html":{}}}],["src/applicants/applicants.service.ts:109",{"_index":424,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["src/applicants/applicants.service.ts:15",{"_index":409,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["src/applicants/applicants.service.ts:31",{"_index":411,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["src/applicants/applicants.service.ts:51",{"_index":418,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["src/applicants/applicants.service.ts:62",{"_index":423,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["src/applicants/applicants.service.ts:80",{"_index":430,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["src/applicants/dto/applicant",{"_index":294,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"coverage.html":{}}}],["src/applicants/dto/create",{"_index":810,"title":{},"body":{"classes/CreateApplicantDto.html":{},"coverage.html":{}}}],["src/applicants/dto/region.dto.ts",{"_index":1505,"title":{},"body":{"classes/RegionDto.html":{},"coverage.html":{}}}],["src/applicants/dto/region.dto.ts:13",{"_index":1510,"title":{},"body":{"classes/RegionDto.html":{}}}],["src/applicants/dto/region.dto.ts:18",{"_index":1512,"title":{},"body":{"classes/RegionDto.html":{}}}],["src/applicants/dto/region.dto.ts:8",{"_index":1508,"title":{},"body":{"classes/RegionDto.html":{}}}],["src/applicants/dto/update",{"_index":1567,"title":{},"body":{"classes/UpdateApplicantDto.html":{},"coverage.html":{}}}],["src/applicants/entities/applicant.entity.ts",{"_index":233,"title":{},"body":{"classes/Applicant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/applicants/entities/applicant.entity.ts:16",{"_index":243,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/applicant.entity.ts:20",{"_index":252,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/applicant.entity.ts:30",{"_index":259,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/applicant.entity.ts:34",{"_index":247,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/applicant.entity.ts:38",{"_index":254,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/applicant.entity.ts:42",{"_index":255,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/applicant.entity.ts:46",{"_index":271,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/applicant.entity.ts:55",{"_index":263,"title":{},"body":{"classes/Applicant.html":{}}}],["src/applicants/entities/region.entity.ts",{"_index":1497,"title":{},"body":{"classes/Region.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/applicants/entities/region.entity.ts:13",{"_index":1502,"title":{},"body":{"classes/Region.html":{}}}],["src/applicants/entities/region.entity.ts:17",{"_index":1503,"title":{},"body":{"classes/Region.html":{}}}],["src/applicants/entities/region.entity.ts:9",{"_index":1501,"title":{},"body":{"classes/Region.html":{}}}],["src/applicants/enums/gender.enum.ts",{"_index":1880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/applicants/enums/marital",{"_index":1889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/applications/applications.controller.ts",{"_index":492,"title":{},"body":{"controllers/ApplicationsController.html":{},"coverage.html":{}}}],["src/applications/applications.controller.ts:101",{"_index":510,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["src/applications/applications.controller.ts:42",{"_index":498,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["src/applications/applications.controller.ts:53",{"_index":500,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["src/applications/applications.controller.ts:62",{"_index":513,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["src/applications/applications.controller.ts:71",{"_index":516,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["src/applications/applications.controller.ts:81",{"_index":514,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["src/applications/applications.controller.ts:90",{"_index":503,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["src/applications/applications.module.ts",{"_index":536,"title":{},"body":{"modules/ApplicationsModule.html":{}}}],["src/applications/applications.service.ts",{"_index":539,"title":{},"body":{"injectables/ApplicationsService.html":{},"coverage.html":{}}}],["src/applications/applications.service.ts:114",{"_index":553,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:124",{"_index":555,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:162",{"_index":554,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:179",{"_index":558,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:18",{"_index":544,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:186",{"_index":549,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:199",{"_index":552,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:36",{"_index":546,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:56",{"_index":547,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/applications.service.ts:98",{"_index":548,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["src/applications/dto/create",{"_index":857,"title":{},"body":{"classes/CreateApplicationDto.html":{},"coverage.html":{}}}],["src/applications/dto/file.dto.ts",{"_index":1056,"title":{},"body":{"classes/FileDto.html":{},"coverage.html":{}}}],["src/applications/dto/file.dto.ts:13",{"_index":1057,"title":{},"body":{"classes/FileDto.html":{}}}],["src/applications/dto/file.dto.ts:18",{"_index":1059,"title":{},"body":{"classes/FileDto.html":{}}}],["src/applications/dto/file.dto.ts:8",{"_index":1058,"title":{},"body":{"classes/FileDto.html":{}}}],["src/applications/dto/qualification.dto.ts",{"_index":1477,"title":{},"body":{"classes/QualificationDto.html":{},"coverage.html":{}}}],["src/applications/dto/qualification.dto.ts:13",{"_index":1481,"title":{},"body":{"classes/QualificationDto.html":{}}}],["src/applications/dto/qualification.dto.ts:18",{"_index":1491,"title":{},"body":{"classes/QualificationDto.html":{}}}],["src/applications/dto/qualification.dto.ts:23",{"_index":1484,"title":{},"body":{"classes/QualificationDto.html":{}}}],["src/applications/dto/qualification.dto.ts:29",{"_index":1479,"title":{},"body":{"classes/QualificationDto.html":{}}}],["src/applications/dto/qualification.dto.ts:8",{"_index":1486,"title":{},"body":{"classes/QualificationDto.html":{}}}],["src/applications/dto/update",{"_index":1570,"title":{},"body":{"classes/UpdateApplicationDto.html":{},"coverage.html":{}}}],["src/applications/entities/application.entity.ts",{"_index":459,"title":{},"body":{"classes/Application.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/applications/entities/application.entity.ts:19",{"_index":466,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/application.entity.ts:27",{"_index":479,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/application.entity.ts:35",{"_index":469,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/application.entity.ts:39",{"_index":477,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/application.entity.ts:43",{"_index":483,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/application.entity.ts:47",{"_index":481,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/application.entity.ts:51",{"_index":472,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/application.entity.ts:55",{"_index":475,"title":{},"body":{"classes/Application.html":{}}}],["src/applications/entities/file",{"_index":1041,"title":{},"body":{"classes/FileDocument.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/applications/entities/qualification.entity.ts",{"_index":1466,"title":{},"body":{"classes/Qualification.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/applications/entities/qualification.entity.ts:13",{"_index":1472,"title":{},"body":{"classes/Qualification.html":{}}}],["src/applications/entities/qualification.entity.ts:17",{"_index":1475,"title":{},"body":{"classes/Qualification.html":{}}}],["src/applications/entities/qualification.entity.ts:21",{"_index":1473,"title":{},"body":{"classes/Qualification.html":{}}}],["src/applications/entities/qualification.entity.ts:25",{"_index":1471,"title":{},"body":{"classes/Qualification.html":{}}}],["src/applications/entities/qualification.entity.ts:9",{"_index":1474,"title":{},"body":{"classes/Qualification.html":{}}}],["src/applications/enums/chapter",{"_index":1875,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/auth.controller.ts",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:87",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:95",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":709,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":723,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":729,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":742,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":732,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:59",{"_index":733,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:71",{"_index":736,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":730,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1778,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":687,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:15",{"_index":694,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:22",{"_index":692,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/guards/jwt",{"_index":1316,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":1362,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategys/jwt.strategy.ts",{"_index":1331,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategys/jwt.strategy.ts:13",{"_index":1333,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategys/jwt.strategy.ts:34",{"_index":1337,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategys/local.strategy.ts",{"_index":1364,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategys/local.strategy.ts:13",{"_index":1368,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategys/local.strategy.ts:8",{"_index":1366,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/types/jwt",{"_index":1980,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/common/common.module.ts",{"_index":796,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/common.module.ts:10",{"_index":800,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/decorators/apply",{"_index":1781,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/permissions.decorator.ts",{"_index":1784,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/transaction",{"_index":1785,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto/pagination",{"_index":1424,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/dto/person.dto.ts",{"_index":1448,"title":{},"body":{"classes/PersonDto.html":{},"coverage.html":{}}}],["src/common/dto/person.dto.ts:17",{"_index":1453,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/common/dto/person.dto.ts:21",{"_index":1455,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/common/dto/person.dto.ts:25",{"_index":1451,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/common/dto/person.dto.ts:29",{"_index":1454,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/common/dto/person.dto.ts:35",{"_index":1460,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/common/dto/person.dto.ts:42",{"_index":1457,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/common/dto/person.dto.ts:45",{"_index":1462,"title":{},"body":{"classes/PersonDto.html":{}}}],["src/common/filters/http",{"_index":1199,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/guards/api",{"_index":99,"title":{},"body":{"guards/ApiKeyGuard.html":{},"coverage.html":{}}}],["src/common/guards/permissions.guard.ts",{"_index":1430,"title":{},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{}}}],["src/common/guards/permissions.guard.ts:20",{"_index":1433,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/common/guards/permissions.guard.ts:9",{"_index":1432,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["src/common/interceptors/mongoose",{"_index":1789,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/interceptors/timeout.interceptor.ts",{"_index":1517,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/timeout.interceptor.ts:13",{"_index":1519,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/common/interceptors/transaction.interceptor.ts",{"_index":1529,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/transaction.interceptor.ts:18",{"_index":1541,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["src/common/interceptors/transaction.interceptor.ts:23",{"_index":1542,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":785,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/transform.interceptor.ts:16",{"_index":1565,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/transform.interceptor.ts:19",{"_index":1566,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interceptors/wrap",{"_index":1750,"title":{},"body":{"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/middleware/logging.middleware.ts",{"_index":1372,"title":{},"body":{"injectables/LoggingMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logging.middleware.ts:5",{"_index":1374,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["src/common/pipes/validate",{"_index":1738,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{},"coverage.html":{}}}],["src/common/services/abstract.service.ts",{"_index":6,"title":{},"body":{"injectables/AbstractService.html":{},"coverage.html":{}}}],["src/common/services/abstract.service.ts:11",{"_index":23,"title":{},"body":{"injectables/AbstractService.html":{}}}],["src/common/services/abstract.service.ts:14",{"_index":31,"title":{},"body":{"injectables/AbstractService.html":{}}}],["src/common/services/abstract.service.ts:26",{"_index":37,"title":{},"body":{"injectables/AbstractService.html":{}}}],["src/common/services/abstract.service.ts:37",{"_index":41,"title":{},"body":{"injectables/AbstractService.html":{}}}],["src/common/services/abstract.service.ts:48",{"_index":52,"title":{},"body":{"injectables/AbstractService.html":{}}}],["src/common/services/abstract.service.ts:61",{"_index":50,"title":{},"body":{"injectables/AbstractService.html":{}}}],["src/common/services/abstract.service.ts:72",{"_index":48,"title":{},"body":{"injectables/AbstractService.html":{}}}],["src/database/database.module.ts",{"_index":963,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/entity.repository.ts",{"_index":973,"title":{},"body":{"classes/EntityRepository.html":{},"coverage.html":{}}}],["src/database/entity.repository.ts:17",{"_index":1001,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:26",{"_index":1003,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:30",{"_index":1005,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:43",{"_index":994,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:47",{"_index":995,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:51",{"_index":998,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:6",{"_index":981,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:60",{"_index":984,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:64",{"_index":988,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/entity.repository.ts:9",{"_index":992,"title":{},"body":{"classes/EntityRepository.html":{}}}],["src/database/test/support/mock.model.ts",{"_index":1794,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/feature",{"_index":965,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/FeatureConfigModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/files/dto/create",{"_index":893,"title":{},"body":{"classes/CreateFileDto.html":{},"coverage.html":{}}}],["src/files/dto/update",{"_index":1583,"title":{},"body":{"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["src/files/entities/file.entity.ts",{"_index":1030,"title":{},"body":{"classes/File.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/files/entities/file.entity.ts:10",{"_index":1034,"title":{},"body":{"classes/File.html":{}}}],["src/files/entities/file.entity.ts:11",{"_index":1037,"title":{},"body":{"classes/File.html":{}}}],["src/files/entities/file.entity.ts:12",{"_index":1038,"title":{},"body":{"classes/File.html":{}}}],["src/files/entities/file.entity.ts:5",{"_index":1033,"title":{},"body":{"classes/File.html":{}}}],["src/files/entities/file.entity.ts:6",{"_index":1036,"title":{},"body":{"classes/File.html":{}}}],["src/files/entities/file.entity.ts:7",{"_index":1032,"title":{},"body":{"classes/File.html":{}}}],["src/files/entities/file.entity.ts:8",{"_index":1035,"title":{},"body":{"classes/File.html":{}}}],["src/files/entities/file.entity.ts:9",{"_index":1031,"title":{},"body":{"classes/File.html":{}}}],["src/files/files.controller.ts",{"_index":1061,"title":{},"body":{"controllers/FilesController.html":{},"coverage.html":{}}}],["src/files/files.controller.ts:38",{"_index":1076,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:49",{"_index":1068,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.controller.ts:65",{"_index":1070,"title":{},"body":{"controllers/FilesController.html":{}}}],["src/files/files.module.ts",{"_index":1107,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":1110,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/files/files.service.ts:112",{"_index":1112,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:12",{"_index":1111,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:7",{"_index":1113,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/future/future",{"_index":1174,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"coverage.html":{}}}],["src/jobs/dto/create",{"_index":913,"title":{},"body":{"classes/CreateJobDto.html":{},"coverage.html":{}}}],["src/jobs/dto/update",{"_index":1585,"title":{},"body":{"classes/UpdateJobDto.html":{},"coverage.html":{}}}],["src/jobs/entities/job.entity.ts",{"_index":1232,"title":{},"body":{"classes/Job.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/jobs/entities/job.entity.ts:24",{"_index":1235,"title":{},"body":{"classes/Job.html":{}}}],["src/jobs/entities/job.entity.ts:28",{"_index":1240,"title":{},"body":{"classes/Job.html":{}}}],["src/jobs/entities/job.entity.ts:32",{"_index":1239,"title":{},"body":{"classes/Job.html":{}}}],["src/jobs/entities/job.entity.ts:36",{"_index":1242,"title":{},"body":{"classes/Job.html":{}}}],["src/jobs/entities/job.entity.ts:44",{"_index":1244,"title":{},"body":{"classes/Job.html":{}}}],["src/jobs/entities/job.entity.ts:48",{"_index":1237,"title":{},"body":{"classes/Job.html":{}}}],["src/jobs/entities/job.entity.ts:58",{"_index":1246,"title":{},"body":{"classes/Job.html":{}}}],["src/jobs/enums/job",{"_index":1883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/jobs/jobs.controller.ts",{"_index":1252,"title":{},"body":{"controllers/JobsController.html":{},"coverage.html":{}}}],["src/jobs/jobs.controller.ts:39",{"_index":1256,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:48",{"_index":1258,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:55",{"_index":1259,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:60",{"_index":1262,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.controller.ts:68",{"_index":1260,"title":{},"body":{"controllers/JobsController.html":{}}}],["src/jobs/jobs.module.ts",{"_index":1279,"title":{},"body":{"modules/JobsModule.html":{}}}],["src/jobs/jobs.service.ts",{"_index":1282,"title":{},"body":{"injectables/JobsService.html":{},"coverage.html":{}}}],["src/jobs/jobs.service.ts:13",{"_index":1287,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/jobs.service.ts:26",{"_index":1289,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/jobs/jobs.service.ts:91",{"_index":1292,"title":{},"body":{"injectables/JobsService.html":{}}}],["src/main.ts",{"_index":1802,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/organizations/dto/create",{"_index":933,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"coverage.html":{}}}],["src/organizations/dto/update",{"_index":1588,"title":{},"body":{"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["src/organizations/entities/organization.entity.ts",{"_index":1382,"title":{},"body":{"classes/Organization.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/organizations/entities/organization.entity.ts:20",{"_index":1383,"title":{},"body":{"classes/Organization.html":{}}}],["src/organizations/entities/organization.entity.ts:24",{"_index":1385,"title":{},"body":{"classes/Organization.html":{}}}],["src/organizations/entities/organization.entity.ts:28",{"_index":1384,"title":{},"body":{"classes/Organization.html":{}}}],["src/organizations/organizations.controller.ts",{"_index":1388,"title":{},"body":{"controllers/OrganizationsController.html":{},"coverage.html":{}}}],["src/organizations/organizations.controller.ts:41",{"_index":1392,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["src/organizations/organizations.controller.ts:51",{"_index":1394,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["src/organizations/organizations.controller.ts:60",{"_index":1396,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["src/organizations/organizations.controller.ts:67",{"_index":1399,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["src/organizations/organizations.controller.ts:77",{"_index":1397,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["src/organizations/organizations.module.ts",{"_index":1414,"title":{},"body":{"modules/OrganizationsModule.html":{}}}],["src/organizations/organizations.service.ts",{"_index":1416,"title":{},"body":{"injectables/OrganizationsService.html":{},"coverage.html":{}}}],["src/organizations/organizations.service.ts:11",{"_index":1418,"title":{},"body":{"injectables/OrganizationsService.html":{}}}],["src/request",{"_index":1514,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/users/__mocks__/users.repository.ts",{"_index":1805,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/__mocks__/users.service.ts",{"_index":1806,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dto/create",{"_index":941,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1592,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":1646,"title":{},"body":{"classes/UserSnippetDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1600,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":1603,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":1610,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":1619,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":1609,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:36",{"_index":1614,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":1606,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":1616,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":1618,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:64",{"_index":1612,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:68",{"_index":1613,"title":{},"body":{"classes/User.html":{}}}],["src/users/enums/role.enum.ts",{"_index":1892,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/test/stubs/create",{"_index":1807,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/test/stubs/update",{"_index":1810,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/test/stubs/user.stub.ts",{"_index":1812,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/test/support/user.model.ts",{"_index":1814,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":1658,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:47",{"_index":1661,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":1663,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":1665,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":1667,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":1666,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1677,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository.ts",{"_index":1682,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.repository.ts:8",{"_index":1684,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/users/users.service.ts",{"_index":1698,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":1710,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:132",{"_index":1720,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:156",{"_index":1718,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1702,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":1703,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":1707,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":1713,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":1716,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1919,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1922,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1924,"title":{},"body":{"index.html":{}}}],["started",{"_index":1903,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1913,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1757,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":852,"title":{},"body":{"classes/CreateApplicantDto.html":{},"controllers/FilesController.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"miscellaneous/variables.html":{}}}],["status.decorator.ts",{"_index":1783,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["status.enum.ts",{"_index":1872,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuses",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stay",{"_index":1945,"title":{},"body":{"index.html":{}}}],["stephen",{"_index":1948,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["strategy",{"_index":369,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OrganizationsController.html":{},"guards/PermissionsGuard.html":{},"controllers/UsersController.html":{}}}],["strategys",{"_index":714,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":40,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"injectables/LocalStrategy.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{}}}],["subcounty",{"_index":1499,"title":{},"body":{"classes/Region.html":{},"classes/RegionDto.html":{}}}],["subdocument",{"_index":1054,"title":{},"body":{"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{}}}],["subdocuments",{"_index":1050,"title":{},"body":{"classes/FileDocument.html":{},"classes/Qualification.html":{},"classes/Region.html":{}}}],["success",{"_index":2018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successfully",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":312,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EntityRepository.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["sunculture",{"_index":1115,"title":{},"body":{"injectables/FilesService.html":{}}}],["super",{"_index":1322,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(jobmodel",{"_index":1302,"title":{},"body":{"injectables/JobsService.html":{}}}],["super(organizationmodel",{"_index":1423,"title":{},"body":{"injectables/OrganizationsService.html":{}}}],["super(usermodel",{"_index":1697,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["super.canactivate(context",{"_index":1330,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["super.remove(id",{"_index":1313,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["super.update(id",{"_index":1311,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["supplied",{"_index":752,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":1936,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":266,"title":{},"body":{"classes/Applicant.html":{}}}],["svg",{"_index":1954,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1863,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":790,"title":{},"body":{"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1818,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1817,"title":{},"body":{"coverage.html":{}}}],["tagged",{"_index":1312,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["tap",{"_index":1546,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["tap(async",{"_index":1558,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["tax",{"_index":1144,"title":{},"body":{"injectables/FilesService.html":{}}}],["technology",{"_index":1489,"title":{},"body":{"classes/QualificationDto.html":{}}}],["telephone",{"_index":240,"title":{},"body":{"classes/Applicant.html":{},"classes/CreateApplicantDto.html":{},"classes/PersonDto.html":{}}}],["test",{"_index":318,"title":{},"body":{"controllers/ApplicantsController.html":{},"index.html":{}}}],["test:covsupport",{"_index":1929,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1928,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1926,"title":{},"body":{"index.html":{}}}],["tgt",{"_index":450,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{}}}],["thanks",{"_index":1934,"title":{},"body":{"index.html":{}}}],["this._cookieresponse(response",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.appconfig.apikey",{"_index":127,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.applicantmodel",{"_index":439,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["this.applicantmodel(createapplicantdto",{"_index":441,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["this.applicantmodel.create(applicant",{"_index":442,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["this.applicantmodel.find().skip(offset).limit(limit).exec",{"_index":444,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["this.applicantmodel.findbyid(applicantid",{"_index":569,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["this.applicantmodel.findbyid(id).exec",{"_index":445,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["this.applicantmodel.findbyidandremove(id).exec",{"_index":458,"title":{},"body":{"injectables/ApplicantsService.html":{}}}],["this.applicantsservice.create(createapplicantdto",{"_index":380,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.applicantsservice.findall(paginationquery",{"_index":383,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.applicantsservice.findone('61d99fd2d27f5f73e2c93034",{"_index":379,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.applicantsservice.findone(id",{"_index":388,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.applicantsservice.remove(id",{"_index":392,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.applicantsservice.update(id",{"_index":390,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.applicationmodel",{"_index":454,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/JobsService.html":{}}}],["this.applicationmodel.create(application",{"_index":579,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["this.applicationmodel.findbyid(id).exec",{"_index":583,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["this.applicationsservice.create(createapplicationdto",{"_index":522,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["this.applicationsservice.findall(paginationquery",{"_index":523,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["this.applicationsservice.findallapplicantapplications",{"_index":529,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["this.applicationsservice.findalljobapplications(jobid",{"_index":532,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["this.applicationsservice.findone(id",{"_index":524,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["this.applicationsservice.remove(id",{"_index":526,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["this.applicationsservice.update(id",{"_index":525,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["this.authservice.findone(user.id",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":672,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(createuserdto",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatejwtpayload(payload",{"_index":1350,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validateuserlocal(username",{"_index":1371,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.chaptersix",{"_index":1581,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["this.chaptersix.map((a",{"_index":1191,"title":{},"body":{"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["this.checkapplicationdependencies",{"_index":571,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["this.checkorganizationexists(organizationid",{"_index":1307,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.connection.startsession",{"_index":1555,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["this.dob",{"_index":1465,"title":{},"body":{"classes/PersonDto.html":{}}}],["this.entitymodel",{"_index":1010,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.create(createentitydata",{"_index":1018,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.deletemany(entityfilterquery",{"_index":1019,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.find(entityfilterquery",{"_index":1008,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.findbyid(id",{"_index":1015,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.findbyidandremove(id",{"_index":1016,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.findbyidandupdate(id",{"_index":1017,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.findone(entityfilterquery",{"_index":1009,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.findoneandremove(entityfilterquery",{"_index":1013,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.entitymodel.findoneandupdate",{"_index":1014,"title":{},"body":{"classes/EntityRepository.html":{}}}],["this.filesservice.download(fileid",{"_index":1093,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.remove(id",{"_index":1103,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.filesservice.upload(file",{"_index":1089,"title":{},"body":{"controllers/FilesController.html":{}}}],["this.firstname",{"_index":1631,"title":{},"body":{"classes/User.html":{}}}],["this.fullname",{"_index":1464,"title":{},"body":{"classes/PersonDto.html":{}}}],["this.jobmodel",{"_index":1308,"title":{},"body":{"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["this.jobmodel.create(job",{"_index":1309,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.jobmodel.findbyid(jobid",{"_index":567,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["this.jobmodel.findone",{"_index":1305,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.jobsservice.create(createjobdto",{"_index":1269,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.findall(paginationquery",{"_index":1271,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.findone(id",{"_index":1273,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.remove(id",{"_index":1275,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jobsservice.update(id",{"_index":1274,"title":{},"body":{"controllers/JobsController.html":{}}}],["this.jwtservice.sign(payload",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.lastname",{"_index":1632,"title":{},"body":{"classes/User.html":{}}}],["this.logger.debug",{"_index":591,"title":{},"body":{"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{}}}],["this.logger.debug('api_key",{"_index":126,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.logger.debug(`found",{"_index":384,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.logger.log(`hit",{"_index":381,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["this.login(user",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.model",{"_index":88,"title":{},"body":{"injectables/AbstractService.html":{}}}],["this.model(dto",{"_index":75,"title":{},"body":{"injectables/AbstractService.html":{}}}],["this.model.create(record",{"_index":77,"title":{},"body":{"injectables/AbstractService.html":{}}}],["this.model.find().skip(offset).limit(limit).exec",{"_index":81,"title":{},"body":{"injectables/AbstractService.html":{}}}],["this.model.findbyidandremove(id).exec",{"_index":92,"title":{},"body":{"injectables/AbstractService.html":{}}}],["this.model.findone",{"_index":84,"title":{},"body":{"injectables/AbstractService.html":{}}}],["this.model.findone(ref).exec",{"_index":68,"title":{},"body":{"injectables/AbstractService.html":{}}}],["this.organizationmodel.findbyid(organizationid",{"_index":1303,"title":{},"body":{"injectables/JobsService.html":{}}}],["this.organizationsservice.create(createorganizationdto",{"_index":1406,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["this.organizationsservice.findall(paginationquery",{"_index":1407,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["this.organizationsservice.findone(id",{"_index":1408,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["this.organizationsservice.remove(id",{"_index":1410,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["this.organizationsservice.update(id",{"_index":1409,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["this.password",{"_index":1644,"title":{},"body":{"classes/User.html":{}}}],["this.protocol}://${this.host}:${this.port",{"_index":2014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.recordname",{"_index":72,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/JobsService.html":{},"injectables/OrganizationsService.html":{}}}],["this.reflector.get",{"_index":1325,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/PermissionsGuard.html":{}}}],["this.reflector.get(is_public_key",{"_index":133,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1730,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":1731,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findbyid(id",{"_index":1732,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findbyidandremove(id",{"_index":1737,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findbyidandupdate(id",{"_index":1735,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1728,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1674,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":781,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(email",{"_index":751,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(payload.sub",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.remove(id",{"_index":1676,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":1675,"title":{},"body":{"controllers/UsersController.html":{}}}],["those",{"_index":140,"title":{},"body":{"guards/ApiKeyGuard.html":{}}}],["throw",{"_index":69,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/FilesService.html":{},"injectables/JobsService.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationsService.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["throwerror",{"_index":1521,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["throws",{"_index":83,"title":{},"body":{"injectables/AbstractService.html":{},"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{},"injectables/UsersService.html":{}}}],["tied",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":1378,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["timeout",{"_index":1524,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeout(3000",{"_index":1526,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeouterror",{"_index":1522,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1516,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":1220,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["timestamps",{"_index":288,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/User.html":{}}}],["title",{"_index":1043,"title":{},"body":{"classes/FileDocument.html":{},"classes/FileDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{}}}],["todo",{"_index":593,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/UsersService.html":{}}}],["together",{"_index":1537,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["tojson",{"_index":286,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/User.html":{}}}],["token",{"_index":662,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PermissionsGuard.html":{}}}],["touch",{"_index":1946,"title":{},"body":{"index.html":{}}}],["toupper",{"_index":958,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["toupper(value",{"_index":962,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["township",{"_index":1511,"title":{},"body":{"classes/RegionDto.html":{}}}],["tranformer",{"_index":267,"title":{},"body":{"classes/Applicant.html":{}}}],["transaction",{"_index":1530,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["transactioninterceptor",{"_index":1528,"title":{"injectables/TransactionInterceptor.html":{}},"body":{"injectables/TransactionInterceptor.html":{},"coverage.html":{}}}],["transactionparam",{"_index":1538,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":242,"title":{},"body":{"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"classes/Application.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/User.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["transform(value",{"_index":1741,"title":{},"body":{"injectables/ValidateObjectIdPipe.html":{}}}],["transformer",{"_index":277,"title":{},"body":{"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"classes/Application.html":{},"interfaces/ClassType.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"classes/PersonDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":340,"title":{"injectables/TransformInterceptor.html":{}},"body":{"controllers/ApplicantsController.html":{},"interfaces/ClassType.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["transforminterceptor(applicantsnippetdto",{"_index":378,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["transforminterceptor(usersnippetdto",{"_index":1672,"title":{},"body":{"controllers/UsersController.html":{}}}],["transforms",{"_index":268,"title":{},"body":{"classes/Applicant.html":{}}}],["trim",{"_index":250,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/FileDocument.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/User.html":{}}}],["true",{"_index":91,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"classes/Applicant.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/EntityRepository.html":{},"modules/FeatureConfigModule.html":{},"classes/FileDocument.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["true})@apiquery({name",{"_index":329,"title":{},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/JobsController.html":{}}}],["true})@arrayminsize(1)@isarray",{"_index":1459,"title":{},"body":{"classes/PersonDto.html":{}}}],["true})@arrayunique()@arrayminsize(1)@isarray",{"_index":832,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["true})@exclude",{"_index":1608,"title":{},"body":{"classes/User.html":{}}}],["true})@isarray",{"_index":873,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["true})@isnotempty({each",{"_index":831,"title":{},"body":{"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PersonDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["true})@isoptional()@isarray()@validatenested({each",{"_index":887,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["true})@prop({type",{"_index":467,"title":{},"body":{"classes/Application.html":{}}}],["true})@type(undefined",{"_index":468,"title":{},"body":{"classes/Application.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/Job.html":{},"classes/PersonDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["try",{"_index":750,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["twitter",{"_index":1951,"title":{},"body":{"index.html":{}}}],["type",{"_index":27,"title":{},"body":{"injectables/AbstractService.html":{},"guards/ApiKeyGuard.html":{},"controllers/AppController.html":{},"classes/Applicant.html":{},"classes/ApplicantSnippetDto.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/Application.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateFileDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/EntityRepository.html":{},"classes/File.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Job.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggingMiddleware.html":{},"classes/Organization.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/PaginationQueryDto.html":{},"guards/PermissionsGuard.html":{},"classes/PersonDto.html":{},"classes/Qualification.html":{},"classes/QualificationDto.html":{},"classes/Region.html":{},"classes/RegionDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"injectables/WrapResponseInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(()=>region",{"_index":264,"title":{},"body":{"classes/Applicant.html":{}}}],["typealiases",{"_index":1961,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedef",{"_index":1725,"title":{},"body":{"injectables/UsersService.html":{}}}],["typeof",{"_index":1218,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/WrapResponseInterceptor.html":{}}}],["types",{"_index":749,"title":{},"body":{"injectables/AuthService.html":{},"classes/FutureUpdateApplicationDto.html":{},"classes/UpdateApplicantDto.html":{},"classes/UpdateOrganizationDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1912,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1864,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":1339,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":1352,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":474,"title":{},"body":{"classes/Application.html":{},"injectables/AuthService.html":{},"classes/Job.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["undefined})@isenum(gender",{"_index":820,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["undefined})@isenum(maritalstatus",{"_index":823,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["undefined})@isenum(role",{"_index":955,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isnotempty",{"_index":821,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["undefined})@isoptional()@isstring({each",{"_index":872,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["undefined})@isstring({each",{"_index":830,"title":{},"body":{"classes/CreateApplicantDto.html":{}}}],["undefined})@transform",{"_index":956,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unique",{"_index":413,"title":{},"body":{"injectables/ApplicantsService.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":1925,"title":{},"body":{"index.html":{}}}],["university",{"_index":883,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/QualificationDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["unknown",{"_index":505,"title":{},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"classes/EntityRepository.html":{},"classes/HttpExceptionFilter.html":{}}}],["unsupported",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":18,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"classes/CreateApplicationDto.html":{},"classes/FutureUpdateApplicationDto.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/UpdateApplicationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["update(id",{"_index":51,"title":{},"body":{"injectables/AbstractService.html":{},"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"controllers/JobsController.html":{},"injectables/JobsService.html":{},"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateapplicantdto",{"_index":342,"title":{"classes/UpdateApplicantDto.html":{}},"body":{"controllers/ApplicantsController.html":{},"injectables/ApplicantsService.html":{},"classes/UpdateApplicantDto.html":{},"coverage.html":{}}}],["updateapplicationdto",{"_index":515,"title":{"classes/UpdateApplicationDto.html":{}},"body":{"controllers/ApplicationsController.html":{},"injectables/ApplicationsService.html":{},"classes/CreateApplicationDto.html":{},"classes/UpdateApplicationDto.html":{},"coverage.html":{}}}],["updateapplicationdto:25",{"_index":878,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["updateapplicationdto:36",{"_index":888,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["updateapplicationdto:44",{"_index":885,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["updateapplicationdto:57",{"_index":875,"title":{},"body":{"classes/CreateApplicationDto.html":{}}}],["updated",{"_index":556,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/UsersService.html":{}}}],["updateentitydata",{"_index":996,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["updatefiledto",{"_index":1582,"title":{"classes/UpdateFileDto.html":{}},"body":{"classes/UpdateFileDto.html":{},"coverage.html":{}}}],["updatejobdto",{"_index":1261,"title":{"classes/UpdateJobDto.html":{}},"body":{"controllers/JobsController.html":{},"injectables/JobsService.html":{},"classes/UpdateJobDto.html":{},"coverage.html":{}}}],["updateorganizationdto",{"_index":1398,"title":{"classes/UpdateOrganizationDto.html":{}},"body":{"controllers/OrganizationsController.html":{},"injectables/OrganizationsService.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["updatequery",{"_index":997,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["updates",{"_index":584,"title":{},"body":{"injectables/ApplicationsService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":1591,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updateuserdtostub",{"_index":1811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["upload",{"_index":559,"title":{},"body":{"injectables/ApplicationsService.html":{},"controllers/FilesController.html":{},"injectables/FilesService.html":{},"miscellaneous/variables.html":{}}}],["upload(@uploadedfile",{"_index":1088,"title":{},"body":{"controllers/FilesController.html":{}}}],["upload(file",{"_index":1071,"title":{},"body":{"controllers/FilesController.html":{},"injectables/FilesService.html":{}}}],["upload\\\\0fd358b14332f3d6cf23799ecea3b516",{"_index":1127,"title":{},"body":{"injectables/FilesService.html":{}}}],["upload\\\\13bb3b1431c510a2947d5b235731b571",{"_index":1120,"title":{},"body":{"injectables/FilesService.html":{}}}],["upload\\\\332a172648bf846eacd09e316ece24e0",{"_index":1132,"title":{},"body":{"injectables/FilesService.html":{}}}],["upload\\\\9107b99107345166ad8523d444d0cb45",{"_index":1137,"title":{},"body":{"injectables/FilesService.html":{}}}],["upload\\\\b61d99bca1dbc98456ea787cad506984",{"_index":1147,"title":{},"body":{"injectables/FilesService.html":{}}}],["upload\\\\efd65519a93ad6aecec497f216222e82",{"_index":1142,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploaded",{"_index":864,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{}}}],["uploadedfile",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesController.html":{}}}],["uploadfiles",{"_index":541,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["uploadfiles(id",{"_index":557,"title":{},"body":{"injectables/ApplicationsService.html":{}}}],["uppercase",{"_index":251,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/FileDocument.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"classes/User.html":{}}}],["uri",{"_index":968,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/FileDocument.html":{},"classes/FileDto.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":1053,"title":{},"body":{"classes/FileDocument.html":{},"injectables/LoggingMiddleware.html":{},"classes/Qualification.html":{},"classes/Region.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["use(req",{"_index":1373,"title":{},"body":{"injectables/LoggingMiddleware.html":{}}}],["useclass",{"_index":807,"title":{},"body":{"modules/CommonModule.html":{}}}],["used",{"_index":737,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TransactionInterceptor.html":{},"injectables/UsersService.html":{}}}],["usefactory",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/FilesController.html":{},"controllers/JobsController.html":{},"controllers/OrganizationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":175,"title":{},"body":{"controllers/AppController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":174,"title":{},"body":{"controllers/AppController.html":{},"controllers/FilesController.html":{}}}],["useinterceptors(mongooseclassserializerinterceptor(applicant",{"_index":368,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["useinterceptors(mongooseclassserializerinterceptor(application",{"_index":521,"title":{},"body":{"controllers/ApplicationsController.html":{}}}],["useinterceptors(mongooseclassserializerinterceptor(job",{"_index":1267,"title":{},"body":{"controllers/JobsController.html":{}}}],["useinterceptors(mongooseclassserializerinterceptor(organization",{"_index":1404,"title":{},"body":{"controllers/OrganizationsController.html":{}}}],["useinterceptors(new",{"_index":377,"title":{},"body":{"controllers/ApplicantsController.html":{}}}],["useinterceptors(transactioninterceptor",{"_index":1547,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["user",{"_index":685,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/PermissionsGuard.html":{},"interfaces/RequestWithUser.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user'})@apicreatedresponse({type",{"_index":1660,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@apiokresponse({type",{"_index":1664,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":942,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:19",{"_index":949,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":1597,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:25",{"_index":951,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":1599,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":947,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":1595,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:38",{"_index":953,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":954,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:51",{"_index":957,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["user.firstname",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.fullname",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.id",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.interface.ts",{"_index":1515,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user.isactive",{"_index":759,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ismodified('password",{"_index":1634,"title":{},"body":{"classes/User.html":{}}}],["user.lastaccessedon",{"_index":760,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.lastname",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.name",{"_index":1681,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":1639,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["user.permissions",{"_index":1443,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["user.role",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["user.save",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.isactive",{"_index":1355,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["user?.validatepassword(password",{"_index":755,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_permissions_key",{"_index":1437,"title":{},"body":{"guards/PermissionsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userdocument",{"_index":746,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["usermockmodel",{"_index":1977,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["usermodel",{"_index":1685,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":689,"title":{},"body":{"classes/AuthDto.html":{},"injectables/LocalStrategy.html":{}}}],["userpermissions",{"_index":1442,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["userpermissions.includes(routepermission",{"_index":1447,"title":{},"body":{"guards/PermissionsGuard.html":{}}}],["users",{"_index":757,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiokresponse({type",{"_index":1662,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1678,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":1680,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":1668,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities",{"_index":747,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":748,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":1628,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.methods.validatepassword",{"_index":1642,"title":{},"body":{"classes/User.html":{}}}],["userschema.pre('save",{"_index":1633,"title":{},"body":{"classes/User.html":{}}}],["userschema.virtual('fullname').get(function",{"_index":1630,"title":{},"body":{"classes/User.html":{}}}],["userscontroller",{"_index":1657,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":195,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersnippetdto",{"_index":1645,"title":{"classes/UserSnippetDto.html":{}},"body":{"classes/UserSnippetDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["usersrepository",{"_index":1679,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":727,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice.create(createuserdto",{"_index":1706,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findall",{"_index":1709,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findone(id",{"_index":1711,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findonebyemail(email",{"_index":1714,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.findonebyid(id",{"_index":1717,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.remove(id",{"_index":1719,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice.update(id",{"_index":1721,"title":{},"body":{"injectables/UsersService.html":{}}}],["userstub",{"_index":1813,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":131,"title":{},"body":{"guards/ApiKeyGuard.html":{},"classes/ApplicantSnippetDto.html":{},"injectables/ApplicationsService.html":{},"guards/JwtAuthGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateApplicationDto.html":{},"injectables/UsersService.html":{}}}],["valid",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["validate",{"_index":1328,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ValidateObjectIdPipe.html":{}}}],["validate(payload",{"_index":1334,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":1367,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatejwtpayload",{"_index":724,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatejwtpayload(payload",{"_index":734,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenested",{"_index":889,"title":{},"body":{"classes/CreateApplicationDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PersonDto.html":{},"classes/UpdateApplicationDto.html":{}}}],["validateobjectidpipe",{"_index":355,"title":{"injectables/ValidateObjectIdPipe.html":{}},"body":{"controllers/ApplicantsController.html":{},"controllers/ApplicationsController.html":{},"controllers/OrganizationsController.html":{},"injectables/ValidateObjectIdPipe.html":{},"coverage.html":{}}}],["validatepassword",{"_index":1602,"title":{},"body":{"classes/User.html":{}}}],["validateuserlocal",{"_index":725,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserlocal(email",{"_index":741,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1580,"title":{},"body":{"classes/UpdateApplicationDto.html":{}}}],["validator",{"_index":311,"title":{},"body":{"classes/ApplicantSnippetDto.html":{},"classes/AuthDto.html":{},"classes/CreateApplicantDto.html":{},"classes/CreateApplicationDto.html":{},"classes/CreateJobDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDto.html":{},"classes/FileDto.html":{},"classes/FutureCreateApplicationDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PersonDto.html":{},"classes/QualificationDto.html":{},"classes/RegionDto.html":{},"classes/UpdateApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserSnippetDto.html":{},"dependencies.html":{}}}],["value",{"_index":54,"title":{},"body":{"injectables/AbstractService.html":{},"classes/Applicant.html":{},"classes/Application.html":{},"injectables/ApplicationsService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/FutureCreateApplicationDto.html":{},"injectables/JobsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/OrganizationsService.html":{},"classes/UpdateApplicationDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectIdPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.tostring",{"_index":289,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/User.html":{}}}],["variable",{"_index":1770,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1985,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifiedcallback",{"_index":1336,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verifies",{"_index":776,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":1349,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["virtuals",{"_index":287,"title":{},"body":{"classes/Applicant.html":{},"classes/Application.html":{},"classes/Job.html":{},"classes/Organization.html":{},"classes/User.html":{}}}],["void",{"_index":561,"title":{},"body":{"injectables/ApplicationsService.html":{},"controllers/AuthController.html":{},"modules/CommonModule.html":{},"controllers/FilesController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingMiddleware.html":{}}}],["ward",{"_index":1500,"title":{},"body":{"classes/Region.html":{},"classes/RegionDto.html":{}}}],["watch",{"_index":1920,"title":{},"body":{"index.html":{}}}],["website",{"_index":1950,"title":{},"body":{"index.html":{}}}],["whether",{"_index":453,"title":{},"body":{"injectables/ApplicantsService.html":{},"injectables/ApplicationsService.html":{}}}],["works",{"_index":297,"title":{},"body":{"classes/ApplicantSnippetDto.html":{}}}],["world",{"_index":178,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["wrapresponseinterceptor",{"_index":1749,"title":{"injectables/WrapResponseInterceptor.html":{}},"body":{"injectables/WrapResponseInterceptor.html":{},"coverage.html":{}}}],["yes",{"_index":990,"title":{},"body":{"classes/EntityRepository.html":{},"injectables/UsersRepository.html":{}}}],["you'd",{"_index":1939,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/ApplicantsModule.html":{},"modules/ApplicationsModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/JobsModule.html":{},"modules/OrganizationsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AbstractService.html":{"url":"injectables/AbstractService.html","title":"injectable - AbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/abstract.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                recordName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                recordExists\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/common/services/abstract.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: any, ref: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/abstract.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ref\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/abstract.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/abstract.service.ts:37\n                \n            \n\n\n            \n                \n                    Finds a single record\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The record if found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recordExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    recordExists(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/abstract.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/abstract.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/abstract.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        recordName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'record'\n                    \n                \n                    \n                        \n                                Defined in src/common/services/abstract.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { PaginationQueryDto } from '../dto';\n\n@Injectable()\nexport abstract class AbstractService {\n  protected recordName: string = 'record';\n  protected constructor(protected readonly model: Model) {}\n\n  async create(dto: any, ref: any): Promise {\n    // Check if record exist\n    let record = await this.model.findOne(ref).exec();\n\n    if (record)\n      throw new BadRequestException(`The ${this.recordName} already exists`);\n\n    record = new this.model(dto);\n\n    return await this.model.create(record);\n  }\n\n  async findAll(paginationQuery: PaginationQueryDto): Promise {\n    const { limit, offset } = paginationQuery;\n    return await this.model.find().skip(offset).limit(limit).exec();\n  }\n\n  /**\n   * Finds a single record\n   * @param id\n   * @returns The record if found\n   * @throws NotFoundException if record is not found\n   */\n  async findOne(id: string): Promise {\n    const record = await this.model.findOne({ _id: id }).exec();\n\n    if (!record)\n      throw new NotFoundException(\n        `The ${this.recordName} with the given id was not found`,\n      );\n\n    return record;\n  }\n\n  async update(id: string, dto: any): Promise {\n    const record = await this.model\n      .findByIdAndUpdate(id, { $set: dto }, { new: true })\n      .exec();\n\n    if (!record)\n      throw new NotFoundException(\n        `The ${this.recordName} with the given id was not found`,\n      );\n\n    return record;\n  }\n\n  async remove(id: string): Promise {\n    const record = await this.model.findByIdAndRemove(id).exec();\n\n    if (!record)\n      throw new NotFoundException(\n        `The ${this.recordName} with the given id was not found`,\n      );\n\n    return record;\n  }\n\n  async recordExists(id: string): Promise {\n    const record = await this.model.findOne({ _id: id }).exec();\n    if (record) return true;\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ApiKeyGuard.html":{"url":"guards/ApiKeyGuard.html","title":"guard - ApiKeyGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ApiKeyGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/api-key.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, appConfig: AppConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/api-key.guard.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appConfig\n                                                  \n                                                        \n                                                                        AppConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/api-key.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport { IS_PUBLIC_KEY } from '../../auth/decorators';\nimport {\n  AppConfiguration,\n  InjectAppConfig,\n} from '../../feature-config/configuration';\n\n@Injectable()\nexport class ApiKeyGuard implements CanActivate {\n  private readonly logger = new Logger(ApiKeyGuard.name);\n\n  constructor(\n    private readonly reflector: Reflector,\n    @InjectAppConfig() private readonly appConfig: AppConfiguration,\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    this.logger.debug('API_KEY', this.appConfig.apiKey);\n    //return true if IS_PUBLIC_KEY is found\n    //access the routes metadata using the reflector class\n    const isPublic = this.reflector.get(IS_PUBLIC_KEY, context.getHandler());\n    if (isPublic) return true;\n\n    //Get authorization header and compare with our API_KEY\n    //to protect those routes that do not have a decorator of @Public\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.header('Authorization');\n    return authHeader === this.appConfig.apiKey; //process.env.API_KEY;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(file: Express.Multer.File, person: PersonDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()@UseInterceptors(undefined)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    person\n                                    \n                                                PersonDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { person: PersonDto; file: Express.Multer.File; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiExcludeController, ApiTags } from '@nestjs/swagger';\nimport { Public } from './auth/decorators';\nimport { PersonDto } from './common/dto';\n\n@Controller()\n@ApiTags('App')\n// @ApiCookieAuth()\n@ApiExcludeController()\nexport class AppController {\n  @Public()\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  @UseInterceptors(ClassSerializerInterceptor)\n  create(@UploadedFile() file: Express.Multer.File, @Body() person: PersonDto) {\n    return { person, file };\n  }\n\n  @Public()\n  @Get()\n  getHello() {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApplicantsModule\n\nApplicantsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApplicantsModule->AppModule\n\n\n\n\n\nApplicationsModule\n\nApplicationsModule\n\nAppModule -->\n\nApplicationsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFeatureConfigModule\n\nFeatureConfigModule\n\nAppModule -->\n\nFeatureConfigModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nJobsModule\n\nJobsModule\n\nAppModule -->\n\nJobsModule->AppModule\n\n\n\n\n\nOrganizationsModule\n\nOrganizationsModule\n\nAppModule -->\n\nOrganizationsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApplicantsModule\n                        \n                        \n                            ApplicationsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            FeatureConfigModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            JobsModule\n                        \n                        \n                            OrganizationsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ApplicantsModule } from './applicants/applicants.module';\nimport { ApplicationsModule } from './applications/applications.module';\nimport { JobsModule } from './jobs/jobs.module';\nimport { OrganizationsModule } from './organizations/organizations.module';\nimport { CommonModule } from './common/common.module';\nimport { FilesModule } from './files/files.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { FeatureConfigModule } from './feature-config/feature-config.module';\nimport {\n  MulterConfiguration,\n  multerConfiguration,\n} from './feature-config/configuration';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { DatabaseModule } from './database/database.module';\n\n@Module({\n  imports: [\n    ApplicantsModule,\n    ApplicationsModule,\n    JobsModule,\n    OrganizationsModule,\n    MulterModule.registerAsync({\n      inject: [multerConfiguration.KEY],\n      useFactory: (config: MulterConfiguration) => {\n        return {\n          dest: config.dest,\n          fileFilter: config.fileFilter,\n          limits: config.limits,\n        };\n      },\n    }),\n    FilesModule,\n    CommonModule,\n    UsersModule,\n    AuthModule,\n    FeatureConfigModule,\n    DatabaseModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Applicant.html":{"url":"classes/Applicant.html","title":"class - Applicant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Applicant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/entities/applicant.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                dob\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                maritalStatus\n                            \n                            \n                                nationalId\n                            \n                            \n                                region\n                            \n                            \n                                telephone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({maxlength: 255, required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maritalStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nationalId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({index: true, maxlength: 8, required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Region\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Region, required: false})@Prop({type: RegionSchema})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:55\n                        \n                    \n\n            \n                \n                    The @Type(()=>Region) makes sure the class-tranformer\ntransforms the Region object too\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        telephone\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/applicant.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Transform, Type } from 'class-transformer';\nimport { Document, ObjectId } from 'mongoose';\nimport { Region, RegionSchema } from './region.entity';\n\n// We have each schema in it's own file (Open-Closed Principle)\n@Schema({\n  toJSON: {\n    virtuals: true,\n  },\n  timestamps: true,\n})\nexport class Applicant {\n  @Transform(({ value }) => value.toString())\n  _id: ObjectId;\n\n  @ApiProperty()\n  @Prop({ maxlength: 255, required: true, trim: true, uppercase: true })\n  fullName: string;\n\n  @ApiProperty()\n  @Prop({\n    index: true,\n    maxlength: 8,\n    required: true,\n    trim: true,\n    uppercase: true,\n  })\n  nationalId: string;\n\n  @ApiProperty()\n  @Prop({ type: Date, required: true })\n  dob: Date;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true })\n  gender: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true })\n  maritalStatus: string;\n\n  @ApiProperty()\n  @Prop([{ type: String, trim: true }])\n  telephone: string[];\n\n  /**\n   * The @Type(()=>Region) makes sure the class-tranformer\n   * transforms the Region object too\n   */\n  @ApiProperty({ type: Region, required: false })\n  @Prop({ type: RegionSchema })\n  @Type(() => Region)\n  region: Region;\n}\n\nexport type ApplicantDocument = Applicant & Document;\n\nexport const ApplicantSchema = SchemaFactory.createForClass(Applicant);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplicantSnippetDto.html":{"url":"classes/ApplicantSnippetDto.html","title":"class - ApplicantSnippetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplicantSnippetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/dto/applicant-snippet.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This only works with a generic transform interceptor that call plainToClass to\nconvert the object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                fullName\n                            \n                            \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Expose()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/applicant-snippet.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Expose()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/applicant-snippet.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Exclude, Expose } from 'class-transformer';\nimport { IsMongoId, IsString } from 'class-validator';\n\n/**\n * @summary Using @Exclude() and @Expose() to remove all but exposed properties\n * This only works with a generic transform interceptor that call plainToClass to\n * convert the object\n */\n@Exclude()\nexport class ApplicantSnippetDto {\n  @ApiProperty()\n  @Expose()\n  @IsMongoId()\n  readonly id: string;\n\n  @ApiProperty()\n  @Expose()\n  @IsString()\n  readonly fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ApplicantsController.html":{"url":"controllers/ApplicantsController.html","title":"controller - ApplicantsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ApplicantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/applicants.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                applicants\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                test\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createApplicantDto: CreateApplicantDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create applicant'})@ApiCreatedResponse({type: Applicant})\n                \n            \n\n            \n                \n                    Defined in src/applicants/applicants.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createApplicantDto\n                                    \n                                                CreateApplicantDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch list of applicants'})@ApiOkResponse({type: Applicant, isArray: true})@ApiQuery({name: 'limit', required: false})@ApiQuery({name: 'offset', required: false})\n                \n            \n\n            \n                \n                    Defined in src/applicants/applicants.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Fetch single applicant'})@ApiOkResponse({type: Applicant})\n                \n            \n\n            \n                \n                    Defined in src/applicants/applicants.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete single applicant'})@ApiOkResponse({type: Applicant})\n                \n            \n\n            \n                \n                    Defined in src/applicants/applicants.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('test')@ApiOkResponse({type: ApplicantSnippetDto})@UseInterceptors(new TransformInterceptor())\n                \n            \n\n            \n                \n                    Defined in src/applicants/applicants.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateApplicantDto: UpdateApplicantDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update single applicant'})@ApiOkResponse({type: Applicant})\n                \n            \n\n            \n                \n                    Defined in src/applicants/applicants.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateApplicantDto\n                                    \n                                                UpdateApplicantDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  UseInterceptors,\n  SerializeOptions,\n  Logger,\n} from '@nestjs/common';\nimport { PaginationQueryDto } from '../common/dto';\nimport { ApplicantsService } from './applicants.service';\nimport { CreateApplicantDto, UpdateApplicantDto } from './dto';\nimport {\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Applicant } from './entities';\nimport { ValidateObjectIdPipe } from '../common/pipes';\nimport { ApplyApiStatus } from '../common/decorators';\nimport { ApplicantSnippetDto } from './dto';\nimport {\n  MongooseClassSerializerInterceptor,\n  TransformInterceptor,\n} from '../common/interceptors';\n\n@Controller('applicants')\n@ApiTags('Applicants')\n@ApplyApiStatus(400, 401, 403, 404, 500)\n@UseInterceptors(MongooseClassSerializerInterceptor(Applicant))\n@SerializeOptions({\n  strategy: 'exposeAll',\n  excludePrefixes: ['_', '__'],\n})\nexport class ApplicantsController {\n  private readonly logger = new Logger(ApplicantsController.name);\n\n  constructor(private readonly applicantsService: ApplicantsService) {}\n\n  @Get('test')\n  @ApiOkResponse({ type: ApplicantSnippetDto })\n  @UseInterceptors(new TransformInterceptor(ApplicantSnippetDto))\n  async test(): Promise {\n    return await this.applicantsService.findOne('61d99fd2d27f5f73e2c93034');\n  }\n\n  @Post()\n  @ApiOperation({ summary: 'Create applicant' })\n  @ApiCreatedResponse({ type: Applicant })\n  async create(\n    @Body() createApplicantDto: CreateApplicantDto,\n  ): Promise {\n    return await this.applicantsService.create(createApplicantDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Fetch list of applicants' })\n  @ApiOkResponse({ type: Applicant, isArray: true })\n  @ApiQuery({ name: 'limit', required: false })\n  @ApiQuery({ name: 'offset', required: false })\n  async findAll(\n    @Query() paginationQuery: PaginationQueryDto,\n  ): Promise {\n    this.logger.log(`Hit the findAll route`);\n    const applicants = await this.applicantsService.findAll(paginationQuery);\n    this.logger.debug(`Found ${applicants.length} applicants`);\n    return applicants;\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Fetch single applicant' })\n  @ApiOkResponse({ type: Applicant })\n  async findOne(\n    @Param('id', ValidateObjectIdPipe) id: string,\n  ): Promise {\n    return await this.applicantsService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update single applicant' })\n  @ApiOkResponse({ type: Applicant })\n  async update(\n    @Param('id', ValidateObjectIdPipe) id: string,\n    @Body() updateApplicantDto: UpdateApplicantDto,\n  ): Promise {\n    return await this.applicantsService.update(id, updateApplicantDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete single applicant' })\n  @ApiOkResponse({ type: Applicant })\n  async remove(\n    @Param('id', ValidateObjectIdPipe) id: string,\n  ): Promise {\n    return await this.applicantsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApplicantsModule.html":{"url":"modules/ApplicantsModule.html","title":"module - ApplicantsModule","body":"\n                   \n\n\n\n\n    Modules\n    ApplicantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApplicantsModule\n\n\n\ncluster_ApplicantsModule_exports\n\n\n\ncluster_ApplicantsModule_providers\n\n\n\n\nApplicantsService \n\nApplicantsService \n\n\n\nApplicantsModule\n\nApplicantsModule\n\nApplicantsService  -->\n\nApplicantsModule->ApplicantsService \n\n\n\n\n\nApplicantsService\n\nApplicantsService\n\nApplicantsModule -->\n\nApplicantsService->ApplicantsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/applicants/applicants.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApplicantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ApplicantsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApplicantsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ApplicantsController } from './applicants.controller';\nimport { ApplicantsService } from './applicants.service';\nimport { Applicant, ApplicantSchema } from './entities';\nimport { Application, ApplicationSchema } from '../applications/entities';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Applicant.name,\n        schema: ApplicantSchema,\n      },\n      {\n        name: Application.name,\n        schema: ApplicationSchema,\n      },\n    ]),\n  ],\n  controllers: [ApplicantsController],\n  providers: [ApplicantsService],\n  exports: [ApplicantsService],\n})\nexport class ApplicantsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApplicantsService.html":{"url":"injectables/ApplicantsService.html","title":"injectable - ApplicantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApplicantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/applicants.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(applicantModel: Model, applicationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/applicants/applicants.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        applicantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        applicationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createApplicantDto: CreateApplicantDto)\n                \n            \n\n\n            \n                \n                    Defined in src/applicants/applicants.service.ts:31\n                \n            \n\n\n            \n                \n                    The National ID must be unique.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createApplicantDto\n                                    \n                                                CreateApplicantDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        fields to create the details of applicant\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Returns the applicant with the created information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/applicants/applicants.service.ts:51\n                \n            \n\n\n            \n                \n                    This can be paginated depending on query parameters passed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PaginationQueryDto(optional)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applicants/applicants.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applicants/applicants.service.ts:109\n                \n            \n\n\n            \n                \n                    It only deletes if there are no related records.\ne.g. The applicant has no applications.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string. Applicants ID\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateApplicantDto: UpdateApplicantDto)\n                \n            \n\n\n            \n                \n                    Defined in src/applicants/applicants.service.ts:80\n                \n            \n\n\n            \n                \n                    Update applicant with the specified id optimistically.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string\n\n                                    \n                                \n                                \n                                    updateApplicantDto\n                                    \n                                                UpdateApplicantDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        UpdateApplicantDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { PaginationQueryDto } from '../common/dto';\nimport { CreateApplicantDto, UpdateApplicantDto } from './dto';\nimport { Applicant, ApplicantDocument } from './entities';\nimport { Application, ApplicationDocument } from '../applications/entities';\nimport * as dot from 'dot-object';\n\n@Injectable()\nexport class ApplicantsService {\n  constructor(\n    @InjectModel(Applicant.name)\n    private readonly applicantModel: Model,\n    @InjectModel(Application.name)\n    private readonly applicationModel: Model,\n  ) {}\n\n  /**\n   * @summary Create a new applicant if they do not exist.\n   * The National ID must be unique.\n   * @param {CreateApplicantDto} createApplicantDto fields to create the details of applicant\n   * @returns {(Promise)} Returns the applicant with the created information\n   * @throws {BadRequestException} if applicant with the national id exists\n   * @memberof ApplicantsService\n   */\n  async create(createApplicantDto: CreateApplicantDto): Promise {\n    // Check if applicant exist\n    let applicant = await this.applicantModel\n      .findOne({ nationalId: createApplicantDto.nationalId })\n      .exec();\n\n    if (applicant)\n      throw new BadRequestException(`The applicant already exists`);\n\n    applicant = new this.applicantModel(createApplicantDto);\n\n    return await this.applicantModel.create(applicant);\n  }\n\n  /**\n   * @summary Find a list of applicants.\n   * This can be paginated depending on query parameters passed.\n   * @param paginationQuery PaginationQueryDto(optional)\n   * @returns Promise\n   */\n  async findAll(paginationQuery: PaginationQueryDto): Promise {\n    const { limit, offset } = paginationQuery;\n    return await this.applicantModel.find().skip(offset).limit(limit).exec();\n  }\n\n  /**\n   * @summary Find a single applicant with the specified id\n   * @param id string\n   * @returns Promise \n   * @throws NotFoundException if applicant record is not found\n   */\n  async findOne(id: string): Promise {\n    const applicant = await this.applicantModel.findById(id).exec();\n\n    if (!applicant)\n      throw new NotFoundException(\n        `The applicant with the given id was not found`,\n      );\n\n    return applicant;\n  }\n\n  /**\n   * Update applicant with the specified id optimistically.\n   * @param id string\n   * @param updateApplicantDto UpdateApplicantDto\n   * @returns Promise\n   * @throws NotFoundException if applicant record is not found\n   */\n  async update(\n    id: string,\n    updateApplicantDto: UpdateApplicantDto,\n  ): Promise {\n    // Prepare object to update nested object fields separately\n    dot.keepArray = true;\n    const tgt = dot.dot(updateApplicantDto);\n\n    const existingApplicant = await this.applicantModel\n      .findByIdAndUpdate(id, { $set: tgt }, { new: true })\n      .exec();\n\n    if (!existingApplicant)\n      throw new NotFoundException(\n        `The applicant with the given id was not found`,\n      );\n\n    return existingApplicant;\n  }\n\n  /**\n   * @summary Delete applicant with the specified id optimistically.\n   * It only deletes if there are no related records.\n   * e.g. The applicant has no applications.\n   * @param id string. Applicants ID\n   * @returns Promise\n   * @throws BadRequestException when applicant has related records\n   * @throws NotFoundException if applicant record is not found\n   */\n  async remove(id: string): Promise {\n    // Check for related records - whether an applicant has an application\n    const application = await this.applicationModel\n      .findOne({ 'applicant.id': id })\n      .exec();\n\n    if (application)\n      throw new BadRequestException(\n        'The applicant with the given ID CANNOT be deleted. There is related data.',\n      );\n\n    const applicant = await this.applicantModel.findByIdAndRemove(id).exec();\n\n    if (!applicant)\n      throw new NotFoundException(\n        `The applicant with the given id was not found`,\n      );\n\n    return applicant;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Application.html":{"url":"classes/Application.html","title":"class - Application","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Application\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/entities/application.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                applicant\n                            \n                            \n                                chapterSix\n                            \n                            \n                                files\n                            \n                            \n                                isDisabled\n                            \n                            \n                                job\n                            \n                            \n                                ppr\n                            \n                            \n                                qualifications\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applicant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Applicant\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Applicant, required: true})@Prop({type: ApplicantSchema, required: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chapterSix\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FileDocument[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: FileDocument, isArray: true, required: false})@Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        job\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Job\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Job, required: true})@Prop({type: JobSchema, required: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ppr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@Prop({maxlength: 255, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qualifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Qualification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Qualification, isArray: true, required: false})@Prop({type: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/application.entity.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Transform, Type } from 'class-transformer';\nimport { Document, ObjectId } from 'mongoose';\nimport { Qualification, QualificationSchema } from './qualification.entity';\nimport { FileDocument, FileDocumentSchema } from './file-document.entity';\nimport { Applicant, ApplicantSchema } from '../../applicants/entities';\nimport { Job, JobSchema } from '../../jobs/entities';\n\n// We have each schema in it's own file (Open-Closed Principle)\n@Schema({\n  toJSON: {\n    virtuals: true,\n  },\n  timestamps: true,\n})\nexport class Application {\n  @Transform(({ value }) => value.toString())\n  _id: ObjectId;\n\n  @ApiProperty({ type: Job, required: true })\n  @Prop({\n    type: JobSchema,\n    required: true,\n  })\n  @Type(() => Job)\n  job: Job;\n\n  @ApiProperty({ type: Applicant, required: true })\n  @Prop({\n    type: ApplicantSchema,\n    required: true,\n  })\n  @Type(() => Applicant)\n  applicant: Applicant;\n\n  @ApiProperty({ required: false })\n  @Prop({ default: false })\n  isDisabled: boolean;\n\n  @ApiProperty({ type: Qualification, isArray: true, required: false })\n  @Prop({ type: [QualificationSchema], default: [] })\n  qualifications: Qualification[];\n\n  @ApiProperty({ required: false })\n  @Prop({ maxlength: 255, trim: true, uppercase: true })\n  ppr: string;\n\n  @ApiProperty({ required: false })\n  @Prop([{ type: String, trim: true }])\n  chapterSix: string[];\n\n  @ApiProperty({ type: FileDocument, isArray: true, required: false })\n  @Prop({ type: [FileDocumentSchema], default: [] })\n  files: FileDocument[];\n}\n\nexport type ApplicationDocument = Application & Document;\n\nexport const ApplicationSchema = SchemaFactory.createForClass(Application);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ApplicationsController.html":{"url":"controllers/ApplicationsController.html","title":"controller - ApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllApplicantApplications\n                            \n                            \n                                    Async\n                                findAllJobApplications\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createApplicationDto: CreateApplicationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a single application'})@ApiCreatedResponse({type: Application})\n                \n            \n\n            \n                \n                    Defined in src/applications/applications.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createApplicationDto\n                                    \n                                                CreateApplicationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch list of applications'})@ApiOkResponse({type: Application, isArray: true})@ApiQuery({name: 'limit', required: false})@ApiQuery({name: 'offset', required: false})\n                \n            \n\n            \n                \n                    Defined in src/applications/applications.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllApplicantApplications\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllApplicantApplications(applicantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('applicant/:applicantId')@ApiOperation({summary: 'Fetch list of applications to a single applicant'})@ApiOkResponse({type: Application, isArray: true})\n                \n            \n\n            \n                \n                    Defined in src/applications/applications.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    applicantId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllJobApplications\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllJobApplications(jobId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('job/:jobId')@ApiOperation({summary: 'Fetch list of applications to a specific job'})@ApiOkResponse({type: Application, isArray: true})\n                \n            \n\n            \n                \n                    Defined in src/applications/applications.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    jobId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Fetch single application'})@ApiOkResponse({type: Application})\n                \n            \n\n            \n                \n                    Defined in src/applications/applications.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete single application'})@ApiOkResponse({type: Application})\n                \n            \n\n            \n                \n                    Defined in src/applications/applications.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateApplicationDto: UpdateApplicationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update single application'})@ApiOkResponse({type: Application})\n                \n            \n\n            \n                \n                    Defined in src/applications/applications.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateApplicationDto\n                                    \n                                                UpdateApplicationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  SerializeOptions,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ApplicationsService } from './applications.service';\nimport { CreateApplicationDto, UpdateApplicationDto } from './dto';\nimport { ApplyApiStatus } from '../common/decorators';\nimport { Application } from '../applications/entities';\nimport { PaginationQueryDto } from '../common/dto';\nimport { MongooseClassSerializerInterceptor } from '../common/interceptors';\nimport { ValidateObjectIdPipe } from '../common/pipes';\n\n@Controller('applications')\n@ApiTags('Applications')\n@ApplyApiStatus(400, 401, 403, 404, 500)\n@UseInterceptors(MongooseClassSerializerInterceptor(Application))\n@SerializeOptions({\n  strategy: 'exposeAll',\n  excludePrefixes: ['_', '__'],\n})\nexport class ApplicationsController {\n  constructor(private readonly applicationsService: ApplicationsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a single application' })\n  @ApiCreatedResponse({ type: Application })\n  async create(\n    @Body() createApplicationDto: CreateApplicationDto,\n  ): Promise {\n    return await this.applicationsService.create(createApplicationDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Fetch list of applications' })\n  @ApiOkResponse({ type: Application, isArray: true })\n  @ApiQuery({ name: 'limit', required: false })\n  @ApiQuery({ name: 'offset', required: false })\n  async findAll(\n    @Query() paginationQuery: PaginationQueryDto,\n  ): Promise {\n    return await this.applicationsService.findAll(paginationQuery);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Fetch single application' })\n  @ApiOkResponse({ type: Application })\n  async findOne(\n    @Param('id', ValidateObjectIdPipe) id: string,\n  ): Promise {\n    return await this.applicationsService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update single application' })\n  @ApiOkResponse({ type: Application })\n  async update(\n    @Param('id', ValidateObjectIdPipe) id: string,\n    @Body() updateApplicationDto: UpdateApplicationDto,\n  ): Promise {\n    return await this.applicationsService.update(id, updateApplicationDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete single application' })\n  @ApiOkResponse({ type: Application })\n  async remove(\n    @Param('id', ValidateObjectIdPipe) id: string,\n  ): Promise {\n    return await this.applicationsService.remove(id);\n  }\n\n  @Get('applicant/:applicantId')\n  @ApiOperation({ summary: 'Fetch list of applications to a single applicant' })\n  @ApiOkResponse({ type: Application, isArray: true })\n  async findAllApplicantApplications(\n    @Param('applicantId', ValidateObjectIdPipe) applicantId: string,\n  ) {\n    return await this.applicationsService.findAllApplicantApplications(\n      applicantId,\n    );\n  }\n\n  @Get('job/:jobId')\n  @ApiOperation({ summary: 'Fetch list of applications to a specific job' })\n  @ApiOkResponse({ type: Application, isArray: true })\n  async findAllJobApplications(\n    @Param('jobId', ValidateObjectIdPipe) jobId: string,\n  ) {\n    return await this.applicationsService.findAllJobApplications(jobId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApplicationsModule.html":{"url":"modules/ApplicationsModule.html","title":"module - ApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApplicationsModule\n\n\n\ncluster_ApplicationsModule_exports\n\n\n\ncluster_ApplicationsModule_providers\n\n\n\n\nApplicationsService \n\nApplicationsService \n\n\n\nApplicationsModule\n\nApplicationsModule\n\nApplicationsService  -->\n\nApplicationsModule->ApplicationsService \n\n\n\n\n\nApplicationsService\n\nApplicationsService\n\nApplicationsModule -->\n\nApplicationsService->ApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/applications/applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApplicationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ApplicationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Applicant, ApplicantSchema } from '../applicants/entities';\nimport { Job, JobSchema } from '../jobs/entities';\nimport { ApplicationsController } from './applications.controller';\nimport { ApplicationsService } from './applications.service';\nimport { Application, ApplicationSchema } from './entities';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Applicant.name,\n        schema: ApplicantSchema,\n      },\n      {\n        name: Application.name,\n        schema: ApplicationSchema,\n      },\n      {\n        name: Job.name,\n        schema: JobSchema,\n      },\n    ]),\n  ],\n  controllers: [ApplicationsController],\n  providers: [ApplicationsService],\n  exports: [ApplicationsService],\n})\nexport class ApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApplicationsService.html":{"url":"injectables/ApplicationsService.html","title":"injectable - ApplicationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApplicationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/applications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkApplicationDependencies\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllApplicantApplications\n                            \n                            \n                                    Async\n                                findAllJobApplications\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                uploadFiles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(applicationModel: Model, jobModel: Model, applicantModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/applications/applications.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        applicationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jobModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        applicantModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkApplicationDependencies\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkApplicationDependencies(jobId: string, applicantId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:36\n                \n            \n\n\n            \n                \n                    do not exist\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jobId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string\n\n                                    \n                                \n                                \n                                    applicantId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        job and applicant\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createApplicationDto: CreateApplicationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:56\n                \n            \n\n\n            \n                \n                    and applicant id specified in the DTO does not exist\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createApplicationDto\n                                    \n                                                CreateApplicationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The application object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        application\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        PaginationQueryDto(optional)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of applications\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllApplicantApplications\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllApplicantApplications(applicantId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    applicantId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The applicant's id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        List of applications made by the applicant\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllJobApplications\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllJobApplications(jobId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jobId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The job id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        List of applicants for the job\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:114\n                \n            \n\n\n            \n                \n                    Find a single application\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The application id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An application\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The application id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The deleted application\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateApplicationDto: UpdateApplicationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The application id\n\n                                    \n                                \n                                \n                                    updateApplicationDto\n                                    \n                                                UpdateApplicationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The updated application object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated application\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFiles\n                        \n                    \n                \n            \n            \n                \nuploadFiles(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/applications/applications.service.ts:179\n                \n            \n\n\n            \n                \n                    Upload files to folder and update related record\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The application id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ApplicationsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/applications/applications.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Applicant, ApplicantDocument } from '../applicants/entities';\nimport { Job, JobDocument } from '../jobs/entities';\nimport { CreateApplicationDto, UpdateApplicationDto } from './dto';\nimport { Application, ApplicationDocument } from './entities';\nimport { PaginationQueryDto } from '../common/dto';\nimport * as dot from 'dot-object';\n\n@Injectable()\nexport class ApplicationsService {\n  private readonly logger = new Logger(ApplicationsService.name);\n\n  constructor(\n    @InjectModel(Application.name)\n    private readonly applicationModel: Model,\n    @InjectModel(Job.name) private readonly jobModel: Model,\n    @InjectModel(Applicant.name)\n    private readonly applicantModel: Model,\n  ) {}\n\n  /**\n   * @summary Checks whether a job and applicant with the specified id's exist.\n   * @param jobId string\n   * @param applicantId string\n   * @returns job and applicant\n   * @throws BadRequestException if a job or applicant with specified id's\n   * do not exist\n   */\n  private async checkApplicationDependencies(\n    jobId: string,\n    applicantId: string,\n  ) {\n    const job = await this.jobModel.findById(jobId);\n    if (!job) throw new BadRequestException('Invalid job.');\n\n    const applicant = await this.applicantModel.findById(applicantId);\n    if (!applicant) throw new BadRequestException('Invalid applicant.');\n\n    return { job, applicant };\n  }\n\n  /**\n   * @summary Creates an application, ONLY if an application with the job id\n   * and applicant id specified in the DTO does not exist\n   * @param id The application id\n   * @param createApplicationDto The application object\n   * @returns application\n   */\n  async create(\n    createApplicationDto: CreateApplicationDto,\n  ): Promise {\n    const { jobId, applicantId } = createApplicationDto;\n    const { job, applicant } = await this.checkApplicationDependencies(\n      jobId,\n      applicantId,\n    );\n\n    const applicationExists = await this.applicationModel\n      .findOne({\n        'job._id': job.id,\n        'applicant._id': applicant.id,\n      })\n      .exec();\n\n    if (applicationExists)\n      throw new BadRequestException(\n        'A similar application has already been recorded for the given job by the said applicant.',\n      );\n\n    const { isDisabled, qualifications, ppr, files, documents } =\n      createApplicationDto;\n\n    const application = new this.applicationModel({\n      job,\n      applicant,\n      isDisabled,\n      qualifications,\n      ppr,\n      chapterSix: documents,\n      files,\n    });\n\n    return await this.applicationModel.create(application);\n  }\n\n  /**\n   * @summary Fetch all applications\n   * @param paginationQuery PaginationQueryDto(optional)\n   * @returns List of applications\n   */\n  async findAll(paginationQuery: PaginationQueryDto): Promise {\n    const { offset, limit } = paginationQuery;\n\n    const applications = await this.applicationModel\n      .find()\n      .sort('createdAt')\n      .skip(offset)\n      .limit(limit)\n      .exec();\n    return applications;\n  }\n\n  /**Find a single application\n   * @param id The application id\n   * @returns An application\n   */\n  async findOne(id: string): Promise {\n    return await this.applicationModel.findById(id).exec();\n  }\n\n  /**\n   * @summary Updates an application\n   * @param id The application id\n   * @param updateApplicationDto The updated application object\n   * @returns The updated application\n   */\n  async update(\n    id: string,\n    updateApplicationDto: UpdateApplicationDto,\n  ): Promise {\n    const { documents, chapterSix, ...rest } = updateApplicationDto;\n\n    // Prepare object to update nested object fields separately\n    // May not really be required in this case but just as a future precaution\n    dot.keepArray = true;\n    const tgt = dot.dot({ ...rest });\n    let dto = { ...tgt };\n\n    if (documents) {\n      dto = dot.dot({\n        ...tgt,\n        chapterSix: documents,\n      });\n    }\n\n    this.logger.debug({ dto });\n\n    const application = await this.applicationModel\n      .findByIdAndUpdate(id, { $set: dto }, { new: true })\n      .exec();\n\n    if (!application)\n      throw new NotFoundException(\n        'The application with the given ID was not found.',\n      );\n\n    return application;\n  }\n\n  /**\n   * @summary Deletes an application\n   * @param id The application id\n   * @returns The deleted application\n   */\n  async remove(id: string): Promise {\n    const application = await this.applicationModel\n      .findByIdAndRemove(id)\n      .exec();\n\n    if (!application)\n      throw new NotFoundException(\n        'The application with the given ID was not found.',\n      );\n\n    return application;\n  }\n\n  /**Upload files to folder and update related record\n   * @todo NEEDS IMPLEMENTATION USING MULTER\n   * @param id The application id\n   */\n  uploadFiles(id: string) {}\n\n  /**\n   * @summary Finds all applications to an applicant\n   * @param applicantId The applicant's id\n   * @returns List of applications made by the applicant\n   */\n  async findAllApplicantApplications(applicantId: string): Promise {\n    const applications = await this.applicationModel\n      .find({ 'applicant._id': applicantId })\n      .exec();\n\n    return applications;\n  }\n\n  /**\n   * @summary Finds all applications for a specific job\n   * @param jobId The job id\n   * @returns List of applicants for the job\n   */\n  async findAllJobApplications(jobId: string) {\n    const applications = await this.applicationModel\n      .find({ 'job._id': jobId })\n      .exec();\n\n    return applications;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _cookieResponse\n                            \n                            \n                                getHello\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _cookieResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    _cookieResponse(response: ExpressResponse, access_token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            ExpressResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    access_token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('public')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: ExpressRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: Fetch currently logged in user's profile})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            ExpressRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(req: ExpressRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('protected')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            ExpressRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: ExpressRequest, authDto: AuthDto, response: ExpressResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Post('login')@ApiOperation({summary: 'Login'})@Public()@UseGuards(LocalAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            ExpressRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            ExpressResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(response: ExpressResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Post('logout')@ApiOperation({summary: 'Logout'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:87\n                \n            \n\n\n            \n                \n                    as the cookie is not accessible from the front-end\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            ExpressResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { message: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createUserDto: CreateUserDto, response: ExpressResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@ApiOperation({summary: 'Registration'})@Public()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            ExpressResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  Post,\n  Res,\n  Request,\n  UseGuards,\n  Get,\n  Logger,\n  Req,\n} from '@nestjs/common';\nimport {\n  Response as ExpressResponse,\n  Request as ExpressRequest,\n} from 'express';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { Public } from './decorators';\nimport { CreateUserDto } from '../users/dto';\nimport { LocalAuthGuard } from './guards';\nimport { AuthDto } from './dto';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  private readonly logger = new Logger(AuthController.name);\n\n  constructor(private readonly authService: AuthService) {}\n\n  private _cookieResponse(response: ExpressResponse, access_token: string) {\n    this.logger.debug({ access_token });\n    response\n      .cookie('jwt', access_token, {\n        httpOnly: true,\n        domain: 'localhost',\n        expires: new Date(Date.now() + 1000 * 60 * 60 * 8),\n      })\n      .send({ access_token, message: `Token successfully created` });\n  }\n\n  @Post('register')\n  @ApiOperation({ summary: 'Registration' })\n  @Public()\n  async register(\n    @Body() createUserDto: CreateUserDto,\n    @Res() response: ExpressResponse,\n  ): Promise {\n    const { access_token } = await this.authService.register(createUserDto);\n    // Sending token as a cookie\n    this._cookieResponse(response, access_token);\n  }\n\n  @HttpCode(200)\n  @Post('login')\n  @ApiOperation({ summary: 'Login' })\n  @Public()\n  @UseGuards(LocalAuthGuard)\n  async login(\n    @Request() req: ExpressRequest,\n    @Body() authDto: AuthDto,\n    @Res() response: ExpressResponse,\n  ): Promise {\n    const { access_token } = await this.authService.login(req.user);\n    // Sending token as a cookie\n    this._cookieResponse(response, access_token);\n  }\n\n  @Get('protected')\n  getUser(@Request() req: ExpressRequest): any {\n    return req.user;\n  }\n\n  @Public()\n  @Get('public')\n  getHello(): string {\n    return 'This route is Public hence not protected';\n  }\n\n  /**\n   * @summary Must be called from front-end in order to logout\n   * as the cookie is not accessible from the front-end\n   */\n  @HttpCode(200)\n  @Post('logout')\n  @ApiOperation({ summary: 'Logout' })\n  logout(@Res({ passthrough: true }) response: ExpressResponse) {\n    response.clearCookie('jwt');\n\n    return { message: 'Successfully logged out' };\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: `Fetch currently logged in user's profile` })\n  async getProfile(@Req() req: ExpressRequest) {\n    const user: any = req.user;\n\n    return await this.authService.findOne(user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '12345678'})@IsString()@IsNotEmpty()@MaxLength(50)@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'johndoe@gmail.com'})@IsEmail()@IsNotEmpty()@MaxLength(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class AuthDto {\n  @ApiProperty({ example: 'johndoe@gmail.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(50)\n  username: string;\n\n  @ApiProperty({ example: '12345678' })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(50)\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy, LocalStrategy } from './strategys';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport {\n  AppConfiguration,\n  appConfiguration,\n} from '../feature-config/configuration';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      inject: [appConfiguration.KEY],\n      useFactory: async (config: AppConfiguration) => {\n        return {\n          secret: config.jwtPrivateKey,\n          signOptions: { expiresIn: config.jwtExpiresIn },\n        };\n      },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateJwtPayload\n                            \n                            \n                                    Async\n                                validateUserLocal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateJwtPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateJwtPayload(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:71\n                \n            \n\n\n            \n                \n                    It is used once the user is logged in and has a JWT token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUserLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserLocal(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as _ from 'lodash';\nimport { CreateUserDto } from '../users/dto';\nimport { UserDocument } from '../users/entities';\nimport { UsersService } from '../users/users.service';\nimport { JwtPayload } from './types';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async validateUserLocal(email: string, password: string): Promise {\n    try {\n      let user: UserDocument | undefined =\n        await this.usersService.findOneByEmail(email);\n\n      if (!user) return undefined;\n\n      // Check supplied password against the hash\n      if (!(await user?.validatePassword(password))) return undefined;\n\n      // For active users update the last access date\n      if (user.isActive) {\n        user.lastAccessedOn = new Date();\n        await user.save();\n      }\n\n      const result = _.pick(user, [\n        'id',\n        'fullName',\n        'email',\n        'role',\n        'isActive',\n      ]);\n\n      return result;\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  async login(user: any): Promise {\n    const payload: JwtPayload = {\n      name: user.fullName,\n      email: user.email,\n      role: user.role,\n      sub: user.id,\n    };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(createUserDto: CreateUserDto): Promise {\n    const user = await this.usersService.create(createUserDto);\n    return await this.login(user);\n  }\n\n  /**\n   * @summary Verifies that the payload is valid and the user's account is active/enabled.\n   * It is used once the user is logged in and has a JWT token\n   * @param {JwtPayload} payload\n   * @returns {(Promise)}\n   * @memberof AuthService\n   */\n  async validateJwtPayload(\n    payload: JwtPayload,\n  ): Promise {\n    const user = await this.usersService.findOneById(payload.sub);\n\n    if (!user) return undefined;\n\n    // Update user if their account is active\n    if (user.isActive) {\n      user.lastAccessedOn = new Date();\n      await user.save();\n    }\n\n    return user;\n  }\n\n  async findOne(id: string): Promise {\n    const { password, ...rest } = await this.usersService.findOne(id);\n    return rest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassType.html":{"url":"interfaces/ClassType.html","title":"interface - ClassType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClassType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface ClassType {\n  new (): T;\n}\n\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor, T> {\n  constructor(private readonly classType: ClassType) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map((data) => plainToClass(this.classType, data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/common/common.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { ApiKeyGuard } from './guards';\nimport { LoggingMiddleware } from './middleware';\n\n@Module({\n  // providers: [{ provide: APP_GUARD, useClass: ApiKeyGuard }],\n})\nexport class CommonModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    //Add middleware\n    // consumer.apply(LoggingMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateApplicantDto.html":{"url":"classes/CreateApplicantDto.html","title":"class - CreateApplicantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateApplicantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/dto/create-applicant.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                dob\n                            \n                            \n                                    Readonly\n                                fullName\n                            \n                            \n                                    Readonly\n                                gender\n                            \n                            \n                                    Readonly\n                                maritalStatus\n                            \n                            \n                                    Readonly\n                                nationalId\n                            \n                            \n                                    Readonly\n                                region\n                            \n                            \n                                    Readonly\n                                telephone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2022-01-04'})@IsDateString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/create-applicant.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/create-applicant.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: Gender, example: undefined})@IsEnum(Gender, {message: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/create-applicant.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        maritalStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: MaritalStatus, example: undefined})@IsEnum(MaritalStatus, {message: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/create-applicant.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        nationalId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '24011150'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/create-applicant.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegionDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: RegionDto})@IsOptional()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/create-applicant.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        telephone\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, isArray: true, example: undefined})@IsString({each: true})@IsNotEmpty({each: true})@ArrayUnique()@ArrayMinSize(1)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/create-applicant.dto.ts:64\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  ArrayUnique,\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Gender, MaritalStatus } from '../enums';\nimport { RegionDto } from './region.dto';\n\nexport class CreateApplicantDto {\n  @ApiProperty({\n    example: 'John Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  readonly fullName: string;\n\n  @ApiProperty({\n    example: '24011150',\n  })\n  @IsString()\n  @IsNotEmpty()\n  readonly nationalId: string;\n\n  @ApiProperty({\n    example: '2022-01-04',\n  })\n  @IsDateString()\n  @IsNotEmpty()\n  readonly dob: string;\n\n  @ApiProperty({ enum: Gender, example: Gender.Male })\n  @IsEnum(Gender, {\n    message: `Gender must be one of these ${Object.keys(Gender)}`,\n  })\n  @IsNotEmpty()\n  readonly gender: string;\n\n  @ApiProperty({ enum: MaritalStatus, example: MaritalStatus.Single })\n  @IsEnum(MaritalStatus, {\n    message: `Marital status must be one of these ${Object.keys(\n      MaritalStatus,\n    )}`,\n  })\n  @IsNotEmpty()\n  readonly maritalStatus: string;\n\n  @ApiProperty({\n    type: String,\n    isArray: true,\n    example: ['0712659790', '0770511643'],\n  })\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @ArrayUnique()\n  @ArrayMinSize(1)\n  @IsArray()\n  readonly telephone: string[];\n\n  @ApiProperty({ type: RegionDto })\n  @IsOptional()\n  @Type(() => RegionDto)\n  readonly region: RegionDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateApplicationDto.html":{"url":"classes/CreateApplicationDto.html","title":"class - CreateApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/dto/create-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        UpdateApplicationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                applicantId\n                            \n                            \n                                files\n                            \n                            \n                                jobId\n                            \n                            \n                                chapterSix\n                            \n                            \n                                isDisabled\n                            \n                            \n                                ppr\n                            \n                            \n                                qualifications\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        applicantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/create-application.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FileDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List of uploaded files', type: FileDto, isArray: true, required: false})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/create-application.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jobId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/create-application.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chapterSix\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'List of Chapter Six documents', isArray: true, enum: ChapterSix, enumName: 'ChapterSix', example: undefined})@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateApplicationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateApplicationDto:57\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateApplicationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateApplicationDto:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ppr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Position of progressive responsibility', example: 'Intern at the University of Nairobi'})@IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateApplicationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateApplicationDto:44\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qualifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QualificationDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'List of qualifications', type: QualificationDto, isArray: true})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateApplicationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateApplicationDto:36\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  ValidateNested,\n} from 'class-validator';\nimport { FileDto } from './file.dto';\nimport { UpdateApplicationDto } from './update-application.dto';\n\nexport class CreateApplicationDto extends UpdateApplicationDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsMongoId()\n  jobId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsMongoId()\n  applicantId: string;\n\n  @ApiProperty({\n    description: 'List of uploaded files',\n    type: FileDto,\n    isArray: true,\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => FileDto)\n  files: FileDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFileDto.html":{"url":"classes/CreateFileDto.html","title":"class - CreateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/dto/create-file.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                destination\n                            \n                            \n                                encoding\n                            \n                            \n                                fieldname\n                            \n                            \n                                filename\n                            \n                            \n                                mimetype\n                            \n                            \n                                originalname\n                            \n                            \n                                path\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encoding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fieldname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/files/dto/create-file.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFileDto {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  destination: string;\n  filename: string;\n  path: string;\n  size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateJobDto.html":{"url":"classes/CreateJobDto.html","title":"class - CreateJobDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateJobDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/dto/create-job.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code\n                            \n                            \n                                    Readonly\n                                datePublished\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                noOfVacancies\n                            \n                            \n                                    Readonly\n                                organizationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        datePublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        noOfVacancies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsPositive()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        organizationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsMongoId()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/dto/create-job.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDateString,\n  IsMongoId,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsPositive,\n  IsString,\n} from 'class-validator';\n\nexport class CreateJobDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly code: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly name: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  readonly description: string;\n\n  @ApiProperty()\n  @IsPositive()\n  @IsNumber()\n  @IsNotEmpty()\n  readonly noOfVacancies: number;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsMongoId()\n  @IsNotEmpty()\n  readonly organizationId: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsDateString()\n  readonly datePublished: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrganizationDto.html":{"url":"classes/CreateOrganizationDto.html","title":"class - CreateOrganizationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrganizationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organizations/dto/create-organization.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organizations/dto/create-organization.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organizations/dto/create-organization.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organizations/dto/create-organization.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateOrganizationDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly code: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  readonly description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                password_confirm\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'johndoe@gmail.com'})@IsEmail()@MaxLength(50)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John'})@IsString()@MaxLength(50)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe'})@IsString()@MaxLength(50)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '12345678'})@IsString()@MaxLength(50)@MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password_confirm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '12345678'})@IsString()@MaxLength(50)@MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: Role, example: undefined})@IsEnum(Role, {message: undefined})@Transform( => )@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Transform } from 'class-transformer';\nimport {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { toUpper } from 'lodash';\nimport { Role } from '../enums';\n\nexport class CreateUserDto {\n  @ApiProperty({ example: 'John' })\n  @IsString()\n  @MaxLength(50)\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiProperty({ example: 'Doe' })\n  @IsString()\n  @MaxLength(50)\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiProperty({ example: 'johndoe@gmail.com' })\n  @IsEmail()\n  @MaxLength(50)\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({ example: '12345678' })\n  @IsString()\n  @MaxLength(50)\n  @MinLength(8)\n  @IsNotEmpty()\n  password: string;\n\n  @ApiProperty({ example: '12345678' })\n  @IsString()\n  @MaxLength(50)\n  @MinLength(8)\n  @IsNotEmpty()\n  password_confirm: string;\n\n  @ApiProperty({ enum: Role, example: Role.ADMIN })\n  @IsEnum(Role, { message: `Role must be one of these ${Object.keys(Role)}` })\n  @Transform(({ value }) => toUpper(value))\n  @IsNotEmpty()\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport {\n  MongoConfiguration,\n  mongoConfiguration,\n} from 'src/feature-config/configuration';\n\n@Module({\n  imports: [\n    MongooseModule.forRootAsync({\n      inject: [mongoConfiguration.KEY],\n      useFactory: (config: MongoConfiguration) => {\n        return {\n          uri: config.uri,\n          dbName: config.dbName,\n        };\n      },\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityRepository.html":{"url":"classes/EntityRepository.html","title":"class - EntityRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/entity.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByIdAndRemove\n                            \n                            \n                                    Async\n                                findByIdAndUpdate\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneAndRemove\n                            \n                            \n                                    Async\n                                findOneAndUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entityModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/database/entity.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEntityData)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntityData\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(entityFilterQuery?: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(entityFilterQuery?: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdAndRemove\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndRemove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndUpdate(id: string, updateEntityData: UpdateQuery<>)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(entityFilterQuery: FilterQuery, projection?: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneAndRemove\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneAndRemove(entityFilterQuery: FilterQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneAndUpdate(entityFilterQuery: FilterQuery, updateEntityData: UpdateQuery<>)\n                \n            \n\n\n            \n                \n                    Defined in src/database/entity.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Document, FilterQuery, Model, UpdateQuery } from 'mongoose';\n\n/**\n * @summary abstract repository class for mongodb\n */\nexport abstract class EntityRepository {\n  constructor(protected readonly entityModel: Model) {}\n\n  async find(entityFilterQuery?: FilterQuery): Promise {\n    return this.entityModel.find(entityFilterQuery);\n  }\n\n  /* async findOne(entityFilterQuery: FilterQuery): Promise {\n    return this.entityModel.findOne(entityFilterQuery);\n  } */\n\n  async findOne(\n    entityFilterQuery: FilterQuery,\n    projection?: Record,\n  ): Promise {\n    return this.entityModel\n      .findOne(entityFilterQuery, { _id: 0, __v: 0, ...projection })\n      .exec();\n  }\n\n  async findOneAndRemove(entityFilterQuery: FilterQuery): Promise {\n    return this.entityModel.findOneAndRemove(entityFilterQuery);\n  }\n\n  async findOneAndUpdate(\n    entityFilterQuery: FilterQuery,\n    updateEntityData: UpdateQuery,\n  ): Promise {\n    return this.entityModel.findOneAndUpdate(\n      entityFilterQuery,\n      updateEntityData,\n      {\n        new: true,\n      },\n    );\n  }\n\n  async findById(id: string): Promise {\n    return this.entityModel.findById(id);\n  }\n\n  async findByIdAndRemove(id: string): Promise {\n    return this.entityModel.findByIdAndRemove(id);\n  }\n\n  async findByIdAndUpdate(\n    id: string,\n    updateEntityData: UpdateQuery,\n  ): Promise {\n    return this.entityModel.findByIdAndUpdate(id, updateEntityData, {\n      new: true,\n    });\n  }\n\n  async create(createEntityData: unknown): Promise {\n    return this.entityModel.create(createEntityData);\n  }\n\n  async deleteMany(entityFilterQuery?: FilterQuery): Promise {\n    const result = await this.entityModel.deleteMany(entityFilterQuery);\n    return result.deletedCount >= 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeatureConfigModule.html":{"url":"modules/FeatureConfigModule.html","title":"module - FeatureConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    FeatureConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/feature-config/feature-config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport {\n  appConfiguration,\n  mongoConfiguration,\n  multerConfiguration,\n} from './configuration';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [appConfiguration, mongoConfiguration, multerConfiguration],\n      expandVariables: true,\n    }),\n  ],\n  providers: [],\n  exports: [],\n})\nexport class FeatureConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/File.html":{"url":"classes/File.html","title":"class - File","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  File\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/entities/file.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                destination\n                            \n                            \n                                encoding\n                            \n                            \n                                fieldname\n                            \n                            \n                                filename\n                            \n                            \n                                mimetype\n                            \n                            \n                                originalname\n                            \n                            \n                                path\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encoding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fieldname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mimetype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/files/entities/file.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport class File {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  destination: string;\n  filename: string;\n  path: string;\n  size: number;\n}\n\nexport type FileDocument = File & Document;\n\nexport const FileSchema = SchemaFactory.createForClass(File);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileDocument.html":{"url":"classes/FileDocument.html","title":"class - FileDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/entities/file-document.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filename\n                            \n                            \n                                title\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/file-document.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/file-document.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/file-document.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n// We disable Mongo's _id on embeded subdocuments, but we do not have to\n@Schema({ _id: false })\nexport class FileDocument {\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true })\n  title: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true })\n  filename: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true })\n  uri: string;\n}\n\n// Generate a Mongoose Schema before use as Subdocument\nexport const FileDocumentSchema = SchemaFactory.createForClass(FileDocument);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileDto.html":{"url":"classes/FileDto.html","title":"class - FileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/dto/file.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                filename\n                            \n                            \n                                    Readonly\n                                title\n                            \n                            \n                                    Readonly\n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        filename\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/file.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/file.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/file.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class FileDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly title: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly filename: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  readonly uri: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FilesController.html":{"url":"controllers/FilesController.html","title":"controller - FilesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FilesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                attachment/files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                download\n                            \n                            \n                                remove\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        download\n                        \n                    \n                \n            \n            \n                \ndownload(fileId: string, res: ExpressResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':fileId')@ApiOperation({summary: 'Download single file'})@ApiResponse({status: 200, description: 'The found file'})\n                \n            \n\n            \n                \n                    Defined in src/files/files.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            ExpressResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete single file'})@ApiResponse({status: 200, description: 'The deleted file', type: File})\n                \n            \n\n            \n                \n                    Defined in src/files/files.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: Express.Multer.File, body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload single file'})@ApiResponse({status: 201, description: 'File created/uploaded'})@ApiPayloadTooLargeResponse()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/files/files.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UploadedFile,\n  Res,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { FilesService } from './files.service';\nimport { Public } from '../auth/decorators';\nimport { Express, Response as ExpressResponse } from 'express';\nimport {\n  ApiBearerAuth,\n  ApiConsumes,\n  ApiOperation,\n  ApiPayloadTooLargeResponse,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { File } from './entities/file.entity';\n\n@ApiBearerAuth()\n@ApiTags('Attachments')\n@Controller('attachment/files')\nexport class FilesController {\n  constructor(private readonly filesService: FilesService) {}\n\n  @Post()\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload single file' })\n  @ApiResponse({ status: 201, description: 'File created/uploaded' })\n  @ApiPayloadTooLargeResponse()\n  @UseInterceptors(FileInterceptor('file'))\n  upload(@UploadedFile() file: Express.Multer.File, @Body() body: any) {\n    return this.filesService.upload(file, body);\n  }\n\n  @Public()\n  @Get(':fileId')\n  @ApiOperation({ summary: 'Download single file' })\n  @ApiResponse({\n    status: 200,\n    description: 'The found file',\n  })\n  download(@Param('fileId') fileId: string, @Res() res: ExpressResponse) {\n    let item = this.filesService.download(fileId);\n    res.set({\n      'Content-Type': `${item.mimetype}`,\n      'Content-Disposition': `attachment; filename=\"${item.newFileName}\"`,\n    });\n    res.sendFile(fileId, { root: 'upload' });\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete single file' })\n  @ApiResponse({\n    status: 200,\n    description: 'The deleted file',\n    type: File,\n  })\n  remove(@Param('id') id: string) {\n    return this.filesService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FilesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { File, FileSchema } from './entities';\nimport { FilesController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: File.name,\n        schema: FileSchema,\n      },\n    ]),\n  ],\n  controllers: [FilesController],\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                download\n                            \n                            \n                                remove\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        download\n                        \n                    \n                \n            \n            \n                \ndownload(fileId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n            \n                \nupload(file: CreateFileDto, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                CreateFileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { body: any; file: CreateFileDto; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateFileDto } from './dto';\nimport { extname } from 'path';\n\n@Injectable()\nexport class FilesService {\n  upload(file: CreateFileDto, body: any) {\n    return { body, file };\n  }\n\n  //async download(fileId: string): Promise {\n  download(fileId: string) {\n    const list = [\n      {\n        fieldname: 'file',\n        originalname: 'SunCulture Careers.pdf',\n        encoding: '7bit',\n        mimetype: 'application/pdf',\n        destination: './upload',\n        filename: '13bb3b1431c510a2947d5b235731b571',\n        path: 'upload\\\\13bb3b1431c510a2947d5b235731b571',\n        size: 137640,\n      },\n      {\n        fieldname: 'kra',\n        originalname: 'Screenshot_20210901-110405_WhatsApp.jpg',\n        encoding: '7bit',\n        mimetype: 'image/jpeg',\n        destination: './upload',\n        filename: '0fd358b14332f3d6cf23799ecea3b516',\n        path: 'upload\\\\0fd358b14332f3d6cf23799ecea3b516',\n        size: 192199,\n      },\n      {\n        fieldname: 'file',\n        originalname: 'Screenshot_20210630-075753_Netflix.jpg',\n        encoding: '7bit',\n        mimetype: 'image/jpeg',\n        destination: './upload',\n        filename: '332a172648bf846eacd09e316ece24e0',\n        path: 'upload\\\\332a172648bf846eacd09e316ece24e0',\n        size: 430178,\n      },\n      {\n        fieldname: 'file',\n        originalname: 'Screenshot_20210429-024144_Chrome.jpg',\n        encoding: '7bit',\n        mimetype: 'image/jpeg',\n        destination: './upload',\n        filename: '9107b99107345166ad8523d444d0cb45',\n        path: 'upload\\\\9107b99107345166ad8523d444d0cb45',\n        size: 220070,\n      },\n      {\n        fieldname: 'file',\n        originalname: 'Screenshot_20210524-175311_WhatsApp.jpg',\n        encoding: '7bit',\n        mimetype: 'image/jpeg',\n        destination: './upload',\n        filename: 'efd65519a93ad6aecec497f216222e82',\n        path: 'upload\\\\efd65519a93ad6aecec497f216222e82',\n        size: 374718,\n      },\n      {\n        fieldname: 'file',\n        originalname: 'KRA Tax Compliance.pdf',\n        encoding: '7bit',\n        mimetype: 'application/pdf',\n        destination: './upload',\n        filename: 'b61d99bca1dbc98456ea787cad506984',\n        path: 'upload\\\\b61d99bca1dbc98456ea787cad506984',\n        size: 17717,\n      },\n    ];\n\n    let item = list.find((f) => f.filename === fileId);\n    const found = {\n      ...item,\n      newFileName: `${item.fieldname.toUpperCase()}${extname(\n        item.originalname,\n      )}`,\n    };\n    console.log(found.newFileName);\n\n    if (!found) throw new NotFoundException('File not found');\n\n    return found;\n  }\n\n  /* fileFilter(req: any, file: any, cb: any) {\n      if (['image/jpeg', 'image/jpg', 'image/png'].includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(null, false);\n      }\n      // Alternative\n  \n      //allowed ext\n      const filetypes = /jpeg|jpg|png|gif/;\n      //check ext\n      const extname = filetypes.test(extname(file.originalname));\n      //check mime\n      const mimetype = filetypes.test(file.mimetype);\n  \n      if (mimetype && extname) {\n        return cb(null, true);\n      } else {\n        cb('Error: Images Only');\n      }\n    } */\n\n  remove(id: string) {\n    return `This action removes a #${id} file`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FutureCreateApplicationDto.html":{"url":"classes/FutureCreateApplicationDto.html","title":"class - FutureCreateApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FutureCreateApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/future/future-create-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                applicantId\n                            \n                            \n                                chapterSix\n                            \n                            \n                                files\n                            \n                            \n                                isDisabled\n                            \n                            \n                                jobId\n                            \n                            \n                                ppr\n                            \n                            \n                                qualifications\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    documents\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        applicantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/future/future-create-application.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chapterSix\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'List of Chapter Six documents', isArray: true, enum: ChapterSix, enumName: 'ChapterSix', example: undefined})@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/future/future-create-application.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FileDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'List of uploaded files', type: FileDto, isArray: true, required: false})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/future/future-create-application.dto.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/future/future-create-application.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jobId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/future/future-create-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ppr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Position of progressive responsibility', example: 'Intern at the University of Nairobi'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/future/future-create-application.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qualifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QualificationDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'List of qualifications', type: QualificationDto, isArray: true})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/future/future-create-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        documents\n                    \n                \n\n                \n                    \n                        getdocuments()\n                    \n                \n                            \n                                \n                                    Defined in src/future/future-create-application.dto.ts:74\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Expose, Transform, Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { toUpper } from 'lodash';\nimport { ChapterSix } from '../applications/enums';\nimport { FileDto, QualificationDto } from '../applications/dto';\n\nexport class FutureCreateApplicationDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsMongoId()\n  jobId: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsMongoId()\n  applicantId: string;\n\n  @ApiPropertyOptional({ default: false })\n  @IsOptional()\n  @IsBoolean()\n  isDisabled: boolean;\n\n  @ApiPropertyOptional({\n    description: 'List of qualifications',\n    type: QualificationDto,\n    isArray: true,\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => QualificationDto)\n  qualifications: QualificationDto[];\n\n  @ApiPropertyOptional({\n    description: 'Position of progressive responsibility',\n    example: 'Intern at the University of Nairobi',\n  })\n  @IsOptional()\n  @IsString()\n  ppr: string;\n\n  @ApiPropertyOptional({\n    description: 'List of Chapter Six documents',\n    isArray: true,\n    enum: ChapterSix,\n    enumName: 'ChapterSix',\n    example: [ChapterSix.KRA],\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @IsArray()\n  chapterSix: string[];\n\n  @Expose()\n  @IsOptional()\n  @IsEnum(ChapterSix, {\n    each: true,\n    message: `Each value in chapterSix must be one of these ${Object.keys(\n      ChapterSix,\n    )}`,\n  })\n  @IsArray()\n  get documents(): ChapterSix[] {\n    return this.chapterSix.map((a) => ChapterSix[toUpper(a)]);\n  }\n\n  @ApiProperty({\n    description: 'List of uploaded files',\n    type: FileDto,\n    isArray: true,\n    required: false,\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => FileDto)\n  files: FileDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FutureUpdateApplicationDto.html":{"url":"classes/FutureUpdateApplicationDto.html","title":"class - FutureUpdateApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FutureUpdateApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/future/future-update-application.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateApplicationDto } from '../applications/dto';\n\nexport class FutureUpdateApplicationDto extends PartialType(\n  OmitType(CreateApplicationDto, ['jobId', 'applicantId', 'files'] as const),\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost): void {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n    const request = context.getRequest();\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const exceptionResponse =\n      exception instanceof HttpException\n        ? exception.getResponse()\n        : (exception as Object);\n\n    const error =\n      typeof response === 'string'\n        ? { message: exceptionResponse }\n        : (exceptionResponse as Object);\n\n    const errorResponse = {\n      ...error,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      type: typeof exception,\n    };\n\n    Logger.error(\n      `${request.method} ${request.url}`,\n      JSON.stringify(errorResponse),\n      `HttpExeptionFilter`,\n    );\n\n    response.status(status).json(errorResponse);\n  }\n}\n/*\nconst ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n    const error =\n      typeof response === 'string'\n        ? { message: exceptionResponse }\n        : (exceptionResponse as Object);\n\n    response.status(status).json({\n      ...error,\n      timestamp: new Date().toString(),\n    });\n*/\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Job.html":{"url":"classes/Job.html","title":"class - Job","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Job\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/entities/job.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                datePublished\n                            \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                noOfVacancies\n                            \n                            \n                                organization\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({index: true, required: true, trim: true, unique: true, maxlength: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/entities/job.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        datePublished\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@Prop({required: false, type: Date})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/entities/job.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true, maxlength: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/entities/job.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true, maxlength: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/entities/job.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        noOfVacancies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, max: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/entities/job.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Organization\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Organization, required: false})@Prop({type: OrganizationSchema, required: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/entities/job.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         JobStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true, enum: JobStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/jobs/entities/job.entity.ts:58\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { Document } from 'mongoose';\nimport { JobStatus } from '../enums';\nimport { Organization, OrganizationSchema } from '../../organizations/entities';\n\n@Schema({\n  toJSON: {\n    virtuals: true,\n  },\n  discriminatorKey: 'status',\n  timestamps: true,\n})\nexport class Job {\n  @ApiProperty()\n  @Prop({\n    index: true,\n    required: true,\n    trim: true,\n    unique: true,\n    maxlength: 50,\n  })\n  code: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true, maxlength: 255 })\n  name: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true, maxlength: 1024 })\n  description: string;\n\n  @ApiProperty()\n  @Prop({ required: true, max: 500 })\n  noOfVacancies: number;\n\n  @ApiProperty({ type: Organization, required: false })\n  @Prop({\n    type: OrganizationSchema,\n    required: true,\n  })\n  @Type(() => Organization)\n  organization: Organization;\n\n  @ApiProperty({ required: false })\n  @Prop({ required: false, type: Date })\n  datePublished: Date;\n\n  @ApiProperty()\n  @Prop({\n    required: true,\n    trim: true,\n    uppercase: true,\n    enum: JobStatus,\n    default: JobStatus.NOT_PUBLISHED,\n  })\n  status: JobStatus;\n}\n\nexport type JobDocument = Job & Document;\n\nexport const JobSchema = SchemaFactory.createForClass(Job);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/JobsController.html":{"url":"controllers/JobsController.html","title":"controller - JobsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  JobsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/jobs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                jobs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createJobDto: CreateJobDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create job'})@ApiCreatedResponse({type: Job})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createJobDto\n                                    \n                                                CreateJobDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch list of jobs'})@ApiOkResponse({type: Job, isArray: true})@ApiQuery({name: 'limit', required: false})@ApiQuery({name: 'offset', required: false})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Fetch single job'})@ApiOkResponse({type: Job})\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateJobDto: UpdateJobDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/jobs/jobs.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateJobDto\n                                    \n                                                UpdateJobDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  SerializeOptions,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JobsService } from './jobs.service';\nimport { CreateJobDto, UpdateJobDto } from './dto';\nimport { Job } from './entities';\nimport { MongooseClassSerializerInterceptor } from '../common/interceptors';\nimport { PaginationQueryDto } from '../common/dto';\n\n@Controller('jobs')\n@ApiTags('Jobs')\n@UseInterceptors(MongooseClassSerializerInterceptor(Job))\n@SerializeOptions({\n  strategy: 'exposeAll',\n  excludePrefixes: ['_', '__'],\n})\nexport class JobsController {\n  constructor(private readonly jobsService: JobsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create job' })\n  @ApiCreatedResponse({ type: Job })\n  async create(@Body() createJobDto: CreateJobDto): Promise {\n    return await this.jobsService.create(createJobDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Fetch list of jobs' })\n  @ApiOkResponse({ type: Job, isArray: true })\n  @ApiQuery({ name: 'limit', required: false })\n  @ApiQuery({ name: 'offset', required: false })\n  async findAll(@Query() paginationQuery: PaginationQueryDto): Promise {\n    return await this.jobsService.findAll(paginationQuery);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Fetch single job' })\n  @ApiOkResponse({ type: Job })\n  async findOne(@Param('id') id: string): Promise {\n    return await this.jobsService.findOne(id);\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateJobDto: UpdateJobDto,\n  ): Promise {\n    return await this.jobsService.update(id, updateJobDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string): Promise {\n    return await this.jobsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JobsModule.html":{"url":"modules/JobsModule.html","title":"module - JobsModule","body":"\n                   \n\n\n\n\n    Modules\n    JobsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_JobsModule\n\n\n\ncluster_JobsModule_providers\n\n\n\ncluster_JobsModule_exports\n\n\n\n\nJobsService \n\nJobsService \n\n\n\nJobsModule\n\nJobsModule\n\nJobsService  -->\n\nJobsModule->JobsService \n\n\n\n\n\nJobsService\n\nJobsService\n\nJobsModule -->\n\nJobsService->JobsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/jobs/jobs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JobsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JobsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JobsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Application, ApplicationSchema } from '../applications/entities';\nimport { Organization, OrganizationSchema } from '../organizations/entities';\nimport { Job, JobSchema } from './entities';\nimport { JobsController } from './jobs.controller';\nimport { JobsService } from './jobs.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Job.name,\n        schema: JobSchema,\n      },\n      {\n        name: Organization.name,\n        schema: OrganizationSchema,\n      },\n      {\n        name: Application.name,\n        schema: ApplicationSchema,\n      },\n    ]),\n  ],\n  controllers: [JobsController],\n  providers: [JobsService],\n  exports: [JobsService],\n})\nexport class JobsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JobsService.html":{"url":"injectables/JobsService.html","title":"injectable - JobsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JobsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/jobs.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AbstractService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Protected\n                                recordName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkOrganizationExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllOrganizationJobs\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                recordExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jobModel: Model, organizationModel: Model, applicationModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/jobs/jobs.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jobModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        organizationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        applicationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        checkOrganizationExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkOrganizationExists(organizationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    organizationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createJobDto: CreateJobDto)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:40\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createJobDto\n                                    \n                                                CreateJobDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllOrganizationJobs\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllOrganizationJobs(organizationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jobs/jobs.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    organizationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The organization id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        List of jobs for the organization\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:72\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateJobDto: UpdateJobDto)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateJobDto\n                                    \n                                                UpdateJobDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:37\n\n                \n            \n\n\n            \n                \n                    Finds a single record\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The record if found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recordExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    recordExists(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:72\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JobsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/jobs/jobs.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        recordName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'record'\n                    \n                \n                        \n                            \n                                Inherited from         AbstractService\n\n                            \n                        \n                    \n                        \n                                Defined in         AbstractService:11\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common';\nimport { CreateJobDto, UpdateJobDto } from './dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport * as dot from 'dot-object';\nimport { Job, JobDocument } from './entities';\nimport { Organization, OrganizationDocument } from '../organizations/entities';\nimport { AbstractService } from '../common/services';\nimport { Application, ApplicationDocument } from '../applications/entities';\n\n@Injectable()\nexport class JobsService extends AbstractService {\n  private readonly logger = new Logger(JobsService.name);\n\n  constructor(\n    @InjectModel(Job.name) private readonly jobModel: Model,\n    @InjectModel(Organization.name)\n    private readonly organizationModel: Model,\n    @InjectModel(Application.name)\n    private readonly applicationModel: Model,\n  ) {\n    super(jobModel);\n    this.recordName = Job.name;\n  }\n\n  private async checkOrganizationExists(\n    organizationId: string,\n  ): Promise {\n    const organization = await this.organizationModel.findById(organizationId);\n\n    if (!organization) {\n      throw new BadRequestException(\n        `The organization with the given ID does not exist`,\n      );\n    }\n\n    return organization;\n  }\n\n  async create(createJobDto: CreateJobDto): Promise {\n    const { code, organizationId } = createJobDto;\n    const jobExists = await this.jobModel.findOne({ code });\n    if (jobExists)\n      throw new BadRequestException(`A job with the given code already exists`);\n\n    const organization = await this.checkOrganizationExists(organizationId);\n\n    const job = new this.jobModel({\n      ...createJobDto,\n      organization,\n    });\n\n    return await this.jobModel.create(job);\n  }\n\n  async update(id: string, updateJobDto: UpdateJobDto): Promise {\n    const { organizationId, ...rest } = updateJobDto;\n\n    dot.keepArray = true;\n    let tgt = dot.dot(rest);\n    let dto = { ...tgt };\n    if (organizationId) {\n      const organization = await this.checkOrganizationExists(organizationId);\n      dto = {\n        ...tgt,\n        organization,\n      };\n    }\n    return await super.update(id, dto);\n  }\n\n  async remove(id: string): Promise {\n    // Check for related records - tagged in applications\n    const exists = await this.applicationModel\n      .findOne({ 'job._id': id })\n      .exec();\n\n    if (exists)\n      throw new BadRequestException(\n        `The job with the given ID CANNOT be deleted. There is related data.`,\n      );\n\n    return await super.remove(id);\n  }\n\n  /**\n   * @summary Finds all jobs for a specific organization\n   * @param organizationId The organization id\n   * @returns List of jobs for the organization\n   */\n  async findAllOrganizationJobs(organizationId: string): Promise {\n    const jobs = await this.jobModel\n      .find({ 'organization._id': organizationId })\n      .exec();\n\n    return jobs;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/jwt-auth.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') implements CanActivate {\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    /* We access the routes metadata using the reflector class.Return true \n    if route handler has the decorator @Public, IS_PUBLIC_KEY is found */\n    const isPublic = this.reflector.get(\n      IS_PUBLIC_KEY,\n      context.getHandler(),\n    );\n    if (isPublic) return true;\n\n    /* Let Passport's AuthGuard get the token from cookie and compare with the \n    jwt private key (validate) to protect routes with no decorator marked \n    @Public */\n    return super.canActivate(context);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategys/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AppConfiguration, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategys/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any, done: VerifiedCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategys/jwt.strategy.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifiedCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/strategys/jwt.strategy.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy, VerifiedCallback } from 'passport-jwt';\nimport { AuthService } from '../auth.service';\nimport {\n  AppConfiguration,\n  InjectAppConfig,\n} from '../../feature-config/configuration';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  private readonly logger = new Logger(JwtStrategy.name);\n\n  constructor(\n    @InjectAppConfig() config: AppConfiguration,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      ignoreExpiration: false,\n      secretOrKey: config.jwtPrivateKey,\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          let data = request?.cookies['jwt'];\n          if (!data) {\n            return undefined;\n          }\n          return data;\n        },\n      ]),\n    });\n  }\n\n  async validate(payload: any, done: VerifiedCallback): Promise {\n    // We can verify the user in token exists\n    const user = await this.authService.validateJwtPayload(payload);\n\n    if (!user) {\n      return done(new UnauthorizedException('Invalid Credentials'), false);\n    }\n\n    // If the users account has been disabled/is not active\n    if (!user?.isActive) {\n      return done(\n        new UnauthorizedException(\n          `Your account has been disabled. Contact your administrator.`,\n        ),\n        false,\n      );\n    }\n\n    const data = {\n      id: payload.sub,\n      name: user.fullName,\n      email: user.email,\n      role: user.role,\n    };\n\n    return done(null, data, payload.iat);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategys/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategys/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategys/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LocalStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/strategys/local.strategy.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  private readonly logger = new Logger(LocalStrategy.name);\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.authService.validateUserLocal(username, password);\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid Credentials');\n    }\n\n    // If the users account has been disabled/is not active\n    if (!user?.isActive) {\n      throw new UnauthorizedException(\n        `Your account has been disabled. Contact your administrator.`,\n      );\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingMiddleware.html":{"url":"injectables/LoggingMiddleware.html","title":"injectable - LoggingMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logging.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/logging.middleware.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggingMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.time('Request-response time');\n    console.log('Hi from middleware');\n\n    res.on('finish', () => console.timeEnd('Request-response time'));\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Organization.html":{"url":"classes/Organization.html","title":"class - Organization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Organization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organizations/entities/organization.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                description\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({index: true, unique: true, maxlength: 50, required: true, trim: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organizations/entities/organization.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({maxlength: 1024, trim: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organizations/entities/organization.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({maxlength: 255, required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organizations/entities/organization.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\n@Schema({\n  toJSON: {\n    virtuals: true,\n  },\n  timestamps: true,\n})\nexport class Organization {\n  @ApiProperty()\n  @Prop({\n    index: true,\n    unique: true,\n    maxlength: 50,\n    required: true,\n    trim: true,\n  })\n  code: string;\n\n  @ApiProperty()\n  @Prop({ maxlength: 255, required: true, trim: true, uppercase: true })\n  name: string;\n\n  @ApiProperty()\n  @Prop({ maxlength: 1024, trim: true })\n  description: string;\n}\n\nexport type OrganizationDocument = Organization & Document;\n\nexport const OrganizationSchema = SchemaFactory.createForClass(Organization);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrganizationsController.html":{"url":"controllers/OrganizationsController.html","title":"controller - OrganizationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrganizationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organizations/organizations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                organizations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createOrganizationDto: CreateOrganizationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create organization'})@ApiCreatedResponse({type: Organization})\n                \n            \n\n            \n                \n                    Defined in src/organizations/organizations.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOrganizationDto\n                                    \n                                                CreateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch list of organizations'})@ApiOkResponse({type: Organization, isArray: true})\n                \n            \n\n            \n                \n                    Defined in src/organizations/organizations.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Fetch single organization'})@ApiOkResponse({type: Organization})\n                \n            \n\n            \n                \n                    Defined in src/organizations/organizations.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete single organization'})@ApiOkResponse({type: Organization})\n                \n            \n\n            \n                \n                    Defined in src/organizations/organizations.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateOrganizationDto: UpdateOrganizationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update single organization'})@ApiOkResponse({type: Organization})\n                \n            \n\n            \n                \n                    Defined in src/organizations/organizations.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateOrganizationDto\n                                    \n                                                UpdateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  UseInterceptors,\n  SerializeOptions,\n} from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { OrganizationsService } from './organizations.service';\nimport { CreateOrganizationDto, UpdateOrganizationDto } from './dto';\nimport { PaginationQueryDto } from '../common/dto';\nimport { Organization } from '../organizations/entities';\nimport { ApplyApiStatus } from '../common/decorators';\nimport { MongooseClassSerializerInterceptor } from '../common/interceptors';\nimport { ValidateObjectIdPipe } from '../common/pipes';\n\n@Controller('organizations')\n@ApiTags('Organizations')\n@ApplyApiStatus(400, 401, 403, 404, 500)\n@UseInterceptors(MongooseClassSerializerInterceptor(Organization))\n@SerializeOptions({\n  strategy: 'exposeAll',\n  excludePrefixes: ['_', '__'],\n})\nexport class OrganizationsController {\n  constructor(private readonly organizationsService: OrganizationsService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create organization' })\n  @ApiCreatedResponse({ type: Organization })\n  async create(\n    @Body() createOrganizationDto: CreateOrganizationDto,\n  ): Promise {\n    const ref = { code: createOrganizationDto.code };\n    return await this.organizationsService.create(createOrganizationDto, ref);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Fetch list of organizations' })\n  @ApiOkResponse({ type: Organization, isArray: true })\n  async findAll(\n    @Query() paginationQuery: PaginationQueryDto,\n  ): Promise {\n    return await this.organizationsService.findAll(paginationQuery);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Fetch single organization' })\n  @ApiOkResponse({ type: Organization })\n  findOne(@Param('id', ValidateObjectIdPipe) id: string) {\n    return this.organizationsService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update single organization' })\n  @ApiOkResponse({ type: Organization })\n  async update(\n    @Param('id', ValidateObjectIdPipe) id: string,\n    @Body() updateOrganizationDto: UpdateOrganizationDto,\n  ): Promise {\n    return await this.organizationsService.update(id, updateOrganizationDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete single organization' })\n  @ApiOkResponse({ type: Organization })\n  async remove(\n    @Param('id', ValidateObjectIdPipe) id: string,\n  ): Promise {\n    return await this.organizationsService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrganizationsModule.html":{"url":"modules/OrganizationsModule.html","title":"module - OrganizationsModule","body":"\n                   \n\n\n\n\n    Modules\n    OrganizationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OrganizationsModule\n\n\n\ncluster_OrganizationsModule_providers\n\n\n\ncluster_OrganizationsModule_exports\n\n\n\n\nOrganizationsService \n\nOrganizationsService \n\n\n\nOrganizationsModule\n\nOrganizationsModule\n\nOrganizationsService  -->\n\nOrganizationsModule->OrganizationsService \n\n\n\n\n\nOrganizationsService\n\nOrganizationsService\n\nOrganizationsModule -->\n\nOrganizationsService->OrganizationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/organizations/organizations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrganizationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrganizationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OrganizationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Job, JobSchema } from '../jobs/entities';\nimport { Organization, OrganizationSchema } from './entities';\nimport { OrganizationsController } from './organizations.controller';\nimport { OrganizationsService } from './organizations.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Organization.name,\n        schema: OrganizationSchema,\n      },\n      {\n        name: Job.name,\n        schema: JobSchema,\n      },\n    ]),\n  ],\n  controllers: [OrganizationsController],\n  providers: [OrganizationsService],\n  exports: [OrganizationsService],\n})\nexport class OrganizationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrganizationsService.html":{"url":"injectables/OrganizationsService.html","title":"injectable - OrganizationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrganizationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organizations/organizations.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AbstractService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                recordName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                recordExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(organizationModel: Model, jobModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/organizations/organizations.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        organizationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jobModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:22\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateOrganizationDto: UpdateOrganizationDto)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:36\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateOrganizationDto\n                                    \n                                                UpdateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(dto: any, ref: any)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:14\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ref\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(paginationQuery: PaginationQueryDto)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paginationQuery\n                                    \n                                                PaginationQueryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:37\n\n                \n            \n\n\n            \n                \n                    Finds a single record\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        The record if found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recordExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    recordExists(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         AbstractService\n\n                \n            \n            \n                \n                        Defined in         AbstractService:72\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        recordName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'record'\n                    \n                \n                        \n                            \n                                Inherited from         AbstractService\n\n                            \n                        \n                    \n                        \n                                Defined in         AbstractService:11\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport * as dot from 'dot-object';\nimport { UpdateOrganizationDto } from './dto';\nimport { AbstractService } from '../common/services/abstract.service';\nimport { Organization, OrganizationDocument } from './entities';\nimport { Job, JobDocument } from '../jobs/entities';\n\n@Injectable()\nexport class OrganizationsService extends AbstractService {\n  constructor(\n    @InjectModel(Organization.name)\n    private readonly organizationModel: Model,\n    @InjectModel(Job.name)\n    private readonly jobModel: Model,\n  ) {\n    super(organizationModel);\n    this.recordName = Organization.name;\n  }\n\n  async remove(id: string): Promise {\n    // Check for related records - tagged in jobs\n    const exists = await this.jobModel\n      .findOne({ 'organization._id': id })\n      .exec();\n\n    if (exists)\n      throw new BadRequestException(\n        `The organization with the given ID CANNOT be deleted. There is related data.`,\n      );\n\n    return await super.remove(id);\n  }\n\n  async update(\n    id: string,\n    updateOrganizationDto: UpdateOrganizationDto,\n  ): Promise {\n    // Prepare object to update nested object fields separately if any\n    dot.keepArray = true;\n    const tgt = dot.dot({\n      ...updateOrganizationDto,\n    });\n    return super.update(id, tgt);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  readonly limit: number;\n\n  @IsOptional()\n  @IsPositive()\n  readonly offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PermissionsGuard.html":{"url":"guards/PermissionsGuard.html","title":"guard - PermissionsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PermissionsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/permissions.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Permission guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/permissions.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/permissions.guard.ts:20\n                \n            \n\n\n            \n                \n                    \nThe route handler doesn't have any permissions set\nThe route handler has permissions set and each one is present\nin the permissions of the jwt access token\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        true if and only if\n\nThe route handler doesn't have any permissions set\nThe route handler has permissions set and each one is present\nin the permissions of the jwt access token\n\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { USER_PERMISSIONS_KEY } from '../decorators';\n/**\n * Permission guard\n */\n@Injectable()\nexport class PermissionsGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  /**\n   *\n   * @param context\n   * @returns true if and only if\n   * 1) The route handler doesn't have any permissions set\n   * 2) The route handler has permissions set and each one is present\n   * in the permissions of the jwt access token\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const routePermissions = this.reflector.get(\n      USER_PERMISSIONS_KEY,\n      context.getHandler(),\n    );\n\n    // No Permissions Set\n    if (!routePermissions) return true;\n\n    // Getting the user object\n    // prepared by jwt passport strategy\n    const { user } = context.switchToHttp().getRequest();\n\n    const userPermissions: any[] = user.permissions;\n\n    // True if it meets all permissions set\n    const hasPermissions = () => {\n      return routePermissions.every((routePermission) =>\n        userPermissions.includes(routePermission),\n      );\n    };\n\n    return hasPermissions();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PersonDto.html":{"url":"classes/PersonDto.html","title":"class - PersonDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PersonDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/person.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dob\n                            \n                            \n                                fullname\n                            \n                            \n                                gender\n                            \n                            \n                                nationalId\n                            \n                            \n                                qualification\n                            \n                            \n                                telephone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nameAndDob\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dob\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/person.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/person.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/person.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nationalId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/person.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qualification\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QualificationDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ArrayNotEmpty()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/person.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        telephone\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty({each: true})@ArrayMinSize(1)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/person.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nameAndDob\n                    \n                \n\n                \n                    \n                        getnameAndDob()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/person.dto.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Expose, Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsString,\n  IsDateString,\n  ValidateNested,\n  IsNotEmpty,\n  ArrayNotEmpty,\n  IsOptional,\n  ArrayMinSize,\n} from 'class-validator';\nimport { QualificationDto } from '../../applications/dto';\n\nexport class PersonDto {\n  @IsString()\n  @IsNotEmpty()\n  fullname: string;\n\n  @IsString()\n  @IsNotEmpty()\n  nationalId: string;\n\n  @IsDateString()\n  @IsNotEmpty()\n  dob: string;\n\n  @IsString()\n  @IsNotEmpty()\n  gender: string;\n\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @ArrayMinSize(1)\n  @IsArray()\n  telephone: string[];\n\n  @IsOptional()\n  @IsArray()\n  @ArrayNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => QualificationDto)\n  qualification: QualificationDto[];\n\n  @Expose()\n  get nameAndDob(): string {\n    return `${this.fullname} ${this.dob}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Qualification.html":{"url":"classes/Qualification.html","title":"class - Qualification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Qualification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/entities/qualification.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attainedYear\n                            \n                            \n                                award\n                            \n                            \n                                grade\n                            \n                            \n                                institution\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        attainedYear\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/qualification.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        award\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/qualification.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        grade\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/qualification.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        institution\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/qualification.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({required: true, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/entities/qualification.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n// We disable Mongo's _id on embeded subdocuments, but we do not have to\n@Schema({ _id: false })\nexport class Qualification {\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true })\n  institution: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true })\n  award: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true })\n  title: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true, uppercase: true })\n  grade: string;\n\n  @ApiProperty()\n  @Prop({ required: true, trim: true })\n  attainedYear: number;\n}\n\n// Generate a Mongoose Schema before use as Subdocument\nexport const QualificationSchema = SchemaFactory.createForClass(Qualification);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QualificationDto.html":{"url":"classes/QualificationDto.html","title":"class - QualificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QualificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/dto/qualification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                attainedYear\n                            \n                            \n                                    Readonly\n                                award\n                            \n                            \n                                    Readonly\n                                grade\n                            \n                            \n                                    Readonly\n                                institution\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        attainedYear\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 2022})@IsPositive()@IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/qualification.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        award\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Degree'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/qualification.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        grade\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'First Class Honors'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/qualification.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        institution\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'University of Nairobi'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/qualification.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Bachelor of Business Information Technology (BBIT)'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/qualification.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsPositive, IsString } from 'class-validator';\n\nexport class QualificationDto {\n  @ApiProperty({example: 'University of Nairobi'})\n  @IsString()\n  @IsNotEmpty()\n  readonly institution: string;\n\n  @ApiProperty({example:'Degree'})\n  @IsString()\n  @IsNotEmpty()\n  readonly award: string;\n\n  @ApiProperty({example:'Bachelor of Business Information Technology (BBIT)'})\n  @IsString()\n  @IsNotEmpty()\n  readonly title: string;\n\n  @ApiProperty({example: 'First Class Honors'})\n  @IsString()\n  @IsNotEmpty()\n  readonly grade: string;\n\n  @ApiProperty({example:2022})\n  @IsPositive()\n  @IsNumber()\n  @IsNotEmpty()\n  readonly attainedYear: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Region.html":{"url":"classes/Region.html","title":"class - Region","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Region\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/entities/region.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                county\n                            \n                            \n                                subcounty\n                            \n                            \n                                ward\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        county\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@Prop({maxlength: 50, required: false, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/region.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subcounty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@Prop({maxlength: 50, required: false, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/region.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ward\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@Prop({maxlength: 50, required: false, trim: true, uppercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/entities/region.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n// We disable Mongo's _id on embeded subdocuments, but we do not have to\n@Schema({ _id: false })\nexport class Region {\n  @ApiProperty({ required: false })\n  @Prop({ maxlength: 50, required: false, trim: true, uppercase: true })\n  county: string;\n\n  @ApiProperty({ required: false })\n  @Prop({ maxlength: 50, required: false, trim: true, uppercase: true })\n  subcounty: string;\n\n  @ApiProperty({ required: false })\n  @Prop({ maxlength: 50, required: false, trim: true, uppercase: true })\n  ward: string;\n}\n\n// Generate a Mongoose Schema before use as Subdocument\nexport const RegionSchema = SchemaFactory.createForClass(Region);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegionDto.html":{"url":"classes/RegionDto.html","title":"class - RegionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/dto/region.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                county\n                            \n                            \n                                    Readonly\n                                subcounty\n                            \n                            \n                                    Readonly\n                                ward\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        county\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Busia', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/region.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        subcounty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Nambale', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/region.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ward\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Nambale Township', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applicants/dto/region.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class RegionDto {\n  @ApiProperty({ example: 'Busia', required: false })\n  @IsOptional()\n  @IsString()\n  readonly county: string;\n\n  @ApiProperty({ example: 'Nambale', required: false })\n  @IsOptional()\n  @IsString()\n  readonly subcounty: string;\n\n  @ApiProperty({ example: 'Nambale Township', required: false })\n  @IsOptional()\n  @IsString()\n  readonly ward: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/request-with-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from './users/entities';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/timeout.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(3000),\n      catchError((err) => {\n        if (err instanceof TimeoutError) {\n          return throwError(() => new RequestTimeoutException());\n        }\n        return throwError(() => err);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionInterceptor.html":{"url":"injectables/TransactionInterceptor.html","title":"injectable - TransactionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transaction.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                To create a transaction we need an established mongoose instance with a\ndatabase connection\nNOTE: To be used together with the @TransactionParam custom decorator\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/transaction.interceptor.ts:18\n                            \n                        \n\n                \n                    \n                            Inject our mongoose instance\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/transaction.interceptor.ts:23\n                \n            \n\n\n            \n                \n                    Create the transaction and attach it to the request using ExecutionContext\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/mongoose';\nimport { Connection } from 'mongoose';\nimport { catchError, finalize, Observable, tap } from 'rxjs';\n\n/**To create a transaction we need an established mongoose instance with a\n * database connection\n * @example @UseInterceptors(TransactionInterceptor)\n * @TransactionParam() session: MongooseClientSession,\n * @summary To abtract logic of creating and managing the transaction\n * NOTE: To be used together with the @TransactionParam custom decorator */\n@Injectable()\nexport class TransactionInterceptor implements NestInterceptor {\n  /**Inject our mongoose instance */\n  constructor(@InjectConnection() private readonly connection: Connection) {}\n\n  /**Create the transaction and attach it to the request using ExecutionContext */\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const req = context.switchToHttp().getRequest();\n\n    const session = await this.connection.startSession();\n    session.startTransaction();\n    req.transaction = session;\n    return next.handle().pipe(\n      tap(async () => await session.commitTransaction()),\n      catchError(async (err) => {\n        await session.abortTransaction();\n        return new Error(err);\n      }),\n      finalize(() => session.endSession()),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(classType: ClassType)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/transform.interceptor.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        classType\n                                                  \n                                                        \n                                                                        ClassType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/transform.interceptor.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\ninterface ClassType {\n  new (): T;\n}\n\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor, T> {\n  constructor(private readonly classType: ClassType) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map((data) => plainToClass(this.classType, data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateApplicantDto.html":{"url":"classes/UpdateApplicantDto.html","title":"class - UpdateApplicantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateApplicantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applicants/dto/update-applicant.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'; //'@nestjs/mapped-types'\nimport { CreateApplicantDto } from './create-applicant.dto';\n\nexport class UpdateApplicantDto extends PartialType(CreateApplicantDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateApplicationDto.html":{"url":"classes/UpdateApplicationDto.html","title":"class - UpdateApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/applications/dto/update-application.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                I have split what is required as Optional in the update dto which will\nbe extended by the create dto.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chapterSix\n                            \n                            \n                                isDisabled\n                            \n                            \n                                ppr\n                            \n                            \n                                qualifications\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    documents\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        chapterSix\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'List of Chapter Six documents', isArray: true, enum: ChapterSix, enumName: 'ChapterSix', example: undefined})@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/update-application.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({default: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/update-application.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ppr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Position of progressive responsibility', example: 'Intern at the University of Nairobi'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/update-application.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        qualifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QualificationDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'List of qualifications', type: QualificationDto, isArray: true})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/applications/dto/update-application.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        documents\n                    \n                \n\n                \n                    \n                        getdocuments()\n                    \n                \n                            \n                                \n                                    Defined in src/applications/dto/update-application.dto.ts:67\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { toUpper } from 'lodash';\nimport { QualificationDto } from './qualification.dto';\nimport { ChapterSix } from '../enums';\n\n/**\n * @Summary I am NOT using @nestjs/swagger PartialType as this breaks validation\n * I have split what is required as Optional in the update dto which will\n * be extended by the create dto.\n */\nexport class UpdateApplicationDto {\n  @ApiPropertyOptional({ default: false })\n  @IsOptional()\n  @IsBoolean()\n  isDisabled: boolean;\n\n  @ApiPropertyOptional({\n    description: 'List of qualifications',\n    type: QualificationDto,\n    isArray: true,\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => QualificationDto)\n  qualifications: QualificationDto[];\n\n  @ApiPropertyOptional({\n    description: 'Position of progressive responsibility',\n    example: 'Intern at the University of Nairobi',\n  })\n  @IsOptional()\n  @IsString()\n  ppr: string;\n\n  @ApiPropertyOptional({\n    description: 'List of Chapter Six documents',\n    isArray: true,\n    enum: ChapterSix,\n    enumName: 'ChapterSix',\n    example: [ChapterSix.KRA],\n  })\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @IsArray()\n  chapterSix: string[];\n\n  @IsOptional()\n  @IsEnum(ChapterSix, {\n    each: true,\n    message: `Each value in chapterSix must be one of these ${Object.keys(\n      ChapterSix,\n    )}`,\n  })\n  @IsArray()\n  get documents(): ChapterSix[] {\n    if (!this.chapterSix) return undefined;\n    return this.chapterSix.map((a) => ChapterSix[toUpper(a)]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFileDto.html":{"url":"classes/UpdateFileDto.html","title":"class - UpdateFileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/dto/update-file.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFileDto } from './create-file.dto';\n\nexport class UpdateFileDto extends PartialType(CreateFileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateJobDto.html":{"url":"classes/UpdateJobDto.html","title":"class - UpdateJobDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateJobDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/dto/update-job.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateJobDto } from './create-job.dto';\n\nexport class UpdateJobDto extends PartialType(CreateJobDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrganizationDto.html":{"url":"classes/UpdateOrganizationDto.html","title":"class - UpdateOrganizationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrganizationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organizations/dto/update-organization.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateOrganizationDto } from './create-organization.dto';\n\nexport class UpdateOrganizationDto extends PartialType(CreateOrganizationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe@gmail.com'})@IsOptional()@IsEmail()@MaxLength(50)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John'})@IsOptional()@IsString()@MaxLength(50)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Doe'})@IsOptional()@IsString()@MaxLength(50)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n} from 'class-validator';\n\nexport class UpdateUserDto {\n  @ApiPropertyOptional({ example: 'John' })\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({ example: 'Doe' })\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({ example: 'johndoe@gmail.com' })\n  @IsOptional()\n  @IsEmail()\n  @MaxLength(50)\n  @IsNotEmpty()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                    Optional\n                                fullName\n                            \n                            \n                                isActive\n                            \n                            \n                                lastAccessedOn\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                    Optional\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'johndoe@gmail.com'})@Prop({maxlength: 50, required: true, unique: true, trim: true, lowercase: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({maxlength: 50, required: true, trim: true, uppercase: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastAccessedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Prop({type: Date, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({maxlength: 50, required: true, trim: true, uppercase: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Admin'})@Prop({required: true, trim: true, uppercase: true, enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        validatePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Function\n\n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Exclude, Transform } from 'class-transformer';\nimport { Document } from 'mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { Role } from '../enums';\n\nexport type UserDocument = User & Document;\n\n@Schema({\n  toJSON: {\n    getters: true,\n    virtuals: true,\n  },\n  discriminatorKey: 'role',\n  timestamps: true,\n})\nexport class User {\n  @Transform(({ value }) => value.toString())\n  _id: string;\n\n  //Virtuals\n  @ApiProperty({ example: 'John Doe' })\n  fullName?: string;\n\n  //Method Functions\n  validatePassword?: Function;\n\n  //Actual Properties\n  @Prop({ maxlength: 50, required: true, trim: true, uppercase: true })\n  @Exclude()\n  firstName: string;\n\n  @Prop({ maxlength: 50, required: true, trim: true, uppercase: true })\n  @Exclude()\n  lastName: string;\n\n  @ApiProperty({ example: 'johndoe@gmail.com' })\n  @Prop({\n    maxlength: 50,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true,\n  })\n  email: string;\n\n  @Prop({ required: true })\n  @Exclude()\n  password: string;\n\n  @ApiProperty({ example: 'Admin' })\n  @Prop({\n    required: true,\n    trim: true,\n    uppercase: true,\n    enum: Role,\n    default: Role.GUEST,\n  })\n  role: Role;\n\n  @ApiProperty()\n  @Prop({ default: true })\n  isActive: boolean;\n\n  @ApiProperty()\n  @Prop({ type: Date, default: Date.now })\n  lastAccessedOn: Date;\n}\n\nconst UserSchema = SchemaFactory.createForClass(User);\n\nUserSchema.virtual('fullName').get(function (this: UserDocument) {\n  return `${this.firstName} ${this.lastName}`;\n});\n\nUserSchema.pre('save', function (next: Function) {\n  try {\n    const user = this;\n    if (!user.isModified('password')) {\n      return next();\n    }\n    bcrypt.genSalt(10, (err: Error, salt: string) => {\n      if (err) return next(err);\n\n      bcrypt.hash(user.password, salt, function (err: Error, hash: string) {\n        if (err) return next(err);\n\n        user.password = hash;\n        next();\n      });\n    });\n  } catch (err) {\n    next(err);\n  }\n});\n\n/**\n * @summary Confirm if password is a valid password\n * @param {The users entered password} password\n * @returns A promise with a boolean value\n */\nUserSchema.methods.validatePassword = async function (\n  this: UserDocument,\n  password: string,\n): Promise {\n  return await bcrypt.compare(password, this.password);\n};\n\nexport { UserSchema };\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSnippetDto.html":{"url":"classes/UserSnippetDto.html","title":"class - UserSnippetDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSnippetDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-snippet.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                fullName\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                isActive\n                            \n                            \n                                    Readonly\n                                lastAccessedOn\n                            \n                            \n                                    Readonly\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Expose()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-snippet.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Expose()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-snippet.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Expose()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-snippet.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Boolean})@Expose()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-snippet.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lastAccessedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Expose()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-snippet.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Expose()@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-snippet.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Exclude, Expose } from 'class-transformer';\nimport {\n  IsMongoId,\n  IsString,\n  IsDateString,\n  IsEmail,\n  IsEnum,\n  IsBoolean,\n} from 'class-validator';\nimport { Role } from '../enums';\n\n@Exclude()\nexport class UserSnippetDto {\n  @ApiProperty()\n  @Expose()\n  @IsMongoId()\n  readonly id: string;\n\n  @ApiProperty()\n  @Expose()\n  @IsString()\n  readonly fullName: string;\n\n  @ApiProperty()\n  @Expose()\n  @IsEmail()\n  readonly email: string;\n\n  @ApiProperty()\n  @Expose()\n  @IsEnum(Role)\n  readonly role: Role;\n\n  @ApiProperty({ type: Boolean })\n  @Expose()\n  @IsBoolean()\n  readonly isActive: boolean;\n\n  @ApiProperty()\n  @Expose()\n  @IsDateString()\n  readonly lastAccessedOn: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Register a new application user'})@ApiCreatedResponse({type: UserSnippetDto})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetch all users'})@ApiOkResponse({type: UserSnippetDto, isArray: true})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Fetch single user'})@ApiOkResponse({type: UserSnippetDto})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete single user'})@ApiOkResponse({type: UserSnippetDto})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update single user'})@ApiOkResponse({type: UserSnippetDto})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  SerializeOptions,\n  Logger,\n} from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { CreateUserDto, UpdateUserDto, UserSnippetDto } from './dto';\nimport { User } from './entities';\nimport { ApplyApiStatus } from '../common/decorators';\nimport {\n  MongooseClassSerializerInterceptor,\n  TransformInterceptor,\n} from '../common/interceptors';\n\n@Controller('users')\n@ApiTags('Users')\n@ApplyApiStatus(400, 401, 403, 404, 500)\n@UseInterceptors(\n  MongooseClassSerializerInterceptor(User),\n  new TransformInterceptor(UserSnippetDto),\n)\n@SerializeOptions({\n  strategy: 'exposeAll',\n  excludePrefixes: ['_', '__'],\n})\nexport class UsersController {\n  private readonly logger = new Logger(UsersController.name);\n\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Register a new application user' })\n  @ApiCreatedResponse({ type: UserSnippetDto })\n  async create(@Body() createUserDto: CreateUserDto): Promise {\n    return await this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Fetch all users' })\n  @ApiOkResponse({ type: UserSnippetDto, isArray: true })\n  async findAll(): Promise {\n    return await this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Fetch single user' })\n  @ApiOkResponse({ type: UserSnippetDto })\n  async findOne(@Param('id') id: string): Promise {\n    return await this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update single user' })\n  @ApiOkResponse({ type: UserSnippetDto })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return await this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete single user' })\n  @ApiOkResponse({ type: UserSnippetDto })\n  async remove(@Param('id') id: string): Promise {\n    return await this.usersService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './entities';\nimport { UsersController } from './users.controller';\nimport { UsersRepository } from './users.repository';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersRepository, UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteMany\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByIdAndRemove\n                            \n                            \n                                    Async\n                                findByIdAndUpdate\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneAndRemove\n                            \n                            \n                                    Async\n                                findOneAndUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEntityData)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntityData\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMany(entityFilterQuery?: FilterQuery)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:64\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(entityFilterQuery?: FilterQuery)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:43\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdAndRemove\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndRemove(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:47\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByIdAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByIdAndUpdate(id: string, updateEntityData: UpdateQuery<>)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:51\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(entityFilterQuery: FilterQuery, projection?: Record)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:17\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projection\n                                    \n                                            Record\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneAndRemove\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneAndRemove(entityFilterQuery: FilterQuery)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneAndUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneAndUpdate(entityFilterQuery: FilterQuery, updateEntityData: UpdateQuery<>)\n                \n            \n\n\n            \n                \n                    Inherited from         EntityRepository\n\n                \n            \n            \n                \n                        Defined in         EntityRepository:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityFilterQuery\n                                    \n                                            FilterQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntityData\n                                    \n                                            UpdateQuery<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { EntityRepository } from '../database/entity.repository';\nimport { User, UserDocument } from './entities';\n\n@Injectable()\nexport class UsersRepository extends EntityRepository {\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n  ) {\n    super(userModel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: UsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:23\n                            \n                        \n\n                \n                    \n                            Creates an instance of UsersService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nA repository for managing data access to the User Model\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n                    A method that creates a new user in the database.\nSee the definition of the CreateUserDto file to\nsee a list of required properties.\nExample:\nconst user = await usersService.create(createUserDto);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser details. The email must be unique\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const user = await usersService.create(createUserDto);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the new user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    A method that fetches the users from the database.\nExample:\nconst users = await usersService.findAll();\n\n\n                    \n                        Example :\n                        \n                            const users = await usersService.findAll();\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the list of users\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:109\n                \n            \n\n\n            \n                \n                    A method that fetches a single user by their unique id.\nExample:\nconst user = await usersService.findOne(id);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser id. A user with this id should exist in the database\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const user = await usersService.findOne(id);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the user object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:75\n                \n            \n\n\n            \n                \n                    A method that fetches a single user by their unique email.\nExample:\nconst user = await usersService.findOneByEmail(email);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser email\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const user = await usersService.findOneByEmail(email);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the user document or undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n                    A method that fetches a single user by their unique id.\nExample:\nconst user = await usersService.findOneById(id);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser id. A user with this id should exist in the database\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const user = await usersService.findOneById(id);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the user document or undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:156\n                \n            \n\n\n            \n                \n                    A method that deletes a user with specified id from the database\nExample:\nconst user = await usersService.remove(id);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser id. A user with this id should exist in the database\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const user = await usersService.remove(id);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the deleted user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:132\n                \n            \n\n\n            \n                \n                    A method that updates a user with the specified id from the database.\nSee the definition of the UpdateUserDto file to\nsee a list of required properties.\nExample:\nconst result = await usersService.update(id, updateUserDto);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser id. A user with this id should exist in the database\n\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nuser details to be updated\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const result = await usersService.update(id, updateUserDto);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the updated user\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:23\n                        \n                    \n\n            \n                \n                    Used to log messages\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport * as dot from 'dot-object';\nimport { CreateUserDto, UpdateUserDto } from './dto';\n/**\n * @typedef { CreateUserDto, UpdateUserDto } Create Dto\n */\nimport { User, UserDocument } from './entities';\nimport { UsersRepository } from './users.repository';\n\n/**\n * @class\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Used to log messages\n   */\n  private readonly logger = new Logger(UsersService.name);\n\n  /**\n   * Creates an instance of UsersService\n   * @param {UsersRepository} usersRepository - A repository for managing data access to the User Model\n   */\n  constructor(private readonly usersRepository: UsersRepository) {}\n\n  /**\n   * A method that creates a new user in the database.\n   * See the [definition of the CreateUserDto file]{@link CreateUserDto} to\n   * see a list of required properties.\n   * Example:\n   * @example\n   * const user = await usersService.create(createUserDto);\n   *\n   * @param {CreateUserDto} createUserDto - user details. The email must be unique\n   * @returns {Promise} A promise with the new user\n   * @throws {BadRequestException} If the user is already registered\n   */\n  async create(createUserDto: CreateUserDto): Promise {\n    const { email } = createUserDto;\n\n    // Check if user exists using email\n    const exists = await this.usersRepository.findOne({ email });\n    if (exists) throw new BadRequestException('The user is already registered');\n\n    return this.usersRepository.create(createUserDto);\n  }\n\n  /**\n   * A method that fetches the users from the database.\n   * Example:\n   * @example\n   * const users = await usersService.findAll();\n   *\n   * @returns {Promise} A promise with the list of users\n   */\n  async findAll(): Promise {\n    const users = await this.usersRepository.find();\n    return users;\n  }\n\n  /**\n   * A method that fetches a single user by their unique email.\n   * Example:\n   * @example\n   * const user = await usersService.findOneByEmail(email);\n   *\n   * @param {string} email - user email\n   * @returns {(Promise)} A promise with the user document or undefined\n   */\n  async findOneByEmail(email: string): Promise {\n    const user = await this.usersRepository.findOne({ email });\n\n    if (user) return user;\n\n    return undefined;\n  }\n\n  /**\n   * A method that fetches a single user by their unique id.\n   * Example:\n   * @example\n   * const user = await usersService.findOneById(id);\n   *\n   * @param {string} id - user id. A user with this id should exist in the database\n   * @returns {(Promise)} A promise with the user document or undefined\n   */\n  async findOneById(id: string): Promise {\n    const user = await this.usersRepository.findById(id);\n\n    if (user) return user;\n\n    return undefined;\n  }\n\n  /**\n   * A method that fetches a single user by their unique id.\n   * Example:\n   * @example\n   * const user = await usersService.findOne(id);\n   *\n   * @param {string} id - user id. A user with this id should exist in the database\n   * @returns {(Promise)} A promise with the user object\n   */\n  async findOne(id: string): Promise {\n    const user = await this.usersRepository.findOne({ _id: id });\n\n    if (!user) {\n      throw new NotFoundException(`User #${id} not found`);\n    }\n\n    return user;\n  }\n\n  /**\n   * A method that updates a user with the specified id from the database.\n   * See the [definition of the UpdateUserDto file]{@link UpdateUserDto} to\n   * see a list of required properties.\n   * Example:\n   * @example\n   * const result = await usersService.update(id, updateUserDto);\n   *\n   * @param {string} id - user id. A user with this id should exist in the database\n   * @param {UpdateUserDto} updateUserDto - user details to be updated\n   * @returns {Promise} A promise with the updated user\n   * @throws {BadRequestException} If the user with the given id was not found\n   */\n  async update(id: string, updateUserDto: UpdateUserDto): Promise {\n    // Prepare object to update nested object fields separately\n    dot.keepArray = true;\n    const tgt = dot.dot(updateUserDto);\n\n    const user = await this.usersRepository.findByIdAndUpdate(id, tgt);\n\n    if (!user)\n      throw new BadRequestException(`The user with the given id was not found`);\n\n    return user;\n  }\n\n  /**\n   * A method that deletes a user with specified id from the database\n   * Example:\n   * @example\n   * const user = await usersService.remove(id);\n   *\n   * @param {string} id - user id. A user with this id should exist in the database\n   * @returns {(Promise)} A promise with the deleted user\n   * @throws {BadRequestException} If the user with the given id was not found\n   * @todo Check for related records before deleting\n   */\n  async remove(id: string): Promise {\n    const user = await this.usersRepository.findByIdAndRemove(id);\n\n    if (!user) {\n      throw new BadRequestException('The user with the given id was not found');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateObjectIdPipe.html":{"url":"injectables/ValidateObjectIdPipe.html","title":"injectable - ValidateObjectIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidateObjectIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/validate-object-id.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                in the database. Use as follows:\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/validate-object-id.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n} from '@nestjs/common';\nimport * as mongoose from 'mongoose';\n\n/**\n * @summary Validate and ensure the passed parameter or query value can be found\n * in the database. Use as follows:\n * @Param('id', ValidateObjectIdPipe) id: string | ObjectID\n * @Query('id', new ValidateObjectIdPipe()) id: string | ObjectID\n */\n@Injectable()\nexport class ValidateObjectIdPipe implements PipeTransform {\n  transform(value: string, metadata: ArgumentMetadata) {\n    if (!mongoose.Types.ObjectId.isValid(value))\n      throw new BadRequestException('Invalid ID.');\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WrapResponseInterceptor.html":{"url":"injectables/WrapResponseInterceptor.html","title":"injectable - WrapResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WrapResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/wrap-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/wrap-response.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class WrapResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => {\n        return typeof data === 'string' ? data : { data };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/applicants/applicants.controller.ts\n            \n            controller\n            ApplicantsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/applicants/applicants.service.ts\n            \n            injectable\n            ApplicantsService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/applicants/dto/applicant-snippet.dto.ts\n            \n            class\n            ApplicantSnippetDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/applicants/dto/create-applicant.dto.ts\n            \n            class\n            CreateApplicantDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/applicants/dto/region.dto.ts\n            \n            class\n            RegionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/applicants/dto/update-applicant.dto.ts\n            \n            class\n            UpdateApplicantDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/applicants/entities/applicant.entity.ts\n            \n            class\n            Applicant\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/applicants/entities/applicant.entity.ts\n            \n            variable\n            ApplicantSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/applicants/entities/region.entity.ts\n            \n            class\n            Region\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/applicants/entities/region.entity.ts\n            \n            variable\n            RegionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/applications/applications.controller.ts\n            \n            controller\n            ApplicationsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/applications/applications.service.ts\n            \n            injectable\n            ApplicationsService\n            \n                33 %\n                (4/12)\n            \n        \n        \n            \n                \n                src/applications/dto/create-application.dto.ts\n            \n            class\n            CreateApplicationDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/applications/dto/file.dto.ts\n            \n            class\n            FileDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/applications/dto/qualification.dto.ts\n            \n            class\n            QualificationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/applications/dto/update-application.dto.ts\n            \n            class\n            UpdateApplicationDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/applications/entities/application.entity.ts\n            \n            class\n            Application\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/applications/entities/application.entity.ts\n            \n            variable\n            ApplicationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/applications/entities/file-document.entity.ts\n            \n            class\n            FileDocument\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/applications/entities/file-document.entity.ts\n            \n            variable\n            FileDocumentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/applications/entities/qualification.entity.ts\n            \n            class\n            Qualification\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/applications/entities/qualification.entity.ts\n            \n            variable\n            QualificationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategys/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategys/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/decorators/apply-api-status.decorator.ts\n            \n            variable\n            ApplyApiStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/permissions.decorator.ts\n            \n            variable\n            Permissions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/permissions.decorator.ts\n            \n            variable\n            USER_PERMISSIONS_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/transaction-param.decorator.ts\n            \n            variable\n            TransactionParam\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dto/person.dto.ts\n            \n            class\n            PersonDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guards/api-key.guard.ts\n            \n            guard\n            ApiKeyGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/guards/permissions.guard.ts\n            \n            guard\n            PermissionsGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/mongoose-class-serializer.interceptor.ts\n            \n            function\n            MongooseClassSerializerInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transaction.interceptor.ts\n            \n            injectable\n            TransactionInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            interface\n            ClassType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/wrap-response.interceptor.ts\n            \n            injectable\n            WrapResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middleware/logging.middleware.ts\n            \n            injectable\n            LoggingMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/validate-object-id.pipe.ts\n            \n            injectable\n            ValidateObjectIdPipe\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/common/services/abstract.service.ts\n            \n            injectable\n            AbstractService\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/database/entity.repository.ts\n            \n            class\n            EntityRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/database/test/support/mock.model.ts\n            \n            variable\n            createMockModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/feature-config/configuration/app.configuration.ts\n            \n            variable\n            appConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/feature-config/configuration/app.configuration.ts\n            \n            variable\n            InjectAppConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/feature-config/configuration/mongo.configuration.ts\n            \n            variable\n            InjectMongoConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/feature-config/configuration/mongo.configuration.ts\n            \n            variable\n            mongoConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/feature-config/configuration/multer.configuration.ts\n            \n            variable\n            InjectMulterConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/feature-config/configuration/multer.configuration.ts\n            \n            variable\n            multerConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/dto/create-file.dto.ts\n            \n            class\n            CreateFileDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/files/dto/update-file.dto.ts\n            \n            class\n            UpdateFileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/entities/file.entity.ts\n            \n            class\n            File\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/files/entities/file.entity.ts\n            \n            variable\n            FileSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/files/files.controller.ts\n            \n            controller\n            FilesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/future/future-create-application.dto.ts\n            \n            class\n            FutureCreateApplicationDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/future/future-update-application.dto.ts\n            \n            class\n            FutureUpdateApplicationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/jobs/dto/create-job.dto.ts\n            \n            class\n            CreateJobDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/jobs/dto/update-job.dto.ts\n            \n            class\n            UpdateJobDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/jobs/entities/job.entity.ts\n            \n            class\n            Job\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/jobs/entities/job.entity.ts\n            \n            variable\n            JobSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/jobs/jobs.controller.ts\n            \n            controller\n            JobsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/jobs/jobs.service.ts\n            \n            injectable\n            JobsService\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            configureSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/organizations/dto/create-organization.dto.ts\n            \n            class\n            CreateOrganizationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/organizations/dto/update-organization.dto.ts\n            \n            class\n            UpdateOrganizationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/organizations/entities/organization.entity.ts\n            \n            class\n            Organization\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/organizations/entities/organization.entity.ts\n            \n            variable\n            OrganizationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/organizations/organizations.controller.ts\n            \n            controller\n            OrganizationsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/organizations/organizations.service.ts\n            \n            injectable\n            OrganizationsService\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/request-with-user.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/__mocks__/users.repository.ts\n            \n            variable\n            UsersRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/__mocks__/users.service.ts\n            \n            variable\n            UsersService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/user-snippet.dto.ts\n            \n            class\n            UserSnippetDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/test/stubs/create-user-dto.stub.ts\n            \n            variable\n            createUserDtoStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/test/stubs/update-user-dto.stub.ts\n            \n            variable\n            updateUserDtoStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/test/stubs/user.stub.ts\n            \n            variable\n            userStub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/test/support/user.model.ts\n            \n            variable\n            UserModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                90 %\n                (9/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.4.3\n        \n            @compodoc/compodoc : ^1.1.18\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.1.6\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/event-emitter : ^1.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.0.1\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/schedule : ^1.0.2\n        \n            @nestjs/swagger : ^5.1.5\n        \n            @nestjs/terminus : ^8.0.4\n        \n            @nestjs/throttler : ^2.0.0\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            cookie-parser : ^1.4.6\n        \n            csrf : ^3.1.0\n        \n            curl : ^0.1.4\n        \n            dot-object : ^2.1.4\n        \n            dotenv : ^10.0.0\n        \n            helmet : ^4.6.0\n        \n            joi : ^17.4.2\n        \n            lodash : ^4.17.21\n        \n            mongoose : ^6.1.5\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.1.6\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChapterSix   (src/.../chapter-six.enum.ts)\n                        \n                        \n                            Gender   (src/.../gender.enum.ts)\n                        \n                        \n                            JobStatus   (src/.../job-status.enum.ts)\n                        \n                        \n                            MaritalStatus   (src/.../marital-status.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/applications/enums/chapter-six.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ChapterSix\n                    \n                \n                        \n                            \n                                 KRA\n                            \n                        \n                        \n                            \n                                Value : KRA\n                            \n                        \n                        \n                            \n                                 CRB\n                            \n                        \n                        \n                            \n                                Value : CRB\n                            \n                        \n                        \n                            \n                                 DCI\n                            \n                        \n                        \n                            \n                                Value : DCI\n                            \n                        \n                        \n                            \n                                 HELB\n                            \n                        \n                        \n                            \n                                Value : HELB\n                            \n                        \n                        \n                            \n                                 EACC\n                            \n                        \n                        \n                            \n                                Value : EACC\n                            \n                        \n            \n        \n\n    src/applicants/enums/gender.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : Male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : Female\n                            \n                        \n            \n        \n\n    src/jobs/enums/job-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        JobStatus\n                    \n                \n                        \n                            \n                                 NOT_PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : NOT_PUBLISHED\n                            \n                        \n                        \n                            \n                                 ACCEPTING_APPLICATIONS\n                            \n                        \n                        \n                            \n                                Value : ACCEPTING_APPLICATIONS\n                            \n                        \n                        \n                            \n                                 SHORT_LISTING\n                            \n                        \n                        \n                            \n                                Value : SHORT_LISTING\n                            \n                        \n                        \n                            \n                                 CONDUCTING_INTERVIEWS\n                            \n                        \n                        \n                            \n                                Value : CONDUCTING_INTERVIEWS\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                Value : CLOSED\n                            \n                        \n                        \n                            \n                                 ARCHIVED\n                            \n                        \n                        \n                            \n                                Value : ARCHIVED\n                            \n                        \n            \n        \n\n    src/applicants/enums/marital-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MaritalStatus\n                    \n                \n                        \n                            \n                                 Married\n                            \n                        \n                        \n                            \n                                Value : Married\n                            \n                        \n                        \n                            \n                                 Single\n                            \n                        \n                        \n                            \n                                Value : Single\n                            \n                        \n                        \n                            \n                                 Divorced\n                            \n                        \n                        \n                            \n                                Value : Divorced\n                            \n                        \n            \n        \n\n    src/users/enums/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : MODERATOR\n                            \n                        \n                        \n                            \n                                 GUEST\n                            \n                        \n                        \n                            \n                                Value : GUEST\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            configureSwagger   (src/.../main.ts)\n                        \n                        \n                            MongooseClassSerializerInterceptor   (src/.../mongoose-class-serializer.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configureSwagger\n                        \n                    \n                \n            \n            \n                \nconfigureSwagger(appConfig: AppConfiguration, app: INestApplication, globalPrefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    appConfig\n                                    \n                                                AppConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    app\n                                    \n                                                INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    globalPrefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/interceptors/mongoose-class-serializer.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MongooseClassSerializerInterceptor\n                        \n                    \n                \n            \n            \n                \nMongooseClassSerializerInterceptor(classToIntercept: Type)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    classToIntercept\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of class\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Stephen Luchacha\nWebsite -\nTwitter -\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApplicantsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeatureConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JobsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrganizationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApplicantsModule\n\n\n\ncluster_ApplicantsModule_exports\n\n\n\ncluster_ApplicantsModule_providers\n\n\n\ncluster_ApplicationsModule\n\n\n\ncluster_ApplicationsModule_exports\n\n\n\ncluster_ApplicationsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_JobsModule\n\n\n\ncluster_JobsModule_exports\n\n\n\ncluster_JobsModule_providers\n\n\n\ncluster_OrganizationsModule\n\n\n\ncluster_OrganizationsModule_exports\n\n\n\ncluster_OrganizationsModule_providers\n\n\n\n\nApplicantsService \n\nApplicantsService \n\n\n\nApplicantsModule\n\nApplicantsModule\n\nApplicantsService  -->\n\nApplicantsModule->ApplicantsService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApplicantsModule->AppModule\n\n\n\n\n\nApplicantsService\n\nApplicantsService\n\nApplicantsModule -->\n\nApplicantsService->ApplicantsModule\n\n\n\n\n\nApplicationsService \n\nApplicationsService \n\n\n\nApplicationsModule\n\nApplicationsModule\n\nApplicationsService  -->\n\nApplicationsModule->ApplicationsService \n\n\n\nAppModule -->\n\nApplicationsModule->AppModule\n\n\n\n\n\nApplicationsService\n\nApplicationsService\n\nApplicationsModule -->\n\nApplicationsService->ApplicationsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nFeatureConfigModule\n\nFeatureConfigModule\n\nAppModule -->\n\nFeatureConfigModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nJobsModule\n\nJobsModule\n\nAppModule -->\n\nJobsModule->AppModule\n\n\n\n\n\nJobsService \n\nJobsService \n\nJobsService  -->\n\nJobsModule->JobsService \n\n\n\n\n\nOrganizationsModule\n\nOrganizationsModule\n\nAppModule -->\n\nOrganizationsModule->AppModule\n\n\n\n\n\nOrganizationsService \n\nOrganizationsService \n\nOrganizationsService  -->\n\nOrganizationsModule->OrganizationsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nJobsService\n\nJobsService\n\nJobsModule -->\n\nJobsService->JobsModule\n\n\n\n\n\nOrganizationsService\n\nOrganizationsService\n\nOrganizationsModule -->\n\nOrganizationsService->OrganizationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    33 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppConfiguration   (src/.../app.configuration.ts)\n                        \n                        \n                            ApplicantDocument   (src/.../applicant.entity.ts)\n                        \n                        \n                            ApplicationDocument   (src/.../application.entity.ts)\n                        \n                        \n                            FileDocument   (src/.../file.entity.ts)\n                        \n                        \n                            JobDocument   (src/.../job.entity.ts)\n                        \n                        \n                            JwtPayload   (src/.../jwt-payload.type.ts)\n                        \n                        \n                            MockModel   (src/.../mock.model.ts)\n                        \n                        \n                            MongoConfiguration   (src/.../mongo.configuration.ts)\n                        \n                        \n                            MongooseClientSession   (src/.../transaction-param.decorator.ts)\n                        \n                        \n                            MulterConfiguration   (src/.../multer.configuration.ts)\n                        \n                        \n                            OrganizationDocument   (src/.../organization.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../user.entity.ts)\n                        \n                        \n                            UserMockModel   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/feature-config/configuration/app.configuration.ts\n    \n    \n        \n            \n                \n                    \n                    AppConfiguration\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/applicants/entities/applicant.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ApplicantDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/applications/entities/application.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ApplicationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/files/entities/file.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FileDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/jobs/entities/job.entity.ts\n    \n    \n        \n            \n                \n                    \n                    JobDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/auth/types/jwt-payload.type.ts\n    \n    \n        \n            \n                \n                    \n                    JwtPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/database/test/support/mock.model.ts\n    \n    \n        \n            \n                \n                    \n                    MockModel\n                \n            \n            \n                \n                        Partial, jest.Mock>>\n\n                \n            \n        \n    \n    src/feature-config/configuration/mongo.configuration.ts\n    \n    \n        \n            \n                \n                    \n                    MongoConfiguration\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/common/decorators/transaction-param.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    MongooseClientSession\n                \n            \n            \n                \n                        mongoose.ClientSession\n\n                \n            \n        \n    \n    src/feature-config/configuration/multer.configuration.ts\n    \n    \n        \n            \n                \n                    \n                    MulterConfiguration\n                \n            \n            \n                \n                        ConfigType<>\n\n                \n            \n        \n    \n    src/organizations/entities/organization.entity.ts\n    \n    \n        \n            \n                \n                    \n                    OrganizationDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/test/support/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    UserMockModel\n                \n            \n            \n                \n                            MockModel\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfiguration   (src/.../app.configuration.ts)\n                        \n                        \n                            ApplicantSchema   (src/.../applicant.entity.ts)\n                        \n                        \n                            ApplicationSchema   (src/.../application.entity.ts)\n                        \n                        \n                            ApplyApiStatus   (src/.../apply-api-status.decorator.ts)\n                        \n                        \n                            createMockModel   (src/.../mock.model.ts)\n                        \n                        \n                            createUserDtoStub   (src/.../create-user-dto.stub.ts)\n                        \n                        \n                            FileDocumentSchema   (src/.../file-document.entity.ts)\n                        \n                        \n                            FileSchema   (src/.../file.entity.ts)\n                        \n                        \n                            InjectAppConfig   (src/.../app.configuration.ts)\n                        \n                        \n                            InjectMongoConfig   (src/.../mongo.configuration.ts)\n                        \n                        \n                            InjectMulterConfig   (src/.../multer.configuration.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            JobSchema   (src/.../job.entity.ts)\n                        \n                        \n                            mongoConfiguration   (src/.../mongo.configuration.ts)\n                        \n                        \n                            multerConfiguration   (src/.../multer.configuration.ts)\n                        \n                        \n                            OrganizationSchema   (src/.../organization.entity.ts)\n                        \n                        \n                            Permissions   (src/.../permissions.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            QualificationSchema   (src/.../qualification.entity.ts)\n                        \n                        \n                            RegionSchema   (src/.../region.entity.ts)\n                        \n                        \n                            TransactionParam   (src/.../transaction-param.decorator.ts)\n                        \n                        \n                            updateUserDtoStub   (src/.../update-user-dto.stub.ts)\n                        \n                        \n                            USER_PERMISSIONS_KEY   (src/.../permissions.decorator.ts)\n                        \n                        \n                            UserModel   (src/.../user.model.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                        \n                            UsersRepository   (src/.../users.repository.ts)\n                        \n                        \n                            UsersService   (src/.../users.service.ts)\n                        \n                        \n                            userStub   (src/.../user.stub.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/feature-config/configuration/app.configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('app', () => {\n  return {\n    environment: process.env.NODE_ENV || 'development',\n    apiKey: process.env.API_KEY || 'secret_key',\n    jwtPrivateKey: process.env.JWT_PRIVATE_KEY || 'secret_key',\n    jwtExpiresIn: process.env.JWT_EXPIRES_IN || '1h',\n    protocol: process.env.APP_PROTOCOL || 'http',\n    host: process.env.APP_HOST || 'localhost',\n    port: Number(process.env.APP_PORT) || 3000,\n    get domain() {\n      return `${this.protocol}://${this.host}:${this.port}`;\n    },\n  };\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        InjectAppConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Inject(appConfiguration.KEY)\n                    \n                \n\n\n        \n    \n\n    src/applicants/entities/applicant.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApplicantSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Applicant)\n                    \n                \n\n\n        \n    \n\n    src/applications/entities/application.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApplicationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Application)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/apply-api-status.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApplyApiStatus\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: number[]) => {\n  const hashMap = {\n    200: ApiResponse({ status: 200, description: 'Success' }),\n    201: ApiResponse({ status: 201, description: 'Created' }),\n    204: ApiResponse({ status: 204, description: 'No Content' }),\n    400: ApiResponse({ status: 400, description: 'Bad Request' }),\n    401: ApiResponse({ status: 401, description: 'Unauthorized' }),\n    403: ApiResponse({ status: 403, description: 'Forbiden' }),\n    404: ApiResponse({ status: 404, description: 'Not Found' }),\n    500: ApiResponse({ status: 500, description: 'Internal Server Error' }),\n  };\n\n  // Get keys to the hashMap\n  let mapKeys: number[] = Object.keys(hashMap).map((d) => +d);\n\n  // Return all statuses if there are no args\n  if (args.length  mapKeys.includes(d))\n    // Return the decorator\n    .map((d) => hashMap[d]);\n\n  return applyDecorators(...decorators);\n}\n                    \n                \n\n\n        \n    \n\n    src/database/test/support/mock.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  entityStub: Function,\n): MockModel => ({\n  find: jest.fn().mockResolvedValue([entityStub()]),\n  findOne: jest\n    .fn()\n    .mockImplementation((entityFilterQuery, projection): { exec: () => T } => {\n      return {\n        exec: jest.fn().mockResolvedValue(entityStub()),\n      };\n    }),\n  findOneAndRemove: jest.fn().mockResolvedValue(entityStub()),\n  findOneAndUpdate: jest.fn().mockResolvedValue(entityStub()),\n  findById: jest.fn().mockResolvedValue(entityStub()),\n  findByIdAndRemove: jest.fn().mockResolvedValue(entityStub()),\n  findByIdAndUpdate: jest.fn().mockResolvedValue(entityStub()),\n  create: jest.fn().mockResolvedValue(entityStub()),\n  deleteMany: jest.fn().mockResolvedValue({ deletedCount: 1 }),\n})\n                    \n                \n\n\n        \n    \n\n    src/users/test/stubs/create-user-dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createUserDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CreateUserDto => {\n  const user = userStub();\n  return {\n    firstName: user.firstName,\n    lastName: user.lastName,\n    email: user.email,\n    password: user.password,\n    password_confirm: user.password,\n    role: user.role,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/applications/entities/file-document.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileDocumentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(FileDocument)\n                    \n                \n\n\n        \n    \n\n    src/files/entities/file.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FileSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(File)\n                    \n                \n\n\n        \n    \n\n    src/feature-config/configuration/mongo.configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InjectMongoConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Inject(mongoConfiguration.KEY)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mongoConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('mongo', () => {\n  return {\n    uri: process.env.MONGO_URI || 'mongodb://localhost:27017',\n    dbName: process.env.MONGO_DB_NAME || 'nest-edms',\n  };\n})\n                    \n                \n\n\n        \n    \n\n    src/feature-config/configuration/multer.configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InjectMulterConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Inject(multerConfiguration.KEY)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs('multer', () => {\n  return {\n    dest: process.env.MULTER_FILE_UPLOAD_PATH || './upload',\n    limits: {\n      fileSize: Number(process.env.MULTER_FILE_SIZE) || 2097152, //2 MB\n    },\n    fileFilter: (req, file, cb) => {\n      if (!extname(file.originalname).match(/\\.(pdf|jpg|jpeg|png|gif)$/))\n        cb(\n          new BadRequestException(\n            `Unsupported file type ${extname(file.originalname)}`,\n          ),\n          false,\n        );\n\n      cb(null, true);\n    },\n  };\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Custom decorator to mark a route as public to bypass JWT Authentication.\nIndicating that it requires no authentication.\n\n                \n            \n\n        \n    \n\n    src/jobs/entities/job.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JobSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Job)\n                    \n                \n\n\n        \n    \n\n    src/organizations/entities/organization.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OrganizationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Organization)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/permissions.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Permissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...permissions: number[]) =>\n  SetMetadata(USER_PERMISSIONS_KEY, permissions)\n                    \n                \n\n            \n                \n                    Custom decorator to mark a route with permissions.\nIndicating that it requires certain authorization\nit is tied to the - PermissionsGuard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_PERMISSIONS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'permissions'\n                    \n                \n\n\n        \n    \n\n    src/applications/entities/qualification.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        QualificationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Qualification)\n                    \n                \n\n\n        \n    \n\n    src/applicants/entities/region.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RegionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Region)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/transaction-param.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TransactionParam\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ParameterDecorator\n\n                    \n                \n                \n                    \n                        Default value : () => {\n  return createParamDecorator((_data, req) => {\n    return req.transaction;\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/users/test/stubs/update-user-dto.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        updateUserDtoStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): UpdateUserDto => {\n  const user = userStub();\n  return {\n    firstName: user.firstName,\n    lastName: user.lastName,\n    email: user.email,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/users/test/support/user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserModel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createMockModel(userStub)\n                    \n                \n\n\n        \n    \n\n    src/users/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    src/users/__mocks__/users.repository.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UsersRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : jest.fn().mockReturnValue({\n  create: jest.fn().mockResolvedValue(userStub()),\n  find: jest.fn().mockResolvedValue([userStub()]),\n  findOne: jest.fn().mockResolvedValue(userStub()),\n  findById: jest.fn().mockResolvedValue(userStub()),\n  findByIdAndUpdate: jest.fn().mockResolvedValue(userStub()),\n  findByIdAndRemove: jest.fn().mockResolvedValue(userStub()),\n})\n                    \n                \n\n\n        \n    \n\n    src/users/__mocks__/users.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UsersService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : jest.fn().mockReturnValue({\n  create: jest.fn().mockResolvedValue(userStub()),\n  findAll: jest.fn().mockResolvedValue([userStub(), userStub()]),\n  findOne: jest.fn().mockResolvedValue(userStub()),\n  update: jest.fn().mockResolvedValue(userStub()),\n  remove: jest.fn().mockResolvedValue(userStub()),\n})\n                    \n                \n\n\n        \n    \n\n    src/users/test/stubs/user.stub.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userStub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): User => {\n  return {\n    _id: '61e2dd4b168ab2b132b39397',\n    firstName: 'Stephen',\n    lastName: 'Luchacha',\n    email: 'luchacha.s@gmail.com',\n    password: '12345678',\n    role: Role.ADMIN,\n    isActive: true,\n    lastAccessedOn: new Date('2022-01-29T13:00:00.000Z'),\n  };\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
